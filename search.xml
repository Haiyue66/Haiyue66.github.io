<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>一.横拍握拍方法</title>
    <url>/2024/04/06/%E4%B9%92%E4%B9%93%E7%90%83/1.%E6%A8%AA%E6%8B%8D%E6%8F%A1%E6%8B%8D%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>首先用手掌握住球拍，不要留出缝隙。大拇手指头搭在板把和胶皮的中间。食指放在海绵的下沿。这就是一个正确的握把方式。不要握得太紧，也不要握得太松，记住。不要流出缝隙手掌。我给大家再做几个错误示范，有很多球友握板太勾了。整个的板面是朝里的，所以导致的拉球没有办法调节，所以都是勾的，这是一种错误的方式。还有的球友这样握拍。这个手手指放在这个板的中间。所以导致这个板太撇了，而且用不上手腕。中间还会留缝隙，这是比较常见的两种错误的握把方式。</p>
]]></content>
      <categories>
        <category>乒乓球</category>
        <category>乒乓球教学</category>
      </categories>
      <tags>
        <tag>乒乓球教学</tag>
      </tags>
  </entry>
  <entry>
    <title>2.正手对攻及基本要领</title>
    <url>/2024/04/06/%E4%B9%92%E4%B9%93%E7%90%83/2.%E6%AD%A3%E6%89%8B%E5%AF%B9%E6%94%BB%E5%8F%8A%E5%9F%BA%E6%9C%AC%E8%A6%81%E9%A2%86/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>今天给大家讲一讲正手对攻及基础动作。首先，我们是站位。我们的两脚要略宽于肩膀，两条腿要微微的弯曲。重心，移至前脚尖。上半身也是要有一个向前倾斜的这个角度，这样能保证我们在击球的时候是有迎前的感觉。然后我们的身体和手击球之前要进行一个拉手的动作，手是靠我们身体去带动。进行拉手，通过我们的转腰。把手带到我们的身体侧前方的位置，达到一个。转腰拉手让位的这么一个效果，对攻的时候我们转腰拉手的这个动作就不用那么大。拉完手以后，我们在挥拍儿的时候，动作要从身体侧面，往斜上方挥至脸部上下就可以。然后挥完以后我们跟着身体。进行一个还原，回到原来的位置，给大家演示几个错误的动作啊。第一个就是。腰不动，光用手。这样的动作会导致胳膊僵硬，然后时间长也会导致肩的受伤。然后我们的版型，是垂直微微的向下压。这样的版型可以让接触球的面更大一点，接触球更实一点，我们对攻的这个板面的击球点啊，要打在中间，这个田区内这样击打的球呢会更实。然后我们这个球啊，它是走的是弧线形的，它是。落台起来再落台，对它是走这种弧线性的，所以说我们要找好这个球的弧线的规律。去迎前击打，还有一点就是大家这个点啊。身体的点位一定不要离身体太远。如果离身体太远，我们在正常动作的范围内是够不到球的，就会用手去够。这样的击球是不稳定的。也是命中率是非常低的，还有一种就是球过的太多了，整个你的动作还没等做出来呢，就被顶住了。这两点大家要记住，要找到一个适合自己的位置。大概在身体的斜侧方啊，有一点儿这种三角形跟球身体球板跟球是形成一个三角形的距离。根据实际情况去调控。只要不太远和太近就没问题。</p>
]]></content>
      <categories>
        <category>乒乓球</category>
        <category>乒乓球教学</category>
      </categories>
      <tags>
        <tag>乒乓球教学</tag>
      </tags>
  </entry>
  <entry>
    <title>4.正手拉上旋球</title>
    <url>/2024/04/06/%E4%B9%92%E4%B9%93%E7%90%83/4.%E6%AD%A3%E6%89%8B%E6%8B%89%E4%B8%8A%E6%97%8B%E7%90%83/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>第一点，正手拉上分球。最关键的是站位和腿。首先，拉球站位，大概离台子一米二左右的距离，不要太近。因为太近不好还原。第二点，左脚略比右脚稍微靠前一点。然后，比肩稍微再宽一些。这是一个基础的站位，整个的重心要前倾。不要全脚掌着地，如果全脚掌着地，可能中心有点靠后，发不上力。然后整个的这个重心，是右脚偏多。这个压在右脚，重心压在右脚。如果重心在中间的话，这个腿的劲儿使不上，所以重心必须要压在右脚。第二点是腰。有很多球友拉球，他不会用腰，而且使不上劲儿。其实腰不完全是纯用腰发力，也是需要用腿带。站住了以后，靠腿的力量带动腰。去转动腰，然后再去往前发力，不要直接转动腰，这样也发不上力，所以腰是非常关键的。在拉球之前，腰部是放松的状态。接触球的一瞬间，腰使劲，有一个爆发力。这是一个完整的发力。第三点是手。很多人拉球不知道怎么用力，其实整个的发力的过程。是腿带着腰，腰带着手，最后是手指手腕。有的人问这个这个拉手拉到多大动作？做到多少？其实这没有一个很确定的参数，其实要靠大家自己去摸索。因为每个人的拉球都不一样。所以正常拉球，你只要把腰转开，把手拉开，记住不要手，不要夹着。这个大臂这儿不要夹着，稍微放开一点儿，剩下的自然摆动就可以，然后腰带着手。然后拉球正常的情况下，拉到这个眼睛的前方就可以，至于大一点儿小一点儿，其实都没事儿，因人而异，只要你能发生力，就是一个好动作。还有很多球友说。抓板怎么抓？手指手腕这一瞬间。其实需要大家多去训练，多去摸索。拉球的一瞬间，其实其余的时间都是放松的，就这一瞬间是把板抓住。这一瞬间的爆发力，这个需要球友们多去练习才能找到这种感觉，还有拉球的点。最好你们能够拉球的高点。在前期你们训练的时候，以落台以后的高点为主，你们去拉，因为这个点相对来说比较容易一些。而且成功率，命中率会高一些，等你有了一定的基础，你可以抢快点也好，或者抢慢点也好，或者你去自己去调节这个弧线节奏都可以，但前提你需要把这个点拉稳定了，有一定的水平，有一定的稳定性，你再自己再去变节奏都是可以的。然后是撞击与摩擦的关系，很多球友他不懂什么叫撞击，什么叫摩擦，是先摩擦还是先撞击。我现在告诉大家是一定是先撞击再摩擦，如果先摩擦。拉的很薄的情况下，它球已经没法撞击了，所以先后顺序它一定是先撞击再摩擦，这个大家不千万不要纠结。我说的这个一定是正确的。因为撞击进去以后。因为它这个球是有时间在胶皮上的。所以我说吃我的吃球时间比较长。是因为它在胶皮上有停留时间，所以你可以先撞击。再带摩擦球质量是非常高的。我给大家做个示范。虽然你们听的是撞击的声音，但是它里边加强了这个加着很多的摩擦球，质量是非常高，如果先摩擦再撞击，你们再听一下。你没有办法去撞击了，你只有胶皮的声音，摩擦的声音。所以先后顺序大家记住了，一定是先撞击再摩擦。拉球的版型大家记住两个错误的点。一个是太压，如果太压，你没有击球的空间。你很容易板边也很容易漏球，所以拉球不能压板。第二个就是不能太亮。如果太亮了，你没法加摩擦，你只能撞击，你只能撞击加摩擦，你只能上下才能加摩擦，所以这两个版型都是不对的。稍微前倾一点。稍微前倾一点就可以。然后然后拉球，这样你才能先撞击再摩擦是吧？只有这个版型才是正常的拉球版型。这样和这样都是错误的。</p>
]]></content>
      <categories>
        <category>乒乓球</category>
        <category>乒乓球教学</category>
      </categories>
      <tags>
        <tag>乒乓球教学</tag>
      </tags>
  </entry>
  <entry>
    <title>5.正手拉下旋球</title>
    <url>/2024/04/06/%E4%B9%92%E4%B9%93%E7%90%83/5.%E6%AD%A3%E6%89%8B%E6%8B%89%E4%B8%8B%E6%97%8B%E7%90%83/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>今天给大家讲一讲正手是如何拉下旋的？</p>
<p>​	首先第一点，就是我们的脚。大家记住，力从脚起，力量从脚下，要往上传，不是拉球，是只有手啊，一定力是从脚下传上来的。首先我们拉下旋的站位呢呃，可能要比拉上旋稍微站的稍微宽一点。上旋呢，是脚比肩略宽，下旋就是比上旋的位置再略宽一点儿，这样的话，我们能两只脚。抓地踩地踩的更实一点，这个力量能更集中一点，然后第二点就是我们的腿。我们这个腿啊，这力量来源于都是因腿而产生的这种力量，然后传递到手上，我们腿该怎么去用呢？以右手持牌为为基准啊，我肯定是右腿去往下压。所以说我们在拉球之前啊，我们要把我们的力量啊踩到我们的右腿上，然后我们右腿是一个弯曲的状态。因为你不弯的情况下，这样你是使不上劲儿的。一定是要弯曲蓄力。把我们的力量续到右腿上，把整个重心压到右腿上。第三点就是我们的腰胯。我们在右腿往下踩的同时，我们右胯内收。然后腰转动。如果你能感觉到腰胯这个位置，转到已经卡在这里了，转不动了，那说明你的腰和胯就已经转到位了。有些人为什么体会不到这种感觉？是因为你们转腰的同时把腿也转过来了。你腿只要一转过来，你腰胯怎么转发出的都是顺劲儿，是踩的同时腰跨转，右腿是不动的。是把这个力量给它充分的别在胯这里，你去转的话，你腿一蹬，腰一出来，这个腰胯的力量就出来了。</p>
<p>​	我们现在讲一下手上啊，在拉手的时候我们腰胯转过来以后我们手啊，随着身体的转动，自然的放松打开。不要打的特别直。也不要打的特别紧啊，这样都是影响触球的，这种制动发力，找到一个适中的，很放松又能体会到跟身体又有相连的感觉，这种感觉是最好的。然后我们手打开以后。这个时候我们手指手腕也有一点的引拍，手指手腕有一点的下引的感觉。这这个下引呢，是为了我们最后触球那一下能充分的转动我们的手腕来制造弧线，调节弧线。如果你手腕是翘起来的。你在触球的时候，你身体即使能发出再大的力，它也是一个没有制动。我们最后要通过手指，手腕，板头这一下来制造这个弧线来释放这个身体带来的力量。现在我们讲一讲出手，我们之前给大家讲的都是一些拉手各个部位的展示。先来讲一讲出手，如果说现在你要是去冲下去，那么你的击球点一定是高点。或者是下降前期，这两个点是因为这两个点是你能去进攻，非常好往前进攻的一个点。那我们的手上。应该怎么去做呢？如果你要是冲。你想进攻。我们的发力感觉就是顶擦，现在给大家演示一下什么叫顶擦，也是撞击与摩擦。啊，先是顶，现在就是撞击。我们要去通过撞击把板子打透。啊，这样的话，我们的力量才能得到释放。那什么叫做顶擦呢？就是在我们。顶住球击实的那么一刹那，我们去瞬间加上我们手指手腕的摩擦。就是可以。造成我们的力量出来了。摩擦旋转弧线也就出来了。好，下面给大家展示几个前冲的感觉。刚才给大家讲的是这种前冲，也就是所谓的我们冲下旋。</p>
<p>​	现在给大家讲一讲这个高调是怎么去高调的？我也建议基础不好的，或者是新手练下旋的，我们先从高调练起，我们要知道怎么去抵消。下旋来球的这个旋转来制造出我们的旋转。才能过往到对方的球台上。大家一定要先明白这个啊，所以我们要先从高调练起。高调的击球点啊，它跟前冲的击球点有点儿不一样，前冲点啊，都是属于高点或者是高点等一下的那个点。我们拉高调，一定要把球给他放下来。刚才我也给大家讲了这种身体的这种发力感觉，我们拉高调的时候也是一样，是用上身体的发力感觉。不是说我们高调，我们身体就不用力，或者是我从下往上去举这个球，不是我们身体还是会去用力。然后只不过在我们触球这一下，我们摩擦的比撞击的概率要多啊，我们大多数把球是。一种什么样的感觉？就是触球以后啊，我们的手指手腕是有一个小型提拉的这种感觉，我要把球给它拿在自己手上。进行一个摩擦造弧线。然后最后通过身体和小臂，我们把球给它收住，把弧线造起来，把弧线拉的短一些。这样的话就会瞬间形成一个弧线过网以后的下坠。这个就是我们的这种粗弧线以及高调的这种造弧线的感觉，我下面给大家示范一下。看我的手指手腕在触球那么一刹那，我是把它给转住包裹住了，弧线我是完全是通过手指弯瞬间这种提拉摩擦转板，把球给他抓住。形成发力抓弧线。我我身体一样，用着力量，但是你看我拉个球是慢的，我就是把我的力量全发在我的摩擦上了，我没让球冲出去。我让他把弧线稳稳的造出来，这样的话会增加这个球的无限性和稳定性，不管是前冲还是发力。我们最后的力量的释放和摩擦旋转的释放一定是板头要出来。我们不能板头，最后是卡在里面，手腕手指出不来的情况下，你的旋转就得不到释放，你的力量也得不到释放。所以说，不管是前冲还是高调，我们最后手指头腕儿头一定要出来。所以说咱们基础差的，包括刚练习拉下旋的，一定要先练习这种高调。练习你手上造弧线的能力，摩擦球的能力。只有你掌握了，怎么样去抵消它的下旋旋转，你吃透了这个下旋的旋转，你就不怕下旋了。你手上有这个能力，以后你到时候是想冲也好，想吊也好，你都可以去随意运用。前提是你一定要吃透这个旋转，掌握了这种摩擦的感觉，只要你明白了。腰胯脚身体这种发力的原理，你可以运用到所有的正手技术上。</p>
]]></content>
      <categories>
        <category>乒乓球</category>
        <category>乒乓球教学</category>
      </categories>
      <tags>
        <tag>乒乓球教学</tag>
      </tags>
  </entry>
  <entry>
    <title>税务专项积累</title>
    <url>/2024/04/02/%E7%A8%8E%E5%8A%A1%E4%B8%93%E9%A1%B9%E7%A7%AF%E7%B4%AF/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>王向南是一位传奇的税务干部。他经过四年的努力成为注册会计师和税务师，并在全国税务系统比赛中获得了优异成绩，同事们称他为“逆袭者”。他不怕苦，坚持学习，在办税大厅成为业务骨干。他还带领团队解决了企业风险问题，建立了监管团队和风险数据应用场景，为企业提供精准服务。在助企纾困方面，他深入企业调研，帮助解决问题。当退税流程出现问题时，他紧急协调各级团队，使税款成功退回企业账户。</p>
<span id="more"></span>

<p>扬州市广陵区税务局曲江税务分局分局长邱嵩：他是“全国百佳办税服务厅主任”，27年来在办税一线用最暖心的微笑、最精细的服务，推行“举红旗、亮红旗、树红旗、传红旗”工作法，打造温馨的“红旗办税厅”，所在团队先后获评“一星级青年文明号”“全国巾帼文明岗”“江苏省工人先锋号”“江苏省文明单位”“江苏省税务系统‘示范党支部’”等殊荣。</p>
<p>他们中有的始终奔跑在纳税缴费服务一线，为纳税人缴费人，推出一系列高效便民的精细化服务举措，有的默默驻守在祖国南大门，在争分夺秒夜以继日的奋斗中践行为民服务的使命担当。有的在急难险重的任务中敢于挑大梁担重任，用心用智用情服务纳税人缴费人。有的智勇双全，在税收执法监管工作中敢于亮剑，以实际行动坚定维护公平规范的税收环境，他们来自不同地区，立足不同岗位，是税收战线上锐意进取，敢闯敢拼的追梦人，也是不负韶华，全力以赴的圆梦人，是税务系统广大干部职工学习的榜样。</p>
<p> 坚持智慧税务建设。智慧税务可以有效提升税收治理的效能，承担更高效管理庞大的纳税人缴费人群体，更快捷落实大规模减税降费政策，更精准满足个性化服务需求等任务。我们应当积极推进金税4期工程建设步伐，充分运用大数据、云计算等新技术，推进自动精准算税，智能分析预警，风险防控及时的链条式管理，坚持以纳税人缴费人的需求为中心，充分运用人工智能、互联网、5g等先进技术，以快捷高效务实的智能办税服务不断打造线下服务无死角，线上服务不打烊，定制服务广覆盖的纳税服务新体系，进一步加快传统的税收征管方式，从信息化向数字化、智能化全面转型升级。</p>
<p> 国家要开放三胎，税务部门规定对3岁以下子女的相关支出按照1000元标准扣除。国家鼓励企业自主研发，税务部门出台研发费用加计扣除政策。国家鼓励碳中和，绿色低碳发展，税务部门出台绿色税制改革政策。国家推行走出去，一带一路政策，税务部门出台税路通政策。国家要求建立统一大市场，税务部门去提供税动力。</p>
<p> A专家会给大家介绍新时代我国的税制改革带着大家回顾我国税制改革的历程，并从国际上的税制改革趋势来解说当前我国税收制度的基本情况和特征。b专家会给大家介绍财税前沿与税收实物，带着大家一起了解金税4期，全电发票，对高收入高净值人群开展税务稽查等财税热点，让大家对财税学的实际应用有深入认知。C专家会给大家介绍财税领域的常见误区，就财政压力，财政贡献，财政分权，财政赤字等财税研究中常见的误区进行详细讲解，让大家能够避免认知误区。每位专家在授课完之后，各位同学都可以举手提问，授课专家也会留下联系方式，方便后续答疑解惑。</p>
<p>  2</p>
<p> 坚持依法治税。我们要去着力优化税收执法方式，增强税收执法的公信力和透明度，实现精确执法，结合税收风险管理和纳税信用评价，实现无风险不打扰，有违法要追究，全过程强智控的税收执法新体系，严格遵守税务行政处罚裁量权规范，落实首违不罚，推动严格规范公正文明执法，做到宽严相济、法理相融，让税收执法既有力度又有温度。</p>
<p> 今年以来，全国税务系统认真贯彻党中央、国务院决策部署，把抓好新的组合式税费支持政策落实作为建强政治机关，服务国之大者的实际行动，坚决扛牢政策落实的政治责任，确保政策落准落好。既有增值税留抵退税，又有小规模纳税人阶段性免征所得税政策；既提高科技型中小企业研发费用加计扣除比例到100%，又有减征小微企业和个体工商户所得税政策；既有阶段性降低失业保险、工伤保险费率，又有残疾人就业保障金优惠政策；这些政策将真金白银直达企业，降低税费负担，缓解企业资金短缺等压力，进而起到放水养鱼，水多鱼多的效果，提振发展信心、稳就业保民生。</p>
<p>非接触式办税,一厅联办，春雨润苗专项行动，税务政策宣讲，12366热线接听等方面的表现</p>
<p>要加强沟通交流能力，当前。为助力稳经济，税务部门持续出台一系列诸如普惠式降税率的减税降费政策。唯有具备良好的沟通交流能力，才能用生动鲜活的案例把政策讲清楚，把流程说明白，通俗易懂，深入浅出讲透政策措施的重点难点，确保企业应知尽知、应享尽享税费优惠。（最美税务人的例子用起来）</p>
<p>2023年全年组织各项税费收入31.7万亿元，其中税收收入15.9万亿元，社保费收入8.2万亿元。</p>
<p>放水养鱼，鱼多水多</p>
<p>加强监管持续健全，以动态信用加风险为基础的新型税务监管体系，对高风险行业开展专项整治，充分发挥税务公安法院检查人民银行海关市场监管外汇管理，八部门常态化打击涉税违法犯罪工作机制作用。</p>
<p>优化服务解难题，通过解决一项诉求，实现破解一类难题，优化一类服务的效果，聚焦产业链供应链不畅的困难企业发展诉求，在尊重企业意愿的前提下，利用税收大数据主动为企业牵线搭桥，全年共帮助企业实现购销213亿元，聚焦缓解小微企业融资难，深化拓展营税互动，进一步降低中小银行参与门槛，全年助力小微企业获得银行贷款892.8万笔贷款金额2.84万亿元。</p>
<p>要加强监管，一是严厉打击虚开骗税违法犯罪。聚焦假企业虚开发票，假出口骗取退税，假申报骗取优惠等涉税违法犯罪行为，积极联合相关部门开展精准打击。</p>
<p>二是加大重点行业，重点领域整治力度。聚焦重点行业和重点领域涉税违法风险开展专项整治集中力量查处一批偷逃税大案要案，特别是常态化加强文娱领域税收监管组织，查处，一些演艺明星和网络主播偷逃税典型案例有利，规范行业税收秩序，促进相关行业的健康发展。   要加大重点行业，重点领域整治力度，聚焦重点行业和重点领域去开展专项整治活动，集中力量去查处大案要案，特别是要常态化的去加强相关领域的监管，有力规范行业秩序，促进行业健康发展。依法精准，打击靶向综合整治，常态长效曝光，努力营造更加规范有序，更显法治公平的税收营商环境。</p>
<p>纳税人满意度调查综合得分由2020年的86点1分提升至2023年的89.24分</p>
]]></content>
      <categories>
        <category>公务员</category>
        <category>面试</category>
        <category>国税面试</category>
      </categories>
      <tags>
        <tag>面试</tag>
        <tag>公务员</tag>
      </tags>
  </entry>
  <entry>
    <title>有趣的hexo插件</title>
    <url>/2023/06/11/%E6%9C%89%E8%B6%A3%E7%9A%84hexo%E6%8F%92%E4%BB%B6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="bili_video"><iframe src="https://player.bilibili.com/player.html?aid=1&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" width="544" height="452" allowfullscreen="true"> </iframe></div>
]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>2023年6月11号税务题目打卡</title>
    <url>/2023/06/11/2023%E5%B9%B46%E6%9C%8811%E5%8F%B7%E7%A8%8E%E5%8A%A1%E9%A2%98%E7%9B%AE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="第一题"><a href="#第一题" class="headerlink" title="第一题"></a>第一题</h1><p>这10年，我国税收工作取得明显成效，具体数据如下:</p>
<p>1.便民办税春风行动累计推出54类197项539条创新服务举措，减少50%的资料报送和25%的纸质表证单书，打造最多跑一次。</p>
<p>2.纳税人缴费人满意度第三方调查得分2022年第三方调查的纳税人满意度由2012年的79.7分提高到89.2分。</p>
<p>3.积极服务经济社会发展自2013年至2022年累计新增减税降费和退税缓税缓费超13万亿元。</p>
<p>4.荃国新办涉税市场主体累计达9315万户，年均增加逾千万户。增值税一般纳税人户数由2015年底的544万户增长至2021年底的1238万户，“放水养鱼”的效果持续显现。</p>
<p>5.全国税务系统自2013年以来共派出专职扶贫干部3.42万名，其中第一书记1.05万名，帮扶8782个贫村<strong>。</strong></p>
<p>请你谈谈对上述数据的理解和认识，然后选择其中一条具体论述。</p>
<span id="more"></span>

<h2 id="答案1："><a href="#答案1：" class="headerlink" title="答案1："></a>答案1：</h2><p>通过上述数据我们可以看到，这十年，税务部门主动服务经济社会发展大局，服务国家治理体系和治理能力现代化，<strong>持续提升税费征管质量，厚积了国家治理的“血脉之源”；坚持“民之所盼，税之所向”，深植了念兹在兹的“为民之情”；积极推动税收征管改格进入快车道，凝聚了创新创造的“跨越之力”；深入推进智慧税务建设，铸就了科技兴税的“腾飞之翼”，</strong>充分发挥了税收在国家治理中的基础性、支柱性、保障性作用。</p>
<p>下面我将选择第一条具体论述。<strong>十年春华秋实，十年铿锵前行</strong>，“便民办税春风行动”从2014年至今已连续开展十年。<strong>让纳税人缴费人越来越温暖的“春风”，正是税务部门始终把“千家万户的事”放在心里的真实写照。</strong>围绕纳税人缴费人所盼所想所愿，聚焦办税缴费的堵点难点痛点，税务部门持续推出一系列便民办税缴费的创新举措，<strong>全力为纳税人缴费人减负担、降成本、优环境、添活力</strong>，树立起税收为民的闪亮品牌。主要成效体现在以下几个方面：</p>
<p><strong>一是优化服务降低办税成本。</strong>通过优化办理程序，提升办理体验，压缩办理时长，持续降低市场主体办税缴费成本。全面实行税务行政许可事项清单管理，优化纳税人延期缴纳税款等税务事项办理程序，降低市场主体制度性交易成本。</p>
<p><strong>二是分类施策服务市场主体。</strong>针对不同类型服务对象的多元化个性化需求，“量体裁衣”持续提升服务精细度。针对大型企业，帮助企业完善税务内部控制体系，降低大企业纳税人税收风险。针对中小微企业，联合全国工商联开展春雨润苗”专项行动，推进“专精特新”中小企业和“小巨人”企业“一户一档”服务措施落实。</p>
<p><strong>三是规范执法优化营商环境。</strong>在提升服务质效的同时，还在优化执法、保障权益上出实招，营造规范有序、公平高效的市场环境。</p>
<p>王军局长强调“税费服务没有休止符，更无终点站”。便民办税只有进行时，“春风行动”永远在路上。2023年便民办税的暖暖“春风”已拂面而来，围绕“诉求响应提质”“政策落实提效”“精细服务提档”“智能办税提速”等六个方面，先后推出首批17条措施，第二批25条举措，第三批20条措施，相信一定可以进一步提升纳税人缴费人满意度。</p>
<h2 id="结构："><a href="#结构：" class="headerlink" title="结构："></a>结构：</h2><p>谈谈理解和认识，下面这段话直接背下来，作为套话：</p>
<p>通过上述数据我们可以看到，这十年，税务部门主动服务经济社会发展大局，服务国家治理体系和治理能力现代化，<strong>持续提升税费征管质量，厚积了国家治理的“血脉之源”；坚持“民之所盼，税之所向”，深植了念兹在兹的“为民之情”；积极推动税收征管改格进入快车道，凝聚了创新创造的“跨越之力”；深入推进智慧税务建设，铸就了科技兴税的“腾飞之翼”，</strong>充分发挥了税收在国家治理中的基础性、支柱性、保障性作用。</p>
<p>一是优化服务降低办税成本。</p>
<p>二是分类施策服务市场主体。大型企业，中小微企业</p>
<p>三是规范执法优化营商环境。</p>
<h1 id="第二题"><a href="#第二题" class="headerlink" title="第二题"></a>第二题</h1><p>为了进一步优化营商环境，迎接第32个税收宣传月，各地税务机关以“问需求、求建议”为主题开展税企活动。其中包括:青年税企联谊会、税企云课堂、税企直通车、税企沙龙、税邮驿站、户外大屏宣传、春日税企之约座谈会、税法政策直通宣讲会、送优惠进企业。请你选择一个最有效的活动，并展开论述活动过程。</p>
<h2 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h2><p>我认为最有效的活动是“税企沙龙”。具体论述如下：</p>
<p>首先，摸底定题成方案。梳理最新政策文件，明确活动重点，制定活动方案，并对接好参与沙龙的企业。</p>
<p>其次，架起税企“连心桥”。</p>
<p>环节一：送政策。税务工作人员围绕“延续和优化实施部分阶段性税费优惠政策”进行宣讲，重点讲解研发费用税前加计扣除比例由75%提高至100%，减征小微企业和个体工商户部分所得税，降低失业和工伤保险费率等政策，通过实操方式向纳税人介绍发票电子化的优势和电子税务局操作过程中的注意事项，引导纳税人加强网上办理涉税业务。</p>
<p>环节二：问需求。税务工作人员紧扣“第32个税收宣传月”主题，详细了解企业的涉税诉求，了解企业生产经营、招工用工、融资贷款等方面的需求，分析企业在经营过程中存在的涉税风险。</p>
<p>环节三：求建议。围绕“诉求响应提质、政策落实提效、精细服务提档”等六方面，听取企业希望提供的政策扶持建议，重点了解企业希望税务部门在第四、五批便民春风行动”中出台哪些具体举措。</p>
<p>最后，汇总意见成报告。分类整理收集到的需求、建议，撰写报告，报领导审批。</p>
<h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><p>首先，摸底定题成方案。梳理最新政策文件，明确活动重点，制定活动方案，并对接好参与沙龙的企业。其次，架起税企“连心桥”。</p>
<p>环节一：送政策。</p>
<p>环节二：问需求。</p>
<p>环节三：求建议。</p>
<h1 id="第三题"><a href="#第三题" class="headerlink" title="第三题"></a>第三题</h1><p>税务部门要发行“绿色税收”专刊，你是出版社负责报刊对接的工作人员。作者杨教授因刊物数据不到位找到小刘，让他重新核实数据和案例，小刘说不是他负责，是大罗负责。小刘找到大罗沟通，但是大罗并未及时更改。由于大罗工作资历较老且考虑工作氛围，小刘没有再提及此事，导致杨教授批评了小刘。同时，大罗也表示工作难度大、任务重、时间紧，觉得不必苛求。作为出版社报刊对接工作人员，你会如何和他们沟通?</p>
<h2 id="答案3"><a href="#答案3" class="headerlink" title="答案3"></a>答案3</h2><p>我会以座谈会方式与杨教授、小刘、大罗沟通。主要沟通一下内容：</p>
<p><strong>一、保障刊物高质量。</strong>“绿色税收”专刊是国家税务总局创建的，对内容要求较高，文稿必须遵循资料可靠、数据准确、书写规范等要求，如数据不准将不会被收录，所以对于不到位的数据应该高度重视，认真修改，比如本篇文章是关于“2023年便民春风行动”第一二批措施落实情况的，数据和案例会被纳税人缴费人看到，也关乎下一步的工作开展，必须核实清楚，建议借助“数据采集软件”“资金分析系统”等电子信息“助手”核实。</p>
<p><strong>二、保障刊物高效率。</strong>“绿色税收”专刊每月出版一期，具有时效性，并且需要提前审稿、排版等工作，需要杨教授团队按规定时间及时提交。当前距离截止时间所剩不多，文章质量存在数据不到位、案例不清晰等情况，需要尽快修正。如果觉得难度大、任务重、时间紧，我们出版社可以提供知网、万维数据、万方数据、维普网等相关数据，文字校对等工作也可提前介入帮忙修改。</p>
<p>最后，我也会告诉他们，在撰写过程中有任何问题需要帮助可及时与我们取得联系，我们愿意及时提供可靠、有效的帮助。</p>
]]></content>
      <categories>
        <category>公务员</category>
        <category>面试</category>
        <category>税务面试</category>
      </categories>
      <tags>
        <tag>面试</tag>
        <tag>公务员</tag>
      </tags>
  </entry>
  <entry>
    <title>2023年6月10号税务题目</title>
    <url>/2023/06/10/2023%E5%B9%B46%E6%9C%8810%E5%8F%B7%E7%A8%8E%E5%8A%A1%E9%A2%98%E7%9B%AE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="第一题"><a href="#第一题" class="headerlink" title="第一题"></a>第一题</h1><p><strong>王军在新年献词提出来以下五点：1.我们始终高擎*<em>*··**旗红、引领税务蓝，在深入学习贯彻…中永葆本色。</em>2.我们倾力惠及千万户、温暖亿万家，在不折不扣落实税费支持zhengce中践行为民初心。</strong></p>
<p><strong>3.我们着力推出硬举措、构建新体系，在合成深化税收征管gaige中厚植创新动能。</strong></p>
<p><strong>4.我们切实守好主阵地、拓展新领域，在积极主动服务“Guo之大者”中展现税务担当。</strong></p>
<p><strong>5.我们持续树牢好导向、激发活力源，在严管善待倾情带队中锻造税务铁军。</strong></p>
<p><strong>针对你对这段话的理解，选择一句谈谈你的看法：</strong></p>
<span id="more"></span>



<p>2022年，面对复杂严峻的国内外形势和多重超预期因素冲击，国家强化宏观政策跨周期和逆周期调节，及时果断部署实施新的组合式税费支持政策。税务部门克服时间紧、任务重、工作量大等困难，采取“快退税款、狠打骗退、严查内错、欢迎外督、持续宣传”五措并举工作策略，不折不扣深入落实，将政策红利精准快捷送到纳税人缴费人手中，全年新增减税降费及退税缓税缓费超过4.2万亿元，直接为广大市场主体“输血”“活血”，在支持企业纾难解困、保市场主体保就业、助力稳住宏观经济大盘、促进高质量发展等方面发挥了关键性作用。</p>
<p>一方面，推出集成性落实举措，高效确保红利直达快享。为实现政策应知尽知，第一时间联合有关部门发布政策及配套解读，编制13项重点政策操作指南，利用大数据建立全国统一的宣传辅导标签体系，精准推送优惠政策44批次共4.75亿户次，变“人找政策”为“政策找人”。为推动留抵退税款应退尽退，建立符合条件纳税人清册，提前摸清退税底数，逐户帮助纳税人算清退税金额，通过电子税务局自动预填85%以上申请数据，及时完成退税审核办理退付，企业退税资金从申请到入账平均用时同比压缩40%，其中制造业增量留抵退税平均用时压缩至2个工作日以内。</p>
<p>税费优惠政策是积极财政的重要内容，是直接有效和公平的惠企政策，也是对“为国聚财、为民收税”初心的坚守。3月24日，按照“该延续的延续、该优化的优化”的要求，郭嘉决定延续和优化实施部分阶段性税费优惠政策，包括研发费用税前加计扣除比例由75%提高至100%，减征小微企业和个体工商户部分所得税，降低失业和工伤保险费率等zc，相信这些政策一定会进一步助力企业发展，用政府收入的“减法”，来换取企业效益的“加法”和市场活力的“乘法”，放水养鱼，固本培元。</p>
<h1 id="第二题"><a href="#第二题" class="headerlink" title="第二题"></a>第二题</h1><p><strong>为了推进智慧税务建设，你单位开发了“税小通”智能机器人，具有智能导税，智能宣传，智能预约、大数据分析等功能，请结合它的功能和特点开展一个有创意的推广活动，你会怎么组织？</strong></p>
<p>我会开展“税小通”互动开放日活动，借助第32个全国税收宣传月活动启动仪式，通过“三个一”推广。</p>
<p>制作一个“税小通”动漫宣传片。将“税小通”拟人化为一个卡通人物形象，制作动漫宣传片，将“税小通”为纳税人代开专用发票、代开普通发票、增值税小规模申报、打印信用证书、开具纳税证明等常用功能进行详细讲解，并说明如何通过点击、人机对话等方式进行互动答疑，并将此宣传片投放在办税大厅、税务局微信公众账号等。</p>
<p>参与一次“税小通”游大厅活动。“税小通”通过语音识别、触摸交互、移动互联、现场走动等方式，与来业务大厅办事的纳税人及缴费人现场互动，办事人员说出想去的服务窗口、说明想要办理的业务，“税小通”通过AR实景互动导览可提供一站式、可视化、精准化的办税指引，帮助初次进厅人员快速了解功能分区，并会引导办事人去相应的区域。</p>
<p>体验一次“税小通”智慧办税服务。由税务人员模拟办税人员对纳税人及缴费人进行现场演示，展示“税小通”政策业务解答、移动导税指引、人脸识别、身份证识别、地图导航等功能，开展税收政策即问即答活动，对于当前热点税费问题，如：留抵退税政策、退税办理流程有什么变化、个人所得税如何计算等一一进行提问；体验对“税小通”说出企业名称、机构代码证等内容，提供税务风险自测服务，即时打印出企业风险点提示、并对如何解决提供可行性办法，同时对企业税收政策“应享尽享”提供税务指导等服务。</p>
<h1 id="第三题"><a href="#第三题" class="headerlink" title="第三题"></a>第三题</h1><p> <strong>小林是刚到单位的新人，在工作中遇到了以下情况，导致心情低落。</strong></p>
<p><strong>1.他向小陈请教问题，直接给他转发了一个文件，他觉得太冷淡。</strong></p>
<p><strong>2.业务咨询电话特别多，忙不过来，找同事帮忙解决也没有得到回应，工作中被投诉了，导致害怕接电话。</strong></p>
<p><strong>3.业务繁忙，很多工作完成不了，总是加班，看到别人工作都很轻松，心里有点不平衡。</strong></p>
<p><strong>你作为他的好朋友，会如何劝导他，请情景模拟。</strong></p>
<p>小林呀，还在加班呀，我也有一堆工作没完成呢，咱们先聊5分钟再一块加班吧。其实不光咱们俩忙，大家都很忙，现在加班加点都常态化了，听老同事说，他们以前都“白加黑”“五加二”呢，所以咱们才被称为税务铁军呀。其实别人也都很忙，只是我们不了解他们的工作，觉得很轻松，你看到张大哥每天下午两三点就走了，以为他下班了，其实他是去企业“一对一”帮扶，给他们讲政策、解难题，每天也是回家到八九点。其他人也是一样，各有自己的一堆工作，就像小陈负责“便民办税春风行动”，这几天第三批措施工作任务安排表又下来了，里面的开展第32个全国税收宣传月活动、“春雨润苗”专项行动、“走流程听建议”调查研究活动都是他负责，他都忙得快没有时间吃饭了，所以不是他冷淡不回答你问题，实在是太忙了，而且转发文件给你看也是在帮你成长，咱们现在做任何工作都是从研究文件开始的，你得习惯这种工作方式。</p>
<p>最近就是咨询电话特别多，前几天刚召开了“优化完善部分阶段性税费优惠政策例行吹风会”，对部分优惠政策进行了细化和调整，很多企业都来咨询，因为都是最新的政策，其他同事也不见得了解，所以才没有回应。但是你既然负责接电话这项工作，就得把政策弄明白，等晚会加完班咱们俩一块研究研究政策的细则吧，只要能够把政策烂熟于心，就一定能让纳税人缴费人满意，你也就不用担心接电话了，再说新人被投诉也是正常的，咱们更是要哪里跌倒了就从哪里爬起来，哪能不敢接电话呢。</p>
<p>好啦，别郁闷了，再干两个小时，咱们一块下班哈。</p>
]]></content>
      <categories>
        <category>公务员</category>
        <category>面试</category>
        <category>税务面试</category>
      </categories>
      <tags>
        <tag>面试</tag>
        <tag>公务员</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2023/06/09/%E6%9D%82%E9%A1%B9/1aaa/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="f9dcd17f2fcc5809265c129857ef56cc56daa45ba2073c2d628b26363633e308">8fb749fda75eae689c3df2a2a950d5eee9f7994bff8040d01a9735e92fc2453e879dfe8825d3a3b2a8dc528c0fea74d7a14410bc52522380dc4808f946bcfd233046883f8ae03ed19376f9d69c241c79015048cf630effa0447df1cf6e25a4d1db19ad315fdaa9ceb3297d7b172d82a8ce816f7787d606345a5c9a98da2305eb33c4892ad79a9e8a760b3260a82c5d1b97c8184232b5aac08999316d260033e096128416d3367172f63bd3535e159521f8406b4dce674dca118a61c2b52d0decefb610d582b98edba0966177ba7ca4424b1c98786cb93ef7cbe21bd654dc38bc</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要密码.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>狂神说</category>
        <category>JavaWeb</category>
      </categories>
      <tags>
        <tag>作为日记加密</tag>
      </tags>
  </entry>
  <entry>
    <title>Typora教学</title>
    <url>/2023/06/09/%E6%9D%82%E9%A1%B9/Typora%E6%95%99%E5%AD%A6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Typora-编辑器-————-书写即为美学"><a href="#Typora-编辑器-————-书写即为美学" class="headerlink" title="Typora 编辑器 ———— 书写即为美学"></a>Typora 编辑器 ———— 书写即为美学</h1><p>今天讲授内容主要涉及PDF书中 17章第一小节和第五小节 18章第一小节</p>
<p>官方网站：<a href="https://www.typora.io/">https://www.typora.io/</a></p>
<p>支持平台：</p>
<ul>
<li>Windows</li>
<li>Linux</li>
<li>OSX</li>
</ul>
<p>特点：</p>
<ul>
<li>完美支持 Github 的 Markdown 语法；</li>
<li>人性化的书写方式：<ul>
<li>表格的书写、挪动；</li>
<li>图片，超链接，网页表格复制；</li>
<li>目录生成；</li>
</ul>
</li>
<li>支持 LeTex 公式书写；</li>
<li>支持 Flowchart，Mermaid 等流程图绘制；</li>
<li>emoji，高亮，备注，上标，下标等书写；</li>
<li>生成网页，pdf，图片，甚至 word，LeTex 等格式。</li>
</ul>
<span id="more"></span>


<h2 id="基本的带快捷键的-Markdown-书写演示"><a href="#基本的带快捷键的-Markdown-书写演示" class="headerlink" title="基本的带快捷键的 Markdown 书写演示"></a>基本的带快捷键的 Markdown 书写演示</h2><p><code>Ctrl 0</code> 到 <code>Ctrl 4</code>：普通文本、一级～四级标题；</p>
<p><code>Ctrl B</code>：加粗，<strong>加粗测试</strong>；</p>
<p><code>Ctrl I</code>：斜体，<em>斜体测试</em>；</p>
<p><code>Ctrl U</code>：下划线，<u>下划线测试</u>；</p>
<p><code>Shift Alt 5</code>：删除线，<del>删除线测试</del>；</p>
<p><code>Shift Ctrl Tab键上面那个键 </code>：行内代码块，<code>行内代码块测试</code>；</p>
<p><code>Ctrl K</code>：超链接，<a href="www.baidu.com">超链接测试</a>；还支持文章内锚点，请 <code>Ctrl </code> 点击此处 :arrow_right: [第二节](#基本的不带快捷键 Markdown 书写演示)；</p>
<p><code>Ctrl T</code>：表格，支持拖拽移动、网页端表格复制转换：</p>
<table>
<thead>
<tr>
<th align="center">标题</th>
<th align="center">数据一</th>
<th align="center">数据二</th>
</tr>
</thead>
<tbody><tr>
<td align="center">表格测试</td>
<td align="center">943</td>
<td align="center">baka</td>
</tr>
</tbody></table>
<p><code>Ctrl Shift Q</code>：引用：</p>
<blockquote>
<p>我需要三件东西：爱情、友谊和图书。然而这三者之间何其相通！</p>
<p>炽热的爱情可以充实图书的内容，图书又是人们最忠实的朋友。</p>
<p> —— 蒙田</p>
</blockquote>
<p><code>Shift Ctrl I</code>：图片：</p>
<p><img src="https://static.pexels.com/photos/461797/pexels-photo-461797.jpeg" alt="风景"></p>
<p><code>Shift Ctrl M</code>：公示块，快捷输入 LeTex 公式：<br>$$<br>Euler’s identity: e^{i\pi}+1&#x3D;0<br>$$</p>
<h2 id="基本的不带快捷键-Markdown-书写演示"><a href="#基本的不带快捷键-Markdown-书写演示" class="headerlink" title="基本的不带快捷键 Markdown 书写演示"></a>基本的不带快捷键 Markdown 书写演示</h2><p><strong>部分功能需要现在配置文件中开启才能使用</strong></p>
<p>代码块（我居然不能转义那个字符，就 Tab 键上面那个）：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;List.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">		f.writelines(<span class="built_in">str</span>(i))  </span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&#x27;成功写入数列&#x27;</span>)</span><br><span class="line">os.system(<span class="string">&#x27;rm ./List.txt&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;成功删除文件&#x27;</span>)</span><br></pre></td></tr></table></figure>



<p>无序、有序、任务列表：</p>
<ul>
<li>酒石酸菌</li>
<li>玄墨之蝶</li>
</ul>
<ol>
<li>HTML</li>
<li>Python 3</li>
</ol>
<ul>
<li><input checked="" disabled="" type="checkbox"> 1.12.2 教程计划</li>
<li><input checked="" disabled="" type="checkbox"> Weblate 翻译计划</li>
<li><input disabled="" type="checkbox"> All The Mods 3 实况计划</li>
</ul>
<p>参考链接：</p>
<p>​	通过培养试验研究了有机酸对铅、镉的毒害影响，结果表明柠檬酸对铅[^1]，酒石酸对镉有较明显解毒作用[^2]。用逐步提取法研究萝卜根叶内重金属存在的化学形态 ，有机酸处理并不影响各形态铅的优势顺序 ，但各形态铅的浓度或相对百分率发生了变化。</p>
<p>[^1]: 陈苏. 污染土壤中镉、铅的活化及植物有效性研究[D]. 中国科学院沈阳应用生态研究所, 2007.<br>[^2]: 陈英旭, 林琦, 陆芳,等. 有机酸对铅、镉植株危害的解毒作用研究[J]. 环境科学学报, 2000, 20(4):467-472.</p>
<p>上标下标：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">上标：X^2^</span><br><span class="line">下标：H~2~O</span><br></pre></td></tr></table></figure>
<p>X^2^, H<del>2</del>O</p>
<p>高亮：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">本节课重点：==第六、七章不考==，第三章出题较多，==平时分占 30%==</span><br></pre></td></tr></table></figure>
<p>本节课重点：&#x3D;&#x3D;第六、七章不考&#x3D;&#x3D;，第三章出题较多，&#x3D;&#x3D;平时分占 30%&#x3D;&#x3D;</p>
<p>注释：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--这一段不要显示出来--&gt;</span><br></pre></td></tr></table></figure>
<!--这一段不要显示出来-->



<p>内联公式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$e^&#123;i\pi&#125;+1=0$</span><br></pre></td></tr></table></figure>

<p>$e^{i\pi}+1&#x3D;0$</p>
<p>分割线：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br></pre></td></tr></table></figure>

<p>我绝不会弃坑的！</p>
<hr>
<p>:arrow_up: 上面的都是假话</p>
<p>emoji 图标：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">:arrow_heading_down: :arrow_heading_up:</span><br><span class="line">:ab: :blue_heart: :jack_o_lantern:</span><br><span class="line">:ballot_box_with_check: :fork_and_knife:</span><br></pre></td></tr></table></figure>

<p>:arrow_heading_down: :arrow_heading_up:<br>:ab: :blue_heart: :jack_o_lantern:<br>:ballot_box_with_check: :fork_and_knife:</p>
<p>目录生成：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[toc]</span><br></pre></td></tr></table></figure>

<p>[TOC]</p>
<h1 id="Markdown-拓展功能"><a href="#Markdown-拓展功能" class="headerlink" title="Markdown 拓展功能"></a>Markdown 拓展功能</h1><p>HTML 原生支持，目前只支持 img 标签，用以自定义图片大小和缩放：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;img src=&quot;https://static.pexels.com/photos/461797/pexels-photo-461797.jpeg width=&quot;550px&quot; alt=&quot;test&quot;&gt;&lt;/img&gt;</span><br></pre></td></tr></table></figure>

<p><img src="https://static.pexels.com/photos/461797/pexels-photo-461797.jpeg" alt="test" width="550px"></img></p>
<p>LaTex 公式支持，包括 mhchem，AMSmath，BBox：</p>
<p>mhchem：<br>$$<br>\ce{SO4^2- + Ba^2+ -&gt; BaSO4 v}<br>$$<br>BBox：<br>$$<br>\bbox[5px,border:2px solid red]{AB^2 +AC^2 &#x3D; BC^2}<br>$$</p>
<p>流程图支持，内置了 Flowchart，Sequence，Mermaid 引擎，支持多种多样的流程图、时序图、甘特图：</p>
<ul>
<li>流程图（Flowchart）</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">st=&gt;start: Start:&gt;http://www.google.com[blank]</span><br><span class="line">e=&gt;end:&gt;http://www.google.com</span><br><span class="line">op1=&gt;operation: My Operation</span><br><span class="line">sub1=&gt;subroutine: My Subroutine</span><br><span class="line">cond=&gt;condition: Yes</span><br><span class="line">or No?:&gt;http://www.google.com</span><br><span class="line">io=&gt;inputoutput: catch something...</span><br><span class="line"></span><br><span class="line">st-&gt;op1-&gt;cond</span><br><span class="line">cond(yes)-&gt;io-&gt;e</span><br><span class="line">cond(no)-&gt;sub1(right)-&gt;op1</span><br></pre></td></tr></table></figure>



<ul>
<li>流程图（Mermaid）</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph TD;</span><br><span class="line">    开始--&gt;条件B;</span><br><span class="line">    条件A--&gt;条件C;</span><br><span class="line">    条件B--&gt;条件D;</span><br><span class="line">    条件C--&gt;条件D;</span><br><span class="line">    条件A--&gt;条件D;</span><br><span class="line">    开始--&gt;条件C;</span><br><span class="line">    开始--&gt;条件A;</span><br><span class="line">    条件D--&gt;结束;</span><br></pre></td></tr></table></figure>

<ul>
<li>时序图（Mermaid）</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">    participant Alice</span><br><span class="line">    participant Bob</span><br><span class="line">    Alice-&gt;&gt;John: Hello John, how are you?</span><br><span class="line">    loop Healthcheck</span><br><span class="line">        John-&gt;&gt;John: Fight against hypochondria</span><br><span class="line">    end</span><br><span class="line">    Note right of John: Rational thoughts &lt;br/&gt;prevail...</span><br><span class="line">    John--&gt;&gt;Alice: Great!</span><br><span class="line">    John-&gt;&gt;Bob: How about you?</span><br><span class="line">    Bob--&gt;&gt;John: Jolly good!</span><br></pre></td></tr></table></figure>

<ul>
<li>时序图（Sequence）</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Alice-&gt;&gt;John: Hello John, how are you?</span><br><span class="line">Note right of John: Rational thoughts</span><br><span class="line">John--&gt;&gt;Alice: Great!</span><br><span class="line">John-&gt;&gt;Bob: How about you?</span><br><span class="line">Bob--&gt;&gt;John: Jolly good!</span><br></pre></td></tr></table></figure>

<ul>
<li>甘特图（Mermaid）</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gantt</span><br><span class="line">        dateFormat  YYYY-MM-DD</span><br><span class="line">        title Adding GANTT diagram functionality to mermaid</span><br><span class="line">        section A section</span><br><span class="line">        Completed task            :done,    des1, 2014-01-06,2014-01-08</span><br><span class="line">        Active task               :active,  des2, 2014-01-09, 3d</span><br><span class="line">        Future task               :         des3, after des2, 5d</span><br><span class="line">        Future task2               :         des4, after des3, 5d</span><br><span class="line">        section Critical tasks</span><br><span class="line">        Completed task in the critical line :crit, done, 2014-01-06,24h</span><br><span class="line">        Implement parser and jison          :crit, done, after des1, 2d</span><br><span class="line">        Create tests for parser             :crit, active, 3d</span><br><span class="line">        Future task in critical line        :crit, 5d</span><br><span class="line">        Create tests for renderer           :2d</span><br><span class="line">        Add to mermaid                      :1d</span><br></pre></td></tr></table></figure>

<hr>
<ul>
<li>其他 Mermaid 图（目前还有点问题，不建议使用）</li>
<li>Class diagram</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">classDiagram</span><br><span class="line">Class01 &lt;|-- AveryLongClass : Cool</span><br><span class="line">Class03 *-- Class04</span><br><span class="line">Class05 o-- Class06</span><br><span class="line">Class07 .. Class08</span><br><span class="line">Class09 --&gt; C2 : Where am i?</span><br><span class="line">Class09 --* C3</span><br><span class="line">Class09 --|&gt; Class07</span><br><span class="line">Class07 : equals()</span><br><span class="line">Class07 : Object[] elementData</span><br><span class="line">Class01 : size()</span><br><span class="line">Class01 : int chimp</span><br><span class="line">Class01 : int gorilla</span><br><span class="line">Class08 &lt;--&gt; C2: Cool label</span><br></pre></td></tr></table></figure>

<ul>
<li>Git</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gitGraph:</span><br><span class="line">options</span><br><span class="line">&#123;</span><br><span class="line">    &quot;nodeSpacing&quot;: 100,</span><br><span class="line">    &quot;nodeRadius&quot;: 10</span><br><span class="line">&#125;</span><br><span class="line">end</span><br><span class="line">commit</span><br><span class="line">branch newbranch</span><br><span class="line">checkout newbranch</span><br><span class="line">commit</span><br><span class="line">commit</span><br><span class="line">checkout master</span><br><span class="line">commit</span><br><span class="line">commit</span><br><span class="line">merge newbranch</span><br></pre></td></tr></table></figure>

<h2 id="主题替换"><a href="#主题替换" class="headerlink" title="主题替换"></a>主题替换</h2><p>访问：<a href="http://theme.typora.io/">http://theme.typora.io/</a></p>
<h2 id="文章导出"><a href="#文章导出" class="headerlink" title="文章导出"></a>文章导出</h2><ul>
<li>图片（非常适合手机阅读）</li>
<li>PDF</li>
<li>HTML（可选择是否带样式表）</li>
<li>其他需要第三方库支持</li>
</ul>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>markdown语法</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis课堂笔记</title>
    <url>/2023/06/09/%E8%AE%A1%E7%AE%97%E6%9C%BA/%E7%8B%82%E7%A5%9E%E8%AF%B4/Mybatis%E8%AF%BE%E5%A0%82%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Mybatis-9-28"><a href="#Mybatis-9-28" class="headerlink" title="Mybatis-9.28"></a>Mybatis-9.28</h2><p>环境：</p>
<ul>
<li>JDK1.8</li>
<li>Mysql 5.7</li>
<li>maven 3.6.1</li>
<li>IDEA</li>
</ul>
<p>回顾：</p>
<ul>
<li>JDBC</li>
<li>Mysql</li>
<li>Java基础</li>
<li>Maven</li>
<li>Junit</li>
</ul>
<p>SSM框架：配置文件的。  最好的方式：看官网文档；</p>
<span id="more"></span>

<h2 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h2><h3 id="1-1、什么是Mybatis"><a href="#1-1、什么是Mybatis" class="headerlink" title="1.1、什么是Mybatis"></a>1.1、什么是Mybatis</h3><p><img src="/Mybatis%E8%AF%BE%E5%A0%82%E7%AC%94%E8%AE%B0.assets/1569633932712.png" alt="1569633932712"></p>
<ul>
<li>MyBatis 是一款优秀的<strong>持久层框架</strong></li>
<li>它支持定制化 SQL、存储过程以及高级映射。</li>
<li>MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。</li>
<li>MyBatis 可以使用简单的 XML 或注解来配置和映射原生类型、接口和 Java 的 POJO（Plain Old Java Objects，普通老式 Java 对象）为数据库中的记录。</li>
<li>MyBatis 本是<a href="https://baike.baidu.com/item/apache/6265">apache</a>的一个开源项目<a href="https://baike.baidu.com/item/iBatis">iBatis</a>, 2010年这个项目由apache software foundation 迁移到了google code，并且改名为MyBatis 。</li>
<li>2013年11月迁移到Github。</li>
</ul>
<p>如何获得Mybatis？</p>
<ul>
<li><p>maven仓库：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Github ： <a href="https://github.com/mybatis/mybatis-3/releases">https://github.com/mybatis/mybatis-3/releases</a></p>
</li>
<li><p>中文文档：<a href="https://mybatis.org/mybatis-3/zh/index.html">https://mybatis.org/mybatis-3/zh/index.html</a></p>
</li>
</ul>
<h3 id="1-2、持久化"><a href="#1-2、持久化" class="headerlink" title="1.2、持久化"></a>1.2、持久化</h3><p>数据持久化</p>
<ul>
<li>持久化就是将程序的数据在持久状态和瞬时状态转化的过程</li>
<li>内存：<strong>断电即失</strong></li>
<li>数据库(Jdbc)，io文件持久化。</li>
<li>生活：冷藏. 罐头。</li>
</ul>
<p><strong>为什么需要需要持久化？</strong></p>
<ul>
<li><p>有一些对象，不能让他丢掉。</p>
</li>
<li><p>内存太贵了</p>
</li>
</ul>
<h3 id="1-3、持久层"><a href="#1-3、持久层" class="headerlink" title="1.3、持久层"></a>1.3、持久层</h3><p>Dao层，Service层，Controller层….</p>
<ul>
<li>完成持久化工作的代码块</li>
<li>层界限十分明显。</li>
</ul>
<h3 id="1-4-为什么需要Mybatis？"><a href="#1-4-为什么需要Mybatis？" class="headerlink" title="1.4 为什么需要Mybatis？"></a>1.4 为什么需要Mybatis？</h3><ul>
<li>帮助程序猿将数据存入到数据库中。</li>
<li>方便</li>
<li>传统的JDBC代码太复杂了。简化。框架。自动化。</li>
<li>不用Mybatis也可以。更容易上手。 <strong>技术没有高低之分</strong></li>
<li>优点：<ul>
<li>简单易学</li>
<li>灵活</li>
<li>sql和代码的分离，提高了可维护性。</li>
<li>提供映射标签，支持对象与数据库的orm字段关系映射</li>
<li>提供对象关系映射标签，支持对象关系组建维护</li>
<li>提供xml标签，支持编写动态sql。</li>
</ul>
</li>
</ul>
<p><strong>最重要的一点：使用的人多！</strong></p>
<p>Spring   SpringMVC    SpringBoot</p>
<h2 id="2、第一个Mybatis程序"><a href="#2、第一个Mybatis程序" class="headerlink" title="2、第一个Mybatis程序"></a>2、第一个Mybatis程序</h2><p>思路：搭建环境–&gt;导入Mybatis–&gt;编写代码–&gt;测试！</p>
<h3 id="2-1、搭建环境"><a href="#2-1、搭建环境" class="headerlink" title="2.1、搭建环境"></a>2.1、搭建环境</h3><p>搭建数据库</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">CREATE DATABASE `mybatis`;</span><br><span class="line"></span><br><span class="line">USE `mybatis`;</span><br><span class="line"></span><br><span class="line">CREATE TABLE `user`(</span><br><span class="line">  `id` INT(<span class="number">20</span>) NOT NULL PRIMARY KEY,</span><br><span class="line">  `name` VARCHAR(<span class="number">30</span>) DEFAULT NULL,</span><br><span class="line">  `pwd` VARCHAR(<span class="number">30</span>) DEFAULT NULL</span><br><span class="line">)ENGINE=INNODB DEFAULT CHARSET=utf8;</span><br><span class="line"></span><br><span class="line">INSERT INTO `user`(`id`,`name`,`pwd`) VALUES </span><br><span class="line">(<span class="number">1</span>,<span class="string">&#x27;狂神&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>),</span><br><span class="line">(<span class="number">2</span>,<span class="string">&#x27;张三&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>),</span><br><span class="line">(<span class="number">3</span>,<span class="string">&#x27;李四&#x27;</span>,<span class="string">&#x27;123890&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>新建项目</p>
<ol>
<li><p>新建一个普通的maven项目</p>
</li>
<li><p>删除src目录</p>
</li>
<li><p>导入maven依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">   </span><br><span class="line"><span class="comment">&lt;!--导入依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--mysql驱动--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--mybatis--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--junit--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="2-2、创建一个模块"><a href="#2-2、创建一个模块" class="headerlink" title="2.2、创建一个模块"></a>2.2、创建一个模块</h3><ul>
<li><p>编写mybatis的核心配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--configuration核心配置文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis?useSSL=true<span class="symbol">&amp;amp;</span>useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=UTF-8&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>编写mybatis工具类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//sqlSessionFactory --&gt; sqlSession</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisUtils</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SqlSessionFactory sqlSessionFactory;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//使用Mybatis第一步：获取sqlSessionFactory对象</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">            sqlSessionFactory = <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//既然有了 SqlSessionFactory，顾名思义，我们就可以从中获得 SqlSession 的实例了。</span></span><br><span class="line">    <span class="comment">// SqlSession 完全包含了面向数据库执行 SQL 命令所需的所有方法。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SqlSession  <span class="title function_">getSqlSession</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sqlSessionFactory.openSession();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="2-3、编写代码"><a href="#2-3、编写代码" class="headerlink" title="2.3、编写代码"></a>2.3、编写代码</h3><ul>
<li><p>实体类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuang.pojo;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实体类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String pwd;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(<span class="type">int</span> id, String name, String pwd)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.pwd = pwd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPwd</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> pwd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPwd</span><span class="params">(String pwd)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.pwd = pwd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, pwd=&#x27;&quot;</span> + pwd + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>Dao接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">    List&lt;User&gt; <span class="title function_">getUserList</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>接口实现类由原来的UserDaoImpl转变为一个 Mapper配置文件.</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line">        <span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">                <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">                <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--namespace=绑定一个对应的Dao/Mapper接口--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.kuang.dao.UserDao&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--select查询语句--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.kuang.pojo.User&quot;</span>&gt;</span></span><br><span class="line">       select * from mybatis.user</span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="2-4、测试"><a href="#2-4、测试" class="headerlink" title="2.4、测试"></a>2.4、测试</h3><p>注意点：</p>
<p>org.apache.ibatis.binding.BindingException: Type interface com.kuang.dao.UserDao is not known to the MapperRegistry.</p>
<p><strong>MapperRegistry是什么？</strong></p>
<p>核心配置文件中注册 mappers</p>
<ul>
<li><p>junit测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//第一步：获得SqlSession对象</span></span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> MybatisUtils.getSqlSession();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//方式一：getMapper</span></span><br><span class="line">    <span class="type">UserDao</span> <span class="variable">userDao</span> <span class="operator">=</span> sqlSession.getMapper(UserDao.class);</span><br><span class="line">    List&lt;User&gt; userList = userDao.getUserList();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (User user : userList) &#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//关闭SqlSession</span></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<p>你们可以能会遇到的问题：</p>
<ol>
<li>配置文件没有注册</li>
<li>绑定接口错误。</li>
<li>方法名不对</li>
<li>返回类型不对</li>
<li>Maven导出资源问题</li>
</ol>
<h2 id="3、CRUD"><a href="#3、CRUD" class="headerlink" title="3、CRUD"></a>3、CRUD</h2><h3 id="1、namespace"><a href="#1、namespace" class="headerlink" title="1、namespace"></a>1、namespace</h3><p>namespace中的包名要和 Dao&#x2F;mapper 接口的包名一致！</p>
<h3 id="2、select"><a href="#2、select" class="headerlink" title="2、select"></a>2、select</h3><p>选择，查询语句;</p>
<ul>
<li>id : 就是对应的namespace中的方法名；</li>
<li>resultType：Sql语句执行的返回值！</li>
<li>parameterType ： 参数类型！</li>
</ul>
<ol>
<li><p>编写接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//根据ID查询用户</span></span><br><span class="line">User <span class="title function_">getUserById</span><span class="params">(<span class="type">int</span> id)</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>编写对应的mapper中的sql语句</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;select id=<span class="string">&quot;getUserById&quot;</span> parameterType=<span class="string">&quot;int&quot;</span> resultType=<span class="string">&quot;com.kuang.pojo.User&quot;</span>&gt;</span><br><span class="line">        select * from mybatis.user <span class="type">where</span> <span class="variable">id</span> <span class="operator">=</span> #&#123;id&#125;</span><br><span class="line">&lt;/select&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getUserById</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> MybatisUtils.getSqlSession();</span><br><span class="line">   </span><br><span class="line">    <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line">   </span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> mapper.getUserById(<span class="number">1</span>);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">   </span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br><span class="line">   </span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="3、Insert"><a href="#3、Insert" class="headerlink" title="3、Insert"></a>3、Insert</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--对象中的属性，可以直接取出来--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.kuang.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    insert into mybatis.user (id, name, pwd) values (#&#123;id&#125;,#&#123;name&#125;,#&#123;pwd&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="4、update"><a href="#4、update" class="headerlink" title="4、update"></a>4、update</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.kuang.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    update mybatis.user set name=#&#123;name&#125;,pwd=#&#123;pwd&#125;  where id = #&#123;id&#125; ;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="5、Delete"><a href="#5、Delete" class="headerlink" title="5、Delete"></a>5、Delete</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">    delete from mybatis.user where id = #&#123;id&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>注意点：</p>
<ul>
<li>增删改需要提交事务！</li>
</ul>
<h3 id="6、分析错误"><a href="#6、分析错误" class="headerlink" title="6、分析错误"></a>6、分析错误</h3><ul>
<li>标签不要匹配错</li>
<li>resource 绑定mapper，需要使用路径！</li>
<li>程序配置文件必须符合规范！</li>
<li>NullPointerException，没有注册到资源!</li>
<li>输出的xml文件中存在中文乱码问题！</li>
<li>maven资源没有导出问题！</li>
</ul>
<h3 id="7、万能Map"><a href="#7、万能Map" class="headerlink" title="7、万能Map"></a>7、万能Map</h3><p>假设，我们的实体类，或者数据库中的表，字段或者参数过多，我们应当考虑使用Map！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//万能的Map</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">addUser2</span><span class="params">(Map&lt;String,Object&gt; map)</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">&lt;!--对象中的属性，可以直接取出来    传递map的key--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">    insert into mybatis.user (id, pwd) values (#&#123;userid&#125;,#&#123;passWord&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void addUser2()&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line"></span><br><span class="line">    UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    Map&lt;String, Object&gt; map = new HashMap&lt;String, Object&gt;();</span><br><span class="line"></span><br><span class="line">    map.put(&quot;userid&quot;,5);</span><br><span class="line">    map.put(&quot;passWord&quot;,&quot;2222333&quot;);</span><br><span class="line"></span><br><span class="line">    mapper.addUser2(map);</span><br><span class="line"></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>Map传递参数，直接在sql中取出key即可！    【parameterType&#x3D;”map”】</p>
<p>对象传递参数，直接在sql中取对象的属性即可！【parameterType&#x3D;”Object”】</p>
<p>只有一个基本类型参数的情况下，可以直接在sql中取到！</p>
<p>多个参数用Map，<strong>或者注解！</strong></p>
<h3 id="8、思考题"><a href="#8、思考题" class="headerlink" title="8、思考题"></a>8、思考题</h3><p>模糊查询怎么写？</p>
<ol>
<li><p>Java代码执行的时候，传递通配符 % %</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;User&gt; userList = mapper.getUserLike(<span class="string">&quot;%李%&quot;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>在sql拼接中使用通配符！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">select * from mybatis.user where name like <span class="string">&quot;%&quot;</span>#&#123;value&#125;<span class="string">&quot;%&quot;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="4、配置解析"><a href="#4、配置解析" class="headerlink" title="4、配置解析"></a>4、配置解析</h2><h3 id="1、核心配置文件"><a href="#1、核心配置文件" class="headerlink" title="1、核心配置文件"></a>1、核心配置文件</h3><ul>
<li><p>mybatis-config.xml</p>
</li>
<li><p>MyBatis 的配置文件包含了会深深影响 MyBatis 行为的设置和属性信息。 </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">configuration（配置）</span><br><span class="line">properties（属性）</span><br><span class="line">settings（设置）</span><br><span class="line">typeAliases（类型别名）</span><br><span class="line">typeHandlers（类型处理器）</span><br><span class="line">objectFactory（对象工厂）</span><br><span class="line">plugins（插件）</span><br><span class="line">environments（环境配置）</span><br><span class="line">environment（环境变量）</span><br><span class="line">transactionManager（事务管理器）</span><br><span class="line">dataSource（数据源）</span><br><span class="line">databaseIdProvider（数据库厂商标识）</span><br><span class="line">mappers（映射器）</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="2、环境配置（environments）"><a href="#2、环境配置（environments）" class="headerlink" title="2、环境配置（environments）"></a>2、环境配置（environments）</h3><p>MyBatis 可以配置成适应多种环境</p>
<p><strong>不过要记住：尽管可以配置多个环境，但每个 SqlSessionFactory 实例只能选择一种环境。</strong></p>
<p>学会使用配置多套运行环境！</p>
<p>Mybatis默认的事务管理器就是 JDBC  ， 连接池 ： POOLED</p>
<h3 id="3、属性（properties）"><a href="#3、属性（properties）" class="headerlink" title="3、属性（properties）"></a>3、属性（properties）</h3><p>我们可以通过properties属性来实现引用配置文件</p>
<p>这些属性都是可外部配置且可动态替换的，既可以在典型的 Java 属性文件中配置，亦可通过 properties 元素的子元素来传递。【db.properties】</p>
<p><img src="/Mybatis%E8%AF%BE%E5%A0%82%E7%AC%94%E8%AE%B0.assets/1569656528134.png" alt="1569656528134"></p>
<p>编写一个配置文件</p>
<p>db.properties</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/mybatis?useSSL=true&amp;useUnicode=true&amp;characterEncoding=UTF-8</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">123456</span></span><br></pre></td></tr></table></figure>

<p>在核心配置文件中映入</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--引入外部配置文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;db.properties&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;pwd&quot;</span> <span class="attr">value</span>=<span class="string">&quot;11111&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>可以直接引入外部文件</li>
<li>可以在其中增加一些属性配置</li>
<li>如果两个文件有同一个字段，优先使用外部配置文件的！</li>
</ul>
<h3 id="4、类型别名（typeAliases）"><a href="#4、类型别名（typeAliases）" class="headerlink" title="4、类型别名（typeAliases）"></a>4、类型别名（typeAliases）</h3><ul>
<li>类型别名是为 Java 类型设置一个短的名字。‘</li>
<li>存在的意义仅在于用来减少类完全限定名的冗余。</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--可以给实体类起别名--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">&quot;com.kuang.pojo.User&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;User&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>也可以指定一个包名，MyBatis 会在包名下面搜索需要的 Java Bean，比如：</p>
<p>扫描实体类的包，它的默认别名就为这个类的 类名，首字母小写！</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--可以给实体类起别名--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.kuang.pojo&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>在实体类比较少的时候，使用第一种方式。</p>
<p>如果实体类十分多，建议使用第二种。</p>
<p>第一种可以DIY别名，第二种则·不行·，如果非要改，需要在实体上增加注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Alias(&quot;user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5、设置"><a href="#5、设置" class="headerlink" title="5、设置"></a>5、设置</h3><p>这是 MyBatis 中极为重要的调整设置，它们会改变 MyBatis 的运行时行为。 </p>
<p><img src="/Mybatis%E8%AF%BE%E5%A0%82%E7%AC%94%E8%AE%B0.assets/1569657659080.png" alt="1569657659080"></p>
<p><img src="/Mybatis%E8%AF%BE%E5%A0%82%E7%AC%94%E8%AE%B0.assets/1569657672791.png" alt="1569657672791"></p>
<h3 id="6、其他配置"><a href="#6、其他配置" class="headerlink" title="6、其他配置"></a>6、其他配置</h3><ul>
<li><a href="https://mybatis.org/mybatis-3/zh/configuration.html#typeHandlers">typeHandlers（类型处理器）</a></li>
<li><a href="https://mybatis.org/mybatis-3/zh/configuration.html#objectFactory">objectFactory（对象工厂）</a></li>
<li>plugins插件<ul>
<li>mybatis-generator-core</li>
<li>mybatis-plus</li>
<li>通用mapper</li>
</ul>
</li>
</ul>
<h3 id="7、映射器（mappers）"><a href="#7、映射器（mappers）" class="headerlink" title="7、映射器（mappers）"></a>7、映射器（mappers）</h3><p>MapperRegistry：注册绑定我们的Mapper文件；</p>
<p>方式一： 【推荐使用】</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--每一个Mapper.XML都需要在Mybatis核心配置文件中注册！--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/kuang/dao/UserMapper.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>方式二：使用class文件绑定注册</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--每一个Mapper.XML都需要在Mybatis核心配置文件中注册！--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;com.kuang.dao.UserMapper&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注意点：</p>
<ul>
<li>接口和他的Mapper配置文件必须同名！</li>
<li>接口和他的Mapper配置文件必须在同一个包下！</li>
</ul>
<p>方式三：使用扫描包进行注入绑定</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--每一个Mapper.XML都需要在Mybatis核心配置文件中注册！--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.kuang.dao&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注意点：</p>
<ul>
<li>接口和他的Mapper配置文件必须同名！</li>
<li>接口和他的Mapper配置文件必须在同一个包下！</li>
</ul>
<p>练习时间：</p>
<ul>
<li>将数据库配置文件外部引入</li>
<li>实体类别名</li>
<li>保证UserMapper 接口 和 UserMapper .xml 改为一致！并且放在同一个包下！</li>
</ul>
<h3 id="8、生命周期和作用域"><a href="#8、生命周期和作用域" class="headerlink" title="8、生命周期和作用域"></a>8、生命周期和作用域</h3><p><img src="/Mybatis%E8%AF%BE%E5%A0%82%E7%AC%94%E8%AE%B0.assets/1569660357745.png" alt="1569660357745"></p>
<p>生命周期，和作用域，是至关重要的，因为错误的使用会导致非常严重的<strong>并发问题</strong>。</p>
<p><strong>SqlSessionFactoryBuilder：</strong></p>
<ul>
<li>一旦创建了 SqlSessionFactory，就不再需要它了</li>
<li>局部变量</li>
</ul>
<p><strong>SqlSessionFactory：</strong></p>
<ul>
<li>说白了就是可以想象为 ：数据库连接池</li>
<li>SqlSessionFactory 一旦被创建就应该在应用的运行期间一直存在，<strong>没有任何理由丢弃它或重新创建另一个实例。</strong> </li>
<li>因此 SqlSessionFactory 的最佳作用域是应用作用域。 </li>
<li>最简单的就是使用<strong>单例模式</strong>或者静态单例模式。</li>
</ul>
<p><strong>SqlSession</strong></p>
<ul>
<li>连接到连接池的一个请求！</li>
<li>SqlSession 的实例不是线程安全的，因此是不能被共享的，所以它的最佳的作用域是请求或方法作用域。</li>
<li>用完之后需要赶紧关闭，否则资源被占用！</li>
</ul>
<p><img src="/Mybatis%E8%AF%BE%E5%A0%82%E7%AC%94%E8%AE%B0.assets/1569660737088.png" alt="1569660737088"></p>
<p>这里面的每一个Mapper，就代表一个具体的业务！</p>
<h2 id="5、解决属性名和字段名不一致的问题"><a href="#5、解决属性名和字段名不一致的问题" class="headerlink" title="5、解决属性名和字段名不一致的问题"></a>5、解决属性名和字段名不一致的问题</h2><h3 id="1、-问题"><a href="#1、-问题" class="headerlink" title="1、 问题"></a>1、 问题</h3><p>数据库中的字段</p>
<p><img src="/Mybatis%E8%AF%BE%E5%A0%82%E7%AC%94%E8%AE%B0.assets/1569660831076.png" alt="1569660831076"></p>
<p>新建一个项目，拷贝之前的，测试实体类字段不一致的情况</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试出现问题</p>
<p><img src="/Mybatis%E8%AF%BE%E5%A0%82%E7%AC%94%E8%AE%B0.assets/1569661145806.png" alt="1569661145806"></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">//    select * from mybatis.user where id = #&#123;id&#125;</span><br><span class="line">//类型处理器</span><br><span class="line">//    select id,name,pwd from mybatis.user where id = #&#123;id&#125;</span><br></pre></td></tr></table></figure>



<p>解决方法：</p>
<ul>
<li><p>起别名</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.kuang.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    select id,name,pwd as password from mybatis.user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="2、resultMap"><a href="#2、resultMap" class="headerlink" title="2、resultMap"></a>2、resultMap</h3><p>结果集映射</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">id   name   pwd</span><br><span class="line">id   name   password</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--结果集映射--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;UserMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--column数据库中的字段，property实体类中的属性--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;pwd&quot;</span> <span class="attr">property</span>=<span class="string">&quot;password&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserById&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;UserMap&quot;</span>&gt;</span></span><br><span class="line">    select * from mybatis.user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>



<ul>
<li><code>resultMap</code> 元素是 MyBatis 中最重要最强大的元素</li>
<li>ResultMap 的设计思想是，对于简单的语句根本不需要配置显式的结果映射，而对于复杂一点的语句只需要描述它们的关系就行了。</li>
<li><code>ResultMap</code> 最优秀的地方在于，虽然你已经对它相当了解了，但是根本就不需要显式地用到他们。</li>
<li>如果世界总是这么简单就好了。</li>
</ul>
<h2 id="6、日志"><a href="#6、日志" class="headerlink" title="6、日志"></a>6、日志</h2><h3 id="6-1、日志工厂"><a href="#6-1、日志工厂" class="headerlink" title="6.1、日志工厂"></a>6.1、日志工厂</h3><p>如果一个数据库操作，出现了异常，我们需要排错。日志就是最好的助手！</p>
<p>曾经：sout 、debug</p>
<p>现在：日志工厂！</p>
<p><img src="/Mybatis%E8%AF%BE%E5%A0%82%E7%AC%94%E8%AE%B0.assets/1569892155104.png" alt="1569892155104"></p>
<ul>
<li><p>SLF4J </p>
</li>
<li><p>LOG4J  【掌握】</p>
</li>
<li><p>LOG4J2</p>
</li>
<li><p>JDK_LOGGING</p>
</li>
<li><p>COMMONS_LOGGING</p>
</li>
<li><p>STDOUT_LOGGING   【掌握】</p>
</li>
<li><p>NO_LOGGING</p>
</li>
</ul>
<p>在Mybatis中具体使用那个一日志实现，在设置中设定！</p>
<p><strong>STDOUT_LOGGING标准日志输出</strong></p>
<p>在mybatis核心配置文件中，配置我们的日志！</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;STDOUT_LOGGING&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/Mybatis%E8%AF%BE%E5%A0%82%E7%AC%94%E8%AE%B0.assets/1569892595060.png" alt="1569892595060"></p>
<h3 id="6-2、Log4j"><a href="#6-2、Log4j" class="headerlink" title="6.2、Log4j"></a>6.2、Log4j</h3><p>什么是Log4j？</p>
<ul>
<li>Log4j是<a href="https://baike.baidu.com/item/Apache/8512995">Apache</a>的一个开源项目，通过使用Log4j，我们可以控制日志信息输送的目的地是<a href="https://baike.baidu.com/item/%E6%8E%A7%E5%88%B6%E5%8F%B0/2438626">控制台</a>、文件、<a href="https://baike.baidu.com/item/GUI">GUI</a>组件</li>
<li>我们也可以控制每一条日志的输出格式；</li>
<li>通过定义每一条日志信息的级别，我们能够更加细致地控制日志的生成过程。</li>
<li>通过一个<a href="https://baike.baidu.com/item/%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/286550">配置文件</a>来灵活地进行配置，而不需要修改应用的代码。</li>
</ul>
<ol>
<li><p>先导入log4j的包</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/log4j/log4j --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>log4j.properties</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#将等级为DEBUG的日志信息输出到console和file这两个目的地，console和file的定义在下面的代码</span></span><br><span class="line"><span class="attr">log4j.rootLogger</span>=<span class="string">DEBUG,console,file</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#控制台输出的相关设置</span></span><br><span class="line"><span class="attr">log4j.appender.console</span> = <span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="attr">log4j.appender.console.Target</span> = <span class="string">System.out</span></span><br><span class="line"><span class="attr">log4j.appender.console.Threshold</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="attr">log4j.appender.console.layout</span> = <span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="attr">log4j.appender.console.layout.ConversionPattern</span>=<span class="string">[%c]-%m%n</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#文件输出的相关设置</span></span><br><span class="line"><span class="attr">log4j.appender.file</span> = <span class="string">org.apache.log4j.RollingFileAppender</span></span><br><span class="line"><span class="attr">log4j.appender.file.File</span>=<span class="string">./log/kuang.log</span></span><br><span class="line"><span class="attr">log4j.appender.file.MaxFileSize</span>=<span class="string">10mb</span></span><br><span class="line"><span class="attr">log4j.appender.file.Threshold</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="attr">log4j.appender.file.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="attr">log4j.appender.file.layout.ConversionPattern</span>=<span class="string">[%p][%d&#123;yy-MM-dd&#125;][%c]%m%n</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#日志输出级别</span></span><br><span class="line"><span class="attr">log4j.logger.org.mybatis</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="attr">log4j.logger.java.sql</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="attr">log4j.logger.java.sql.Statement</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="attr">log4j.logger.java.sql.ResultSet</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="attr">log4j.logger.java.sql.PreparedStatement</span>=<span class="string">DEBUG</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>配置log4j为日志的实现</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Log4j的使用！，直接测试运行刚才的查询</p>
<p><img src="/Mybatis%E8%AF%BE%E5%A0%82%E7%AC%94%E8%AE%B0.assets/1569893505842.png" alt="1569893505842"></p>
</li>
</ol>
<p><strong>简单使用</strong></p>
<ol>
<li><p>在要使用Log4j 的类中，导入包  import org.apache.log4j.Logger;</p>
</li>
<li><p>日志对象，参数为当前类的class</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> Logger.getLogger(UserDaoTest.class);</span><br></pre></td></tr></table></figure>
</li>
<li><p>日志级别</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">logger.info(<span class="string">&quot;info:进入了testLog4j&quot;</span>);</span><br><span class="line">logger.debug(<span class="string">&quot;debug:进入了testLog4j&quot;</span>);</span><br><span class="line">logger.error(<span class="string">&quot;error:进入了testLog4j&quot;</span>);</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="7、分页"><a href="#7、分页" class="headerlink" title="7、分页"></a>7、分页</h2><p><strong>思考：为什么要分页？</strong></p>
<ul>
<li>减少数据的处理量</li>
</ul>
<h3 id="7-1、使用Limit分页"><a href="#7-1、使用Limit分页" class="headerlink" title="7.1、使用Limit分页"></a>7.1、使用Limit分页</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">语法：<span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> limit startIndex,pageSize;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> limit <span class="number">3</span>;  #[<span class="number">0</span>,n]</span><br></pre></td></tr></table></figure>



<p>使用Mybatis实现分页，核心SQL</p>
<ol>
<li><p>接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//分页</span></span><br><span class="line">List&lt;User&gt; <span class="title function_">getUserByLimit</span><span class="params">(Map&lt;String,Integer&gt; map)</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Mapper.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--//分页--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserByLimit&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;UserMap&quot;</span>&gt;</span></span><br><span class="line">    select * from  mybatis.user limit #&#123;startIndex&#125;,#&#123;pageSize&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getUserByLimit</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> MybatisUtils.getSqlSession();</span><br><span class="line"><span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line">HashMap&lt;String, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, Integer&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;startIndex&quot;</span>,<span class="number">1</span>);</span><br><span class="line">    map.put(<span class="string">&quot;pageSize&quot;</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    List&lt;User&gt; userList =  mapper.getUserByLimit(map);</span><br><span class="line">    <span class="keyword">for</span> (User user : userList) &#123;</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="7-2、RowBounds分页"><a href="#7-2、RowBounds分页" class="headerlink" title="7.2、RowBounds分页"></a>7.2、RowBounds分页</h3><p>不再使用SQL实现分页</p>
<ol>
<li><p>接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//分页2</span></span><br><span class="line">List&lt;User&gt; <span class="title function_">getUserByRowBounds</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>mapper.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--分页2--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserByRowBounds&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;UserMap&quot;</span>&gt;</span></span><br><span class="line">    select * from  mybatis.user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getUserByRowBounds</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> MybatisUtils.getSqlSession();</span><br><span class="line"></span><br><span class="line"><span class="comment">//RowBounds实现</span></span><br><span class="line"><span class="type">RowBounds</span> <span class="variable">rowBounds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RowBounds</span>(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过Java代码层面实现分页</span></span><br><span class="line">List&lt;User&gt; userList = sqlSession.selectList(<span class="string">&quot;com.kuang.dao.UserMapper.getUserByRowBounds&quot;</span>,<span class="literal">null</span>,rowBounds);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (User user : userList) &#123;</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sqlSession.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="7-3、分页插件"><a href="#7-3、分页插件" class="headerlink" title="7.3、分页插件"></a>7.3、分页插件</h3><p><img src="/Mybatis%E8%AF%BE%E5%A0%82%E7%AC%94%E8%AE%B0.assets/1569896603103.png" alt="1569896603103"></p>
<p>了解即可，万一 以后公司的架构师，说要使用，你需要知道它是什么东西！</p>
<h2 id="8、使用注解开发"><a href="#8、使用注解开发" class="headerlink" title="8、使用注解开发"></a>8、使用注解开发</h2><h3 id="8-1、面向接口编程"><a href="#8-1、面向接口编程" class="headerlink" title="8.1、面向接口编程"></a>8.1、面向接口编程</h3><p>- 大家之前都学过面向对象编程，也学习过接口，但在真正的开发中，很多时候我们会选择面向接口编程<br>- <strong>根本原因 :  &#x3D;&#x3D;解耦&#x3D;&#x3D; , 可拓展 , 提高复用 , 分层开发中 , 上层不用管具体的实现 , 大家都遵守共同的标准 , 使得开发变得容易 , 规范性更好</strong><br>- 在一个面向对象的系统中，系统的各种功能是由许许多多的不同对象协作完成的。在这种情况下，各个对象内部是如何实现自己的,对系统设计人员来讲就不那么重要了；<br>- 而各个对象之间的协作关系则成为系统设计的关键。小到不同类之间的通信，大到各模块之间的交互，在系统设计之初都是要着重考虑的，这也是系统设计的主要工作内容。面向接口编程就是指按照这种思想来编程。</p>
<p><strong>关于接口的理解</strong></p>
<p>- 接口从更深层次的理解，应是定义（规范，约束）与实现（名实分离的原则）的分离。<br>- 接口的本身反映了系统设计人员对系统的抽象理解。<br>- 接口应有两类：<br>  - 第一类是对一个个体的抽象，它可对应为一个抽象体(abstract class)；<br>  - 第二类是对一个个体某一方面的抽象，即形成一个抽象面（interface）；<br>- 一个体有可能有多个抽象面。抽象体与抽象面是有区别的。</p>
<p><strong>三个面向区别</strong></p>
<p>- 面向对象是指，我们考虑问题时，以对象为单位，考虑它的属性及方法 .<br>- 面向过程是指，我们考虑问题时，以一个具体的流程（事务过程）为单位，考虑它的实现 .<br>- 接口设计与非接口设计是针对复用技术而言的，与面向对象（过程）不是一个问题.更多的体现就是对系统整体的架构</p>
<h3 id="8-2、使用注解开发"><a href="#8-2、使用注解开发" class="headerlink" title="8.2、使用注解开发"></a>8.2、使用注解开发</h3><ol>
<li><p>注解在接口上实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Select(&quot;select * from user&quot;)</span></span><br><span class="line">List&lt;User&gt; <span class="title function_">getUsers</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>需要再核心配置文件中绑定接口！</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--绑定接口--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;com.kuang.dao.UserMapper&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>测试</p>
</li>
</ol>
<p>本质：反射机制实现</p>
<p>底层：动态代理！</p>
<p> <img src="/Mybatis%E8%AF%BE%E5%A0%82%E7%AC%94%E8%AE%B0.assets/1569898830704.png" alt="1569898830704"></p>
<p><strong>Mybatis详细的执行流程！</strong></p>
<p><img src="/Mybatis%E8%AF%BE%E5%A0%82%E7%AC%94%E8%AE%B0.assets/Temp.png" alt="1569898830704"></p>
<h3 id="8-3、CRUD"><a href="#8-3、CRUD" class="headerlink" title="8.3、CRUD"></a>8.3、CRUD</h3><p>我们可以在工具类创建的时候实现自动提交事务！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> SqlSession  <span class="title function_">getSqlSession</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sqlSessionFactory.openSession(<span class="literal">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>编写接口，增加注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;select * from user&quot;)</span></span><br><span class="line">    List&lt;User&gt; <span class="title function_">getUsers</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 方法存在多个参数，所有的参数前面必须加上 @Param(&quot;id&quot;)注解</span></span><br><span class="line">    <span class="meta">@Select(&quot;select * from user where id = #&#123;id&#125;&quot;)</span></span><br><span class="line">    User <span class="title function_">getUserByID</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> <span class="type">int</span> id)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Insert(&quot;insert into user(id,name,pwd) values (#&#123;id&#125;,#&#123;name&#125;,#&#123;password&#125;)&quot;)</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">addUser</span><span class="params">(User user)</span>;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Update(&quot;update user set name=#&#123;name&#125;,pwd=#&#123;password&#125; where id = #&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">updateUser</span><span class="params">(User user)</span>;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Delete(&quot;delete from user where id = #&#123;uid&#125;&quot;)</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">deleteUser</span><span class="params">(<span class="meta">@Param(&quot;uid&quot;)</span> <span class="type">int</span> id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>测试类</p>
<p>【注意：我们必须要讲接口注册绑定到我们的核心配置文件中！】</p>
<p><strong>关于@Param() 注解</strong></p>
<ul>
<li>基本类型的参数或者String类型，需要加上</li>
<li>引用类型不需要加</li>
<li>如果只有一个基本类型的话，可以忽略，但是建议大家都加上！</li>
<li>我们在SQL中引用的就是我们这里的 @Param() 中设定的属性名！</li>
</ul>
<p><strong>#{}     ${} 区别</strong></p>
<h2 id="9、Lombok"><a href="#9、Lombok" class="headerlink" title="9、Lombok"></a>9、Lombok</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Project Lombok is a java library that automatically plugs into your editor and build tools, spicing up your java.</span><br><span class="line">Never write another getter or equals method again, with one annotation your <span class="keyword">class</span> <span class="title class_">has</span> a fully featured builder, Automate your logging variables, and much more.</span><br></pre></td></tr></table></figure>

<ul>
<li>java library</li>
<li>plugs</li>
<li>build tools</li>
<li>with one annotation your class</li>
</ul>
<p>使用步骤：</p>
<ol>
<li><p>在IDEA中安装Lombok插件！</p>
</li>
<li><p>在项目中导入lombok的jar包</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在实体类上加注解即可！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br></pre></td></tr></table></figure></li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Getter</span> and <span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@FieldNameConstants</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span>, <span class="meta">@RequiredArgsConstructor</span> and <span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Log</span>, <span class="meta">@Log4j</span>, <span class="meta">@Log4j2</span>, <span class="meta">@Slf4j</span>, <span class="meta">@XSlf4j</span>, <span class="meta">@CommonsLog</span>, <span class="meta">@JBossLog</span>, <span class="meta">@Flogger</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="meta">@Singular</span></span><br><span class="line"><span class="meta">@Delegate</span></span><br><span class="line"><span class="meta">@Value</span></span><br><span class="line"><span class="meta">@Accessors</span></span><br><span class="line"><span class="meta">@Wither</span></span><br><span class="line"><span class="meta">@SneakyThrows</span></span><br></pre></td></tr></table></figure>

<p>说明：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Data：无参构造，get、set、tostring、hashcode，equals</span><br><span class="line">@AllArgsConstructor</span><br><span class="line">@NoArgsConstructor</span><br><span class="line">@EqualsAndHashCode</span><br><span class="line">@ToString</span><br><span class="line">@Getter</span><br></pre></td></tr></table></figure>



<h2 id="10、多对一处理"><a href="#10、多对一处理" class="headerlink" title="10、多对一处理"></a>10、多对一处理</h2><p>多对一：</p>
<p><img src="/Mybatis%E8%AF%BE%E5%A0%82%E7%AC%94%E8%AE%B0.assets/1569909163944.png" alt="1569909163944"></p>
<ul>
<li>多个学生，对应一个老师</li>
<li>对于学生这边而言，  <strong>关联</strong> ..  多个学生，关联一个老师  【多对一】</li>
<li>对于老师而言， <strong>集合</strong> ， 一个老师，有很多学生 【一对多】</li>
</ul>
<p><img src="/Mybatis%E8%AF%BE%E5%A0%82%E7%AC%94%E8%AE%B0.assets/1569909422471.png" alt="1569909422471"></p>
<p>SQL：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `teacher` (</span><br><span class="line">  `id` <span class="type">INT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `name` <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> teacher(`id`, `name`) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;秦老师&#x27;</span>); </span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `student` (</span><br><span class="line">  `id` <span class="type">INT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `name` <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `tid` <span class="type">INT</span>(<span class="number">10</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  KEY `fktid` (`tid`),</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> `fktid` <span class="keyword">FOREIGN</span> KEY (`tid`) <span class="keyword">REFERENCES</span> `teacher` (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `student` (`id`, `name`, `tid`) <span class="keyword">VALUES</span> (<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;小明&#x27;</span>, <span class="string">&#x27;1&#x27;</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `student` (`id`, `name`, `tid`) <span class="keyword">VALUES</span> (<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;小红&#x27;</span>, <span class="string">&#x27;1&#x27;</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `student` (`id`, `name`, `tid`) <span class="keyword">VALUES</span> (<span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;小张&#x27;</span>, <span class="string">&#x27;1&#x27;</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `student` (`id`, `name`, `tid`) <span class="keyword">VALUES</span> (<span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;小李&#x27;</span>, <span class="string">&#x27;1&#x27;</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `student` (`id`, `name`, `tid`) <span class="keyword">VALUES</span> (<span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;小王&#x27;</span>, <span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="测试环境搭建"><a href="#测试环境搭建" class="headerlink" title="测试环境搭建"></a>测试环境搭建</h3><ol>
<li>导入lombok</li>
<li>新建实体类 Teacher，Student</li>
<li>建立Mapper接口</li>
<li>建立Mapper.XML文件</li>
<li>在核心配置文件中绑定注册我们的Mapper接口或者文件！【方式很多，随心选】</li>
<li>测试查询是否能够成功！</li>
</ol>
<h3 id="按照查询嵌套处理"><a href="#按照查询嵌套处理" class="headerlink" title="按照查询嵌套处理"></a>按照查询嵌套处理</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    思路:</span></span><br><span class="line"><span class="comment">        1. 查询所有的学生信息</span></span><br><span class="line"><span class="comment">        2. 根据查询出来的学生的tid，寻找对应的老师！  子查询</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getStudent&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;StudentTeacher&quot;</span>&gt;</span></span><br><span class="line">    select * from student</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;StudentTeacher&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--复杂的属性，我们需要单独处理 对象： association 集合： collection --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;teacher&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;Teacher&quot;</span> <span class="attr">select</span>=<span class="string">&quot;getTeacher&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getTeacher&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Teacher&quot;</span>&gt;</span></span><br><span class="line">    select * from teacher where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="按照结果嵌套处理"><a href="#按照结果嵌套处理" class="headerlink" title="按照结果嵌套处理"></a>按照结果嵌套处理</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--按照结果嵌套处理--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getStudent2&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;StudentTeacher2&quot;</span>&gt;</span></span><br><span class="line">    select s.id sid,s.name sname,t.name tname</span><br><span class="line">    from student s,teacher t</span><br><span class="line">    where s.tid = t.id;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;StudentTeacher2&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sid&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sname&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;teacher&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;Teacher&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tname&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>回顾Mysql 多对一查询方式：</p>
<ul>
<li>子查询</li>
<li>联表查询</li>
</ul>
<h2 id="11、一对多处理"><a href="#11、一对多处理" class="headerlink" title="11、一对多处理"></a>11、一对多处理</h2><p>比如：一个老师拥有多个学生！</p>
<p>对于老师而言，就是一对多的关系!</p>
<h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><ol>
<li>环境搭建，和刚才一样</li>
</ol>
<p><strong>实体类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> tid;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Teacher</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//一个老师拥有多个学生</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Student&gt; students;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="按照结果嵌套处理-1"><a href="#按照结果嵌套处理-1" class="headerlink" title="按照结果嵌套处理"></a>按照结果嵌套处理</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">&lt;!--按结果嵌套查询--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getTeacher&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;TeacherStudent&quot;</span>&gt;</span></span><br><span class="line">    select s.id sid, s.name sname, t.name tname,t.id tid</span><br><span class="line">    from student s,teacher t</span><br><span class="line">    where s.tid = t.id and t.id = #&#123;tid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;TeacherStudent&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Teacher&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tname&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--复杂的属性，我们需要单独处理 对象： association 集合： collection</span></span><br><span class="line"><span class="comment">    javaType=&quot;&quot; 指定属性的类型！</span></span><br><span class="line"><span class="comment">    集合中的泛型信息，我们使用ofType获取</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;students&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sid&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sname&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;tid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="按照查询嵌套处理-1"><a href="#按照查询嵌套处理-1" class="headerlink" title="按照查询嵌套处理"></a>按照查询嵌套处理</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getTeacher2&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;TeacherStudent2&quot;</span>&gt;</span></span><br><span class="line">    select * from mybatis.teacher where id = #&#123;tid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;TeacherStudent2&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Teacher&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;students&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;ArrayList&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;Student&quot;</span> <span class="attr">select</span>=<span class="string">&quot;getStudentByTeacherId&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getStudentByTeacherId&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">    select * from mybatis.student where tid = #&#123;tid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ol>
<li>关联 - association   【多对一】</li>
<li>集合 - collection   【一对多】</li>
<li>javaType    &amp;   ofType<ol>
<li>JavaType  用来指定实体类中属性的类型</li>
<li>ofType  用来指定映射到List或者集合中的 pojo类型，泛型中的约束类型！</li>
</ol>
</li>
</ol>
<p>注意点：</p>
<ul>
<li>保证SQL的可读性，尽量保证通俗易懂</li>
<li>注意一对多和多对一中，属性名和字段的问题！</li>
<li>如果问题不好排查错误，可以使用日志 ， 建议使用 Log4j</li>
</ul>
<p><strong>慢SQL       1s        1000s</strong>      </p>
<p>面试高频</p>
<ul>
<li>Mysql引擎</li>
<li>InnoDB底层原理</li>
<li>索引</li>
<li>索引优化！</li>
</ul>
<h2 id="12、动态-SQL"><a href="#12、动态-SQL" class="headerlink" title="12、动态 SQL"></a>12、动态 SQL</h2><p>&#x3D;&#x3D;<strong>什么是动态SQL：动态SQL就是指根据不同的条件生成不同的SQL语句</strong>&#x3D;&#x3D;</p>
<p>利用动态 SQL 这一特性可以彻底摆脱这种痛苦。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">动态 SQL 元素和 JSTL 或基于类似 XML 的文本处理器相似。在 MyBatis 之前的版本中，有很多元素需要花时间了解。MyBatis 3 大大精简了元素种类，现在只需学习原来一半的元素便可。MyBatis 采用功能强大的基于 OGNL 的表达式来淘汰其它大部分元素。</span><br><span class="line"></span><br><span class="line">if</span><br><span class="line">choose (when, otherwise)</span><br><span class="line">trim (where, set)</span><br><span class="line">foreach</span><br></pre></td></tr></table></figure>



<h3 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `blog` (</span><br><span class="line">  `id` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;博客id&#x27;</span>,</span><br><span class="line">  `title` <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;博客标题&#x27;</span>,</span><br><span class="line">  `author` <span class="type">varchar</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;博客作者&#x27;</span>,</span><br><span class="line">  `create_time` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `views` <span class="type">int</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;浏览量&#x27;</span></span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>创建一个基础工程</p>
<ol>
<li><p>导包</p>
</li>
<li><p>编写配置文件</p>
</li>
<li><p>编写实体类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Blog</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> views;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>编写实体类对应Mapper接口 和 Mapper.XML文件</p>
</li>
</ol>
<h3 id="IF"><a href="#IF" class="headerlink" title="IF"></a>IF</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryBlogIF&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;blog&quot;</span>&gt;</span></span><br><span class="line">    select * from mybatis.blog where 1=1</span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;title != null&quot;</span>&gt;</span></span><br><span class="line">        and title = #&#123;title&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;author != null&quot;</span>&gt;</span></span><br><span class="line">        and author = #&#123;author&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="choose-when-otherwise"><a href="#choose-when-otherwise" class="headerlink" title="choose (when, otherwise)"></a>choose (when, otherwise)</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryBlogChoose&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;blog&quot;</span>&gt;</span></span><br><span class="line">    select * from mybatis.blog</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;title != null&quot;</span>&gt;</span></span><br><span class="line">                title = #&#123;title&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;author != null&quot;</span>&gt;</span></span><br><span class="line">                and author = #&#123;author&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line">                and views = #&#123;views&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="trim-where-set"><a href="#trim-where-set" class="headerlink" title="trim (where,set)"></a>trim (where,set)</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">select * from mybatis.blog</span><br><span class="line"><span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;title != null&quot;</span>&gt;</span></span><br><span class="line">        title = #&#123;title&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;author != null&quot;</span>&gt;</span></span><br><span class="line">        and author = #&#123;author&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateBlog&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">    update mybatis.blog</span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;title != null&quot;</span>&gt;</span></span><br><span class="line">            title = #&#123;title&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;author != null&quot;</span>&gt;</span></span><br><span class="line">            author = #&#123;author&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>&#x3D;&#x3D;<strong>所谓的动态SQL，本质还是SQL语句 ， 只是我们可以在SQL层面，去执行一个逻辑代码</strong>&#x3D;&#x3D;</p>
<p>if</p>
<p>where ， set  ， choose ，when</p>
<h3 id="SQL片段"><a href="#SQL片段" class="headerlink" title="SQL片段"></a>SQL片段</h3><p>有的时候，我们可能会将一些功能的部分抽取出来，方便复用！</p>
<ol>
<li><p>使用SQL标签抽取公共的部分</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;if-title-author&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;title != null&quot;</span>&gt;</span></span><br><span class="line">        title = #&#123;title&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;author != null&quot;</span>&gt;</span></span><br><span class="line">        and author = #&#123;author&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在需要使用的地方使用Include标签引用即可</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryBlogIF&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;blog&quot;</span>&gt;</span></span><br><span class="line">    select * from mybatis.blog</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;if-title-author&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<p>注意事项：</p>
<ul>
<li>最好基于单表来定义SQL片段！</li>
<li>不要存在where标签</li>
</ul>
<h3 id="Foreach"><a href="#Foreach" class="headerlink" title="Foreach"></a>Foreach</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="number">1</span><span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> </span><br><span class="line"></span><br><span class="line">  <span class="operator">&lt;</span>foreach item<span class="operator">=</span>&quot;id&quot; collection<span class="operator">=</span>&quot;ids&quot;</span><br><span class="line">      <span class="keyword">open</span><span class="operator">=</span>&quot;(&quot; separator<span class="operator">=</span>&quot;or&quot; <span class="keyword">close</span><span class="operator">=</span>&quot;)&quot;<span class="operator">&gt;</span></span><br><span class="line">        #&#123;id&#125;</span><br><span class="line">  <span class="operator">&lt;</span><span class="operator">/</span>foreach<span class="operator">&gt;</span></span><br><span class="line"></span><br><span class="line">(id<span class="operator">=</span><span class="number">1</span> <span class="keyword">or</span> id<span class="operator">=</span><span class="number">2</span> <span class="keyword">or</span> id<span class="operator">=</span><span class="number">3</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/Mybatis%E8%AF%BE%E5%A0%82%E7%AC%94%E8%AE%B0.assets/1569979229205.png" alt="1569979229205"></p>
<p><img src="/Mybatis%E8%AF%BE%E5%A0%82%E7%AC%94%E8%AE%B0.assets/1569979339190.png" alt="1569979339190"></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        select * from mybatis.blog where 1=1 and (id=1 or id = 2 or id=3)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        我们现在传递一个万能的map ， 这map中可以存在一个集合！</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryBlogForeach&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;blog&quot;</span>&gt;</span></span><br><span class="line">    select * from mybatis.blog</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;ids&quot;</span> <span class="attr">item</span>=<span class="string">&quot;id&quot;</span> <span class="attr">open</span>=<span class="string">&quot;and (&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;or&quot;</span>&gt;</span></span><br><span class="line">            id = #&#123;id&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>&#x3D;&#x3D;动态SQL就是在拼接SQL语句，我们只要保证SQL的正确性，按照SQL的格式，去排列组合就可以了&#x3D;&#x3D;</p>
<p>建议：</p>
<ul>
<li>现在Mysql中写出完整的SQL,再对应的去修改成为我们的动态SQL实现通用即可！</li>
</ul>
<h2 id="13、缓存-（了解）"><a href="#13、缓存-（了解）" class="headerlink" title="13、缓存 （了解）"></a>13、缓存 （了解）</h2><h3 id="13-1、简介"><a href="#13-1、简介" class="headerlink" title="13.1、简介"></a>13.1、简介</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">查询  ：  连接数据库 ，耗资源！</span><br><span class="line">	一次查询的结果，给他暂存在一个可以直接取到的地方！--&gt; 内存 ： 缓存</span><br><span class="line">	</span><br><span class="line">我们再次查询相同数据的时候，直接走缓存，就不用走数据库了</span><br></pre></td></tr></table></figure>



<ol>
<li><p>什么是缓存 [ Cache ]？</p>
<ul>
<li>存在内存中的临时数据。</li>
<li>将用户经常查询的数据放在缓存（内存）中，用户去查询数据就不用从磁盘上(关系型数据库数据文件)查询，从缓存中查询，从而提高查询效率，解决了高并发系统的性能问题。</li>
</ul>
</li>
<li><p>为什么使用缓存？</p>
<ul>
<li>减少和数据库的交互次数，减少系统开销，提高系统效率。</li>
</ul>
</li>
<li><p>什么样的数据能使用缓存？</p>
<ul>
<li>经常查询并且不经常改变的数据。【可以使用缓存】</li>
</ul>
</li>
</ol>
<h3 id="13-2、Mybatis缓存"><a href="#13-2、Mybatis缓存" class="headerlink" title="13.2、Mybatis缓存"></a>13.2、Mybatis缓存</h3><ul>
<li>MyBatis包含一个非常强大的查询缓存特性，它可以非常方便地定制和配置缓存。缓存可以极大的提升查询效率。</li>
<li>MyBatis系统中默认定义了两级缓存：<strong>一级缓存</strong>和<strong>二级缓存</strong><ul>
<li><p>默认情况下，只有一级缓存开启。（SqlSession级别的缓存，也称为本地缓存）</p>
</li>
<li><p>二级缓存需要手动开启和配置，他是基于namespace级别的缓存。</p>
</li>
<li><p>为了提高扩展性，MyBatis定义了缓存接口Cache。我们可以通过实现Cache接口来自定义二级缓存</p>
</li>
</ul>
</li>
</ul>
<h3 id="13-3、一级缓存"><a href="#13-3、一级缓存" class="headerlink" title="13.3、一级缓存"></a>13.3、一级缓存</h3><ul>
<li>一级缓存也叫本地缓存：  SqlSession<ul>
<li>与数据库同一次会话期间查询到的数据会放在本地缓存中。</li>
<li>以后如果需要获取相同的数据，直接从缓存中拿，没必须再去查询数据库；</li>
</ul>
</li>
</ul>
<p>测试步骤：</p>
<ol>
<li>开启日志！</li>
<li>测试在一个Sesion中查询两次相同记录</li>
<li>查看日志输出</li>
</ol>
<p><img src="/Mybatis%E8%AF%BE%E5%A0%82%E7%AC%94%E8%AE%B0.assets/1569983650437.png" alt="1569983650437"></p>
<p>缓存失效的情况：</p>
<ol>
<li><p>查询不同的东西</p>
</li>
<li><p>增删改操作，可能会改变原来的数据，所以必定会刷新缓存！</p>
<p><img src="/Mybatis%E8%AF%BE%E5%A0%82%E7%AC%94%E8%AE%B0.assets/1569983952321.png" alt="1569983952321"></p>
</li>
<li><p>查询不同的Mapper.xml</p>
</li>
<li><p>手动清理缓存！</p>
<p><img src="/Mybatis%E8%AF%BE%E5%A0%82%E7%AC%94%E8%AE%B0.assets/1569984008824.png" alt="1569984008824"></p>
</li>
</ol>
<p>小结：一级缓存默认是开启的，只在一次SqlSession中有效，也就是拿到连接到关闭连接这个区间段！</p>
<p>一级缓存就是一个Map。</p>
<h3 id="13-4、二级缓存"><a href="#13-4、二级缓存" class="headerlink" title="13.4、二级缓存"></a>13.4、二级缓存</h3><ul>
<li>二级缓存也叫全局缓存，一级缓存作用域太低了，所以诞生了二级缓存</li>
<li>基于namespace级别的缓存，一个名称空间，对应一个二级缓存；</li>
<li>工作机制<ul>
<li>一个会话查询一条数据，这个数据就会被放在当前会话的一级缓存中；</li>
<li>如果当前会话关闭了，这个会话对应的一级缓存就没了；但是我们想要的是，会话关闭了，一级缓存中的数据被保存到二级缓存中；</li>
<li>新的会话查询信息，就可以从二级缓存中获取内容；</li>
<li>不同的mapper查出的数据会放在自己对应的缓存（map）中；</li>
</ul>
</li>
</ul>
<p>步骤：</p>
<ol>
<li><p>开启全局缓存</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--显示的开启全局缓存--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;cacheEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在要使用二级缓存的Mapper中开启</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--在当前Mapper.xml中使用二级缓存--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">cache</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>也可以自定义参数</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--在当前Mapper.xml中使用二级缓存--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">cache</span>  <span class="attr">eviction</span>=<span class="string">&quot;FIFO&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">flushInterval</span>=<span class="string">&quot;60000&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">size</span>=<span class="string">&quot;512&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">readOnly</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>测试</p>
<ol>
<li><p>问题:我们需要将实体类序列化！否则就会报错！</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Caused by: java.io.NotSerializableException: com.kuang.pojo.User</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
<p>小结：</p>
<ul>
<li>只要开启了二级缓存，在同一个Mapper下就有效</li>
<li>所有的数据都会先放在一级缓存中；</li>
<li>只有当会话提交，或者关闭的时候，才会提交到二级缓冲中！</li>
</ul>
<h3 id="13-5、缓存原理"><a href="#13-5、缓存原理" class="headerlink" title="13.5、缓存原理"></a>13.5、缓存原理</h3><p><img src="/Mybatis%E8%AF%BE%E5%A0%82%E7%AC%94%E8%AE%B0.assets/1569985541106.png" alt="1569985541106"></p>
<h3 id="13-6、自定义缓存-ehcache"><a href="#13-6、自定义缓存-ehcache" class="headerlink" title="13.6、自定义缓存-ehcache"></a>13.6、自定义缓存-ehcache</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">Ehcache是一种广泛使用的开源Java分布式缓存。主要面向通用缓存</span><br></pre></td></tr></table></figure>

<p>要在程序中使用ehcache，先要导包！</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis.caches/mybatis-ehcache --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.caches<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-ehcache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在mapper中指定使用我们的ehcache缓存实现！</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--在当前Mapper.xml中使用二级缓存--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">cache</span> <span class="attr">type</span>=<span class="string">&quot;org.mybatis.caches.ehcache.EhcacheCache&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>ehcache.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ehcache</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:noNamespaceSchemaLocation</span>=<span class="string">&quot;http://ehcache.org/ehcache.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">updateCheck</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">       diskStore：为缓存路径，ehcache分为内存和磁盘两级，此属性定义磁盘的缓存位置。参数解释如下：</span></span><br><span class="line"><span class="comment">       user.home – 用户主目录</span></span><br><span class="line"><span class="comment">       user.dir  – 用户当前工作目录</span></span><br><span class="line"><span class="comment">       java.io.tmpdir – 默认临时文件路径</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">diskStore</span> <span class="attr">path</span>=<span class="string">&quot;./tmpdir/Tmp_EhCache&quot;</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">defaultCache</span></span></span><br><span class="line"><span class="tag">            <span class="attr">eternal</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">maxElementsInMemory</span>=<span class="string">&quot;10000&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">overflowToDisk</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">diskPersistent</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">timeToIdleSeconds</span>=<span class="string">&quot;1800&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">timeToLiveSeconds</span>=<span class="string">&quot;259200&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">memoryStoreEvictionPolicy</span>=<span class="string">&quot;LRU&quot;</span>/&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="tag">&lt;<span class="name">cache</span></span></span><br><span class="line"><span class="tag">            <span class="attr">name</span>=<span class="string">&quot;cloud_user&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">eternal</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">maxElementsInMemory</span>=<span class="string">&quot;5000&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">overflowToDisk</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">diskPersistent</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">timeToIdleSeconds</span>=<span class="string">&quot;1800&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">timeToLiveSeconds</span>=<span class="string">&quot;1800&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">memoryStoreEvictionPolicy</span>=<span class="string">&quot;LRU&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">       defaultCache：默认缓存策略，当ehcache找不到定义的缓存时，则使用这个缓存策略。只能定义一个。</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">      name:缓存名称。</span></span><br><span class="line"><span class="comment">      maxElementsInMemory:缓存最大数目</span></span><br><span class="line"><span class="comment">      maxElementsOnDisk：硬盘最大缓存个数。</span></span><br><span class="line"><span class="comment">      eternal:对象是否永久有效，一但设置了，timeout将不起作用。</span></span><br><span class="line"><span class="comment">      overflowToDisk:是否保存到磁盘，当系统当机时</span></span><br><span class="line"><span class="comment">      timeToIdleSeconds:设置对象在失效前的允许闲置时间（单位：秒）。仅当eternal=false对象不是永久有效时使用，可选属性，默认值是0，也就是可闲置时间无穷大。</span></span><br><span class="line"><span class="comment">      timeToLiveSeconds:设置对象在失效前允许存活时间（单位：秒）。最大时间介于创建时间和失效时间之间。仅当eternal=false对象不是永久有效时使用，默认是0.，也就是对象存活时间无穷大。</span></span><br><span class="line"><span class="comment">      diskPersistent：是否缓存虚拟机重启期数据 Whether the disk store persists between restarts of the Virtual Machine. The default value is false.</span></span><br><span class="line"><span class="comment">      diskSpoolBufferSizeMB：这个参数设置DiskStore（磁盘缓存）的缓存区大小。默认是30MB。每个Cache都应该有自己的一个缓冲区。</span></span><br><span class="line"><span class="comment">      diskExpiryThreadIntervalSeconds：磁盘失效线程运行时间间隔，默认是120秒。</span></span><br><span class="line"><span class="comment">      memoryStoreEvictionPolicy：当达到maxElementsInMemory限制时，Ehcache将会根据指定的策略去清理内存。默认策略是LRU（最近最少使用）。你可以设置为FIFO（先进先出）或是LFU（较少使用）。</span></span><br><span class="line"><span class="comment">      clearOnFlush：内存数量最大时是否清除。</span></span><br><span class="line"><span class="comment">      memoryStoreEvictionPolicy:可选策略有：LRU（最近最少使用，默认策略）、FIFO（先进先出）、LFU（最少访问次数）。</span></span><br><span class="line"><span class="comment">      FIFO，first in first out，这个是大家最熟的，先进先出。</span></span><br><span class="line"><span class="comment">      LFU， Less Frequently Used，就是上面例子中使用的策略，直白一点就是讲一直以来最少被使用的。如上面所讲，缓存的元素有一个hit属性，hit值最小的将会被清出缓存。</span></span><br><span class="line"><span class="comment">      LRU，Least Recently Used，最近最少使用的，缓存的元素有一个时间戳，当缓存容量满了，而又需要腾出地方来缓存新的元素的时候，那么现有缓存元素中时间戳离当前时间最远的元素将被清出缓存。</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">ehcache</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>Redis数据库来做缓存！  K-V</p>
<h2 id="练习：29道练习题实战！"><a href="#练习：29道练习题实战！" class="headerlink" title="练习：29道练习题实战！"></a>练习：29道练习题实战！</h2>]]></content>
      <categories>
        <category>计算机</category>
        <category>狂神说</category>
        <category>Mybatis</category>
      </categories>
      <tags>
        <tag>MyBatis</tag>
        <tag>编程</tag>
      </tags>
  </entry>
  <entry>
    <title>javaweb</title>
    <url>/2023/06/09/%E8%AE%A1%E7%AE%97%E6%9C%BA/JavaWeb1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="第一章-servlet"><a href="#第一章-servlet" class="headerlink" title="第一章 servlet"></a>第一章 servlet</h1><h2 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h2><ul>
<li><p>什么是web</p>
<p>通过一种网络服务，可使用户通过浏览器提供的界面浏览服务器提供的信息</p>
</li>
<li><p>Servlet:是sun公司提供的用于web开发的java程序,我们把这些程序包叫组件，该组件实现了Servlet接口，这些组件叫Servlet</p>
</li>
<li><p>有什么用？</p>
<ul>
<li><p>读取客户端发送的数据</p>
</li>
<li><p>处理数据并生成结果</p>
</li>
<li><p>发送处理结果给浏览器</p>
<span id="more"></span></li>
</ul>
</li>
<li><p>开发环境</p>
<ul>
<li>jdk</li>
<li>服务器端的容器，也就是tomcat</li>
<li>idea或myeclipse</li>
</ul>
</li>
<li><p>tomcat  </p>
<ul>
<li><p>服务器端容器，是sun使用java开发的软件，交给apache管理并开源，大多数企业都用tomcat </p>
</li>
<li><p>目录结构</p>
<ul>
<li>bin:存放可执行文件或批处理文件，如shutdown.bat,startup.bat</li>
<li>lib:运行tomcat所依赖的jar包</li>
<li>conf: 存放tomcat的配置文件，如：server.xml</li>
<li>webapps:放自己写的项目</li>
<li>work:jsp对应的java类和class文件</li>
</ul>
</li>
<li><p>如何使用?</p>
<ul>
<li><p>解压</p>
</li>
<li><p>配置环境变量</p>
<ol>
<li>JAVA_HOME:jdk的安装目录</li>
<li>CATALINA_HOME:tomcat的安装目录（解压包）</li>
<li>path:tomcat的bin目录</li>
</ol>
</li>
<li><p>启动tomcat</p>
<p>1.linux</p>
<p>​	catalina.sh run</p>
<p>​	startup.sh run</p>
<p>2.windows</p>
<p>​	catalina.bat run</p>
<p>​	startup.bat run</p>
</li>
<li><p>关闭服务器</p>
<p>直接关掉或ctr+c</p>
</li>
<li><p>如何修改tomcat的默认端口号？</p>
<p>在conf目录中的server.xml中的&lt;Connector port&#x3D;”8080” protocol&#x3D;”HTTP&#x2F;1.1”中把8080改为80</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="2-hello-world-的web-app"><a href="#2-hello-world-的web-app" class="headerlink" title="2.hello world 的web app"></a>2.hello world 的web app</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.编写Hello.java</span><br><span class="line">package day1;</span><br><span class="line">import java.io.*;</span><br><span class="line">import javax.servlet.*;</span><br><span class="line">import javax.servlet.http.*;</span><br><span class="line">public class Hello extends HttpServlet&#123;</span><br><span class="line">	public void service(HttpServletRequest req,HttpServletResponse resp)throws ServletException,IOException&#123;</span><br><span class="line">	PrintWriter out = resp.getWriter();</span><br><span class="line">	out.println(&quot;&lt;h1&gt;hello world&lt;/h1&gt;&quot;);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">2.编译</span><br><span class="line">从tomcat的lib中拷贝servlet-api到当前目录中</span><br><span class="line">javac -d ./ -cp servlet-api.jar Hello.java</span><br><span class="line"></span><br><span class="line">3.新建子文件夹叫WEB-INF,并把day1文件夹拷贝到该目录中,并copy一个web.xml，其内容如下：</span><br><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;web-app version=&quot;3.0&quot; </span><br><span class="line">	xmlns=&quot;http://java.sun.com/xml/ns/javaee&quot; </span><br><span class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; </span><br><span class="line">	xsi:schemaLocation=&quot;http://java.sun.com/xml/ns/javaee </span><br><span class="line">	http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd&quot;&gt;</span><br><span class="line">&lt;servlet&gt;</span><br><span class="line">	&lt;servlet-name&gt;hello&lt;/servlet-name&gt;</span><br><span class="line">	&lt;servlet-class&gt;day1.Hello&lt;/servlet-class&gt;</span><br><span class="line">&lt;/servlet&gt;</span><br><span class="line">&lt;servlet-mapping&gt;</span><br><span class="line">	&lt;servlet-name&gt;hello&lt;/servlet-name&gt;</span><br><span class="line">	&lt;url-pattern&gt;/abc&lt;/url-pattern&gt;</span><br><span class="line">&lt;/servlet-mapping&gt;</span><br><span class="line">&lt;/web-app&gt;</span><br><span class="line"></span><br><span class="line">4.在tomcat的webapps目录下新建目录1,把web-info目录拷贝到1中，再建子目录classes,把day1放到classes中</span><br><span class="line"></span><br><span class="line">5.启动tomcat,在浏览器上输入localhost:8080/1/abc</span><br></pre></td></tr></table></figure>



<h2 id="3-在idea中使用tomcat"><a href="#3-在idea中使用tomcat" class="headerlink" title="3.在idea中使用tomcat"></a>3.在idea中使用tomcat</h2><h3 id="3-1-添加jar包"><a href="#3-1-添加jar包" class="headerlink" title="3.1 添加jar包"></a>3.1 添加jar包</h3><p>​	web-inf下建目录lib–&gt;拷贝需要的jar到该目录中–&gt;File–&gt;project settings–&gt;libraries–&gt;点+号–&gt;java–&gt;找到要添加的jar包–&gt;选择指定的模块–&gt;apply,ok</p>
<h3 id="3-2-配置tomcat"><a href="#3-2-配置tomcat" class="headerlink" title="3.2 配置tomcat"></a>3.2 配置tomcat</h3><p>​	File–&gt;structure settings–&gt;+号–&gt;tomcat server–&gt;local–&gt;给tomcat一个名字，指定tomcat位置，部署项目</p>
<h2 id="4-路径问题"><a href="#4-路径问题" class="headerlink" title="4.路径问题"></a>4.路径问题</h2><h3 id="4-1-url路径"><a href="#4-1-url路径" class="headerlink" title="4.1 url路径"></a>4.1 url路径</h3><ul>
<li><p>精确匹配：必须以&#x2F;开头，如&#x2F;abc,优先级最高</p>
</li>
<li><p>目录匹配：必须”&#x2F;“开头，”*”结尾，优先级次之，如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/*,/a/b/*</span><br></pre></td></tr></table></figure>
</li>
<li><p>后缀匹配，优先级比前两个都低</p>
<p>使用*.开头，如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*.do,*.action,*.xxx</span><br></pre></td></tr></table></figure>

<p>示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/day1/*.action---错误</span><br><span class="line">*a.action--错误</span><br><span class="line"></span><br><span class="line">A. /a/*</span><br><span class="line">B. /*</span><br><span class="line">C. /a</span><br><span class="line">D. *.html</span><br><span class="line"></span><br><span class="line">1.url为/a/b.html,匹配谁？A,因为A更精确</span><br><span class="line">2./a,答案是C</span><br><span class="line">3./b.html,答案B</span><br><span class="line">4./x/y/b.html,答案B</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="5-乱码"><a href="#5-乱码" class="headerlink" title="5.乱码"></a>5.乱码</h2><h3 id="5-1-输出字节流乱码"><a href="#5-1-输出字节流乱码" class="headerlink" title="5.1 输出字节流乱码"></a>5.1 输出字节流乱码</h3><p>原因:客户端和服务器默认是gbk,如果服务器以utf8格式，客户端默认gbk，则出现乱码，解决乱码如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">resp.setHeader(&quot;content-type&quot;, &quot;text/html;charset=utf8&quot;);</span><br><span class="line">out.write(&quot;天天学习&quot;.getBytes(&quot;utf8&quot;));</span><br></pre></td></tr></table></figure>

<h3 id="5-2输出字符流"><a href="#5-2输出字符流" class="headerlink" title="5.2输出字符流"></a>5.2输出字符流</h3><p>在输出数据时，有个服务器端的缓冲区，用于存放字符数据的字节数据，该缓冲区采用编码还是iso-8859-1</p>
<p>解决办法：resp.setContentType(“text&#x2F;html;charset&#x3D;utf8”);</p>
<h3 id="5-3-post请求"><a href="#5-3-post请求" class="headerlink" title="5.3 post请求"></a>5.3 post请求</h3><p>在服务器端用req.setCharacterEncoding(“utf8”);来解决</p>
<h3 id="5-4-get请求-jdk8中已解决"><a href="#5-4-get请求-jdk8中已解决" class="headerlink" title="5.4 get请求(jdk8中已解决)"></a>5.4 get请求(jdk8中已解决)</h3><p>因为服务器收到请求中的数据时，已经是自动把utf8的字节数组按照iso-8859-1格式转换成了字符串</p>
<p>所以要想获取正确的字符串，思路是把错误的字符串转换为utf8的字节数组，再把字节数组转为字符串</p>
<p> new String(s.getBytes(“iso-8859-1”),”utf8”);</p>
<p>还可以修改配置文件：</p>
<p>​	conf–&gt;server.xml–&gt;添加URIEncoding&#x3D;”UTF-8”</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Connector port=&quot;80&quot; protocol=&quot;HTTP/1.1&quot;</span><br><span class="line">              connectionTimeout=&quot;20000&quot;</span><br><span class="line">              redirectPort=&quot;8443&quot;</span><br><span class="line">	   URIEncoding=&quot;UTF-8&quot;/&gt;</span><br></pre></td></tr></table></figure>

<h2 id="6-servlet的生命周期"><a href="#6-servlet的生命周期" class="headerlink" title="6.servlet的生命周期"></a>6.servlet的生命周期</h2><ol>
<li><p>GenericServlet</p>
<p>抽象类，实现接口Servlet接口，实现了方法init(config),destory(),init()</p>
</li>
<li><p>Servlet执行过程</p>
<ul>
<li><p>客户端第一次访问时，tomcat创建Servlet对象,只创建一次，tomcat容器只有一个，该对象是单例</p>
</li>
<li><p>执行且只会执行一次该对象的init(config)–&gt;调用无参init</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">在servlet中添加下面内容，在servlet的代码中可获取下面内容</span><br><span class="line">&lt;init-param&gt;</span><br><span class="line">    &lt;param-name&gt;blackIp&lt;/param-name&gt;</span><br><span class="line">    &lt;param-value&gt;192.168.1.106&lt;/param-value&gt;</span><br><span class="line">&lt;/init-param&gt;</span><br><span class="line">如何获取？</span><br><span class="line">ServletConfig config =  this.getServletConfig();</span><br><span class="line">String ip = config.getInitParameter(&quot;blackIp&quot;);</span><br></pre></td></tr></table></figure>
</li>
<li><p><load-on-startup>0</load-on-startup>写在servlet中，则在启动服务器时，会自动产生servlet对象并初始化,数字越小，优先级越高</p>
</li>
<li><p>执行service()方法</p>
<p>service,doGet,doPost三者关系</p>
<p>如果没重写service,则对于post请求会调用doPost方法，如果是get请求，会调用doGet方法</p>
<p>如果重写了service,则不会主动调用这两个方法</p>
</li>
<li><p>destroy()方法</p>
<p>在实例被容器（tomcat）销毁时会调用</p>
</li>
</ul>
</li>
</ol>
<h2 id="7-转发与重定向"><a href="#7-转发与重定向" class="headerlink" title="7.转发与重定向"></a>7.转发与重定向</h2><ul>
<li>转发示例：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">req.getRequestDispatcher(&quot;/day1/demo3/Demo2&quot;).forward(req, resp);</span><br></pre></td></tr></table></figure>

<ul>
<li>重定向</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">resp.sendRedirect(&quot;/servlet/day1/demo3/Demo2&quot;);</span><br></pre></td></tr></table></figure>

<ul>
<li>重定向过程</li>
</ul>
<ol>
<li>浏览器地址栏输入地址，发起请求</li>
<li>服务器响应给浏览器内容为：302状态码和要重定向的地址</li>
<li>浏览器再次根据地址发起二次请求</li>
<li>服务器再次作出响应</li>
</ol>
<ul>
<li><p>转发过程</p>
<ol>
<li>浏览器地址栏输入地址并请求</li>
<li>服务器在应用内部发起第二次请求，并把响应的结果返回给浏览器</li>
</ol>
</li>
<li><p>转发与重定向区别：</p>
<ol>
<li><p>转发</p>
<p>地址栏不会发生变化</p>
<p>客户只请求一次</p>
<p>服务器内部的请求必须是应用内部的地址</p>
</li>
<li><p>重定向</p>
<p>地址栏会变化</p>
<p>客户两次请求</p>
<p>所请求的地址任意</p>
</li>
</ol>
</li>
</ul>
<h2 id="8-http协议"><a href="#8-http协议" class="headerlink" title="8.http协议"></a>8.http协议</h2><ul>
<li><p>1.0,1.1,1.2</p>
</li>
<li><p>概念：是由w3c制定的一种规定浏览器与服务器之间如何通信的一种数据格式,这种格式叫http协议</p>
</li>
<li><p>如何通信？</p>
<p>建立连接–&gt;客户端打包并发送数据–&gt;服务器处理请求，并打包响应发送到客户端，服务器关闭响应</p>
</li>
<li><p>数据格式</p>
<ol>
<li><p>request:服务器端用于获取客户端提交过来的数据</p>
<ul>
<li><p>请求行</p>
<p>req.getMethod():用于判断是post还是get请求</p>
<p>req.getSerletPath():url</p>
<p>req.getProtocol():获取浏览器所使用的协议版本</p>
</li>
<li><p>请求头</p>
<p>用于告诉服务器，关于客户所使用的浏览器的相关信息</p>
<p>Enumeration e &#x3D; req.getHeaderNames();&#x2F;&#x2F;全部key的枚举器</p>
</li>
<li><p>请求正文</p>
<p>req.getparameterName(xxx);</p>
</li>
</ul>
</li>
<li><p>响应数据response</p>
<ul>
<li><p>状态行：响应码及响应码所对应的描述</p>
<ul>
<li><p>200:正常响应</p>
</li>
<li><p>302：重定向</p>
</li>
<li><p>4xx:表示客户端发生错误</p>
<ul>
<li>400:请求本身有问题，如报文损坏</li>
<li>403:权限不足，服务器拒绝请求</li>
<li>404:资源不存在</li>
<li>405:禁用请求中指定的方法</li>
</ul>
</li>
<li><p>5xx:表示在服务器端发生错误</p>
<ul>
<li>500:服务器端发生异常</li>
<li>503:服务器端暂时不可用，比如负载过重</li>
<li>505:服务器不支持请求的http协议版本</li>
</ul>
</li>
</ul>
</li>
<li><p>响应头：对响应数据的描述</p>
</li>
<li><p>响应数据：具体返回的数据</p>
</li>
</ul>
</li>
</ol>
<p>我们只关心如何通过req获取请求信息，如何通过resp响应给客户</p>
</li>
<li><p>request常用方法    </p>
<ul>
<li><p>getParameter（name）:获取某一个参数,如果name相同的有多个，也只能获取第一个</p>
</li>
<li><p>getParameterValues（”hobbies”）:如果name相同的值有多个，则获取的是数组</p>
</li>
<li><p>getContextPath():获取应用路径</p>
</li>
<li><p>System.out.println(“应用地址：”+req.getContextPath());<br>System.out.println(“url-pattern:”+req.getServletPath());<br>System.out.println(“地址栏url:”+req.getRequestURL());<br>System.out.println(“contextPath+servletPath:”+req.getRequestURI()</p>
</li>
<li><p>getRemoteAddr():客户端ip,getRemotePort():端口</p>
<p>又是一个域对象   一次请求</p>
</li>
<li><p>setAttribute（）：向req中添加参数，必须只能通过getAttribute()获取  </p>
</li>
<li><p>getAttributeNames（）:获取全部key的枚举</p>
</li>
</ul>
</li>
</ul>
<h2 id="9-ServletContext-全局对象-域对象"><a href="#9-ServletContext-全局对象-域对象" class="headerlink" title="9.ServletContext    全局对象    域对象"></a>9.ServletContext    全局对象    域对象</h2><h4 id="1-为什么要全局对象"><a href="#1-为什么要全局对象" class="headerlink" title="1.为什么要全局对象?"></a>1.为什么要全局对象?</h4><p>用于管理tomcat中所有Servlet对象(相互独立，互不干扰)  </p>
<h4 id="2-域对象"><a href="#2-域对象" class="headerlink" title="2.域对象"></a>2.域对象</h4><p>唯一的全局域对象(作用域:全局的):可以实现数据共享</p>
<h4 id="3-生命周期"><a href="#3-生命周期" class="headerlink" title="3.生命周期"></a>3.生命周期</h4><p>当Tomcat启动时，自动产生ServletContext全局对象,当Tomcat关闭时，就销毁</p>
<h4 id="4-怎么获取全局对象"><a href="#4-怎么获取全局对象" class="headerlink" title="4.怎么获取全局对象?"></a>4.怎么获取全局对象?</h4><p>  可通过this.getServletContext()方法来获取全局对象</p>
<h4 id="5-有什么用？"><a href="#5-有什么用？" class="headerlink" title="5.有什么用？"></a>5.有什么用？</h4><ul>
<li>在web.xml中添加全局参数，比如：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;context-param&gt;</span><br><span class="line">		&lt;param-name&gt;a1&lt;/param-name&gt;</span><br><span class="line">		&lt;param-value&gt;hello&lt;/param-value&gt;</span><br><span class="line">	&lt;/context-param&gt;</span><br><span class="line"> 	&lt;context-param&gt;</span><br><span class="line">		&lt;param-name&gt;a2&lt;/param-name&gt;</span><br><span class="line">		&lt;param-value&gt;great&lt;/param-value&gt;</span><br><span class="line">	&lt;/context-param&gt;</span><br><span class="line">	</span><br><span class="line">可通过ctx.getInitParameter(&quot;a1&quot;)获取对应的配置值</span><br></pre></td></tr></table></figure>

<ul>
<li><p>还可作为域对象,实现不同servlet之间的数据共享<br>​		ctx.setAttribute(“a1”, “有值吗？”);</p>
</li>
<li><p>getRealPath():</p>
<p>获取资源文件的真实路径</p>
<p>src:目录下的内容全在tomcat对应项目的classes目录中</p>
<p>示例：getRealPath(“&#x2F;WEB-INF&#x2F;classes&#x2F;1.txt”);</p>
</li>
<li><p>getResourceAsStream():直接获取输入流</p>
<p>示例：getResourceAsStream(“&#x2F;WEB-INF&#x2F;classes&#x2F;1.txt”)</p>
</li>
</ul>
<h2 id="10-在idea中打war包"><a href="#10-在idea中打war包" class="headerlink" title="10 在idea中打war包"></a>10 在idea中打war包</h2><ol>
<li><p>file–&gt;project structure–&gt;atifacts–&gt;+号–&gt;web application achieve–&gt;选择要打包的模块–&gt;apply,ok</p>
</li>
<li><p>build–&gt;build atifacts–&gt;选择模块</p>
</li>
</ol>
<h2 id="11-在myeclipse中如何打war包"><a href="#11-在myeclipse中如何打war包" class="headerlink" title="11.在myeclipse中如何打war包"></a>11.在myeclipse中如何打war包</h2><ol>
<li><p>菜单栏上MyEclipse中右键–manage Deployments –选中server –Add -选择类型为: Packaged Archive-完成</p>
</li>
<li><p>去指定的地址中拿到war包，放到tomcat的webapps中，启动tomcat，在浏览器端来测试打war包是否成功</p>
</li>
</ol>
<h1 id="第二章-JSP"><a href="#第二章-JSP" class="headerlink" title="第二章  JSP"></a>第二章  JSP</h1><h2 id="1-servlet在作web开发的问题"><a href="#1-servlet在作web开发的问题" class="headerlink" title="1.servlet在作web开发的问题"></a>1.servlet在作web开发的问题</h2><p>处理业务时，servlet没问题，但在生成页面时，就很困难，要用out.print实现，调试和维护难度太大</p>
<h3 id="1-1-jsp是什么？"><a href="#1-1-jsp是什么？" class="headerlink" title="1.1 jsp是什么？"></a>1.1 jsp是什么？</h3><p>java Server Pages的缩写，本质上也是Servlet</p>
<h3 id="1-2-特点"><a href="#1-2-特点" class="headerlink" title="1.2 特点"></a>1.2 特点</h3><ul>
<li>以jsp结尾，在服务端执行</li>
<li>html+css+js+jquery+少量的java代码组成</li>
<li>不用配置web.xml</li>
</ul>
<h3 id="1-3运行原理"><a href="#1-3运行原理" class="headerlink" title="1.3运行原理"></a>1.3运行原理</h3><p>jsp页面在第一次被访问时–&gt;读取服务器上的jsp文件并翻译成servlet,也就是java代码__&gt;编译成class文件，放在目录：work&#x2F;catalina&#x2F;localhost&#x2F;项目名&#x2F;org&#x2F;apache&#x2F;….–&gt;执行class文件，也就是调用service方法，向客户端输出响应</p>
<h3 id="1-4-jsp与servlet功能上的区别"><a href="#1-4-jsp与servlet功能上的区别" class="headerlink" title="1.4 jsp与servlet功能上的区别"></a>1.4 jsp与servlet功能上的区别</h3><p>servlet适合写java代码</p>
<p> jsp适合作数据美化，为数据的显示提供模板</p>
<h2 id="2-jsp的组成"><a href="#2-jsp的组成" class="headerlink" title="2.jsp的组成"></a>2.jsp的组成</h2><h3 id="2-1-jsp脚本"><a href="#2-1-jsp脚本" class="headerlink" title="2.1 jsp脚本:"></a>2.1 jsp脚本:</h3><p>用于在jsp文件中编写java代码</p>
<ul>
<li><pre><code>&lt;%xxx%&gt; 脚本
作用：把标签内部 的内容转换成java代码，比如：
&lt;%int a = 10;%&gt;
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">+ &lt;%=xxxx%&gt;  表达式</span><br><span class="line"></span><br></pre></td></tr></table></figure>
作用：用于显示java代码的一个值或一个表达式或有返回值的方法
&lt;%
out.print(a);
%&gt;
上面写法可简化成
&lt;%=a%&gt;
&lt;%=new Date()%&gt;
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">+ &lt;%!xxx%&gt;  声明: 用于定义java的属性和方法</span><br><span class="line"></span><br><span class="line">  练习：打印四行hello,效果为：</span><br><span class="line"></span><br><span class="line">  hello1</span><br><span class="line"></span><br><span class="line">  hello2</span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  hello4</span><br><span class="line"></span><br><span class="line">  作业：99乘法表</span><br><span class="line"></span><br><span class="line">### 2.2 jsp指令</span><br><span class="line"></span><br><span class="line">jsp自己的语法 ，用于指示jsp执行某些步骤或指示jsp表现特定的行为，常见的有</span><br><span class="line"></span><br><span class="line">page，include,tablib,都用&lt;%@开头</span><br><span class="line"></span><br><span class="line">### 2.3. 模板元素</span><br><span class="line"></span><br><span class="line">也就是html,css,js,在翻译成java时，会把这些元素用out.write生成java</span><br><span class="line"></span><br><span class="line">### 2.4. jsp的注释</span><br><span class="line"></span><br></pre></td></tr></table></figure>
&lt;!--xxx--&gt;:用于html注释，但该注释会在浏览器的页面看到
//,/**/,/** */:java代码的注释，在&lt;%%&gt;中使用
&lt;%--xxxx--%&gt;:jsp自己的注释，只在jsp中能看到
</code></pre>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">## 3.exception</span><br><span class="line"></span><br><span class="line">#### jsp的9大内置对象之一</span><br><span class="line"></span><br><span class="line">作用：用来处理错误信息</span><br><span class="line"></span><br><span class="line">在jsp页面的&lt;%@中添加isErrorPage=&quot;true&quot;作用：用来表示将来出错时，会自动跳转到此处</span><br><span class="line"></span><br><span class="line">在web.xml中添加配置</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<error-page>
     <!-- <error-code>500</error-code> -->
     <exception-type>java.lang.Exception</exception-type>
     <location>/day3/demo1/error.jsp</location>
 </error-page>
 <error-page>
     <error-code>404</error-code>
     <location>/day3/demo1/error.jsp</location>
 </error-page>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">## 4.include指令与include动作和forward动作</span><br><span class="line"></span><br><span class="line">### 4.1 include指令(了解)</span><br><span class="line"></span><br><span class="line">用于将指定jsp中所有元素直接copy到当面jsp中，要注意：不能在两个页面中定义同名的变量和方法</span><br><span class="line"></span><br><span class="line">用下面方式实现</span><br><span class="line"></span><br></pre></td></tr></table></figure>
include指令：<%@ include file="2.jsp" %>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 4.2 include动作（了解）</span><br><span class="line"></span><br><span class="line">把多个页面的执行结果合并在一起来显示</span><br><span class="line"></span><br></pre></td></tr></table></figure>
用下面方式实现
<jsp:include page="/day3/include/2.jsp"></jsp:include>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">特点：两个页面共享req和resp,不存在变量重名问题</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 4.3 forward动作（熟悉）</span><br><span class="line"></span><br><span class="line">就是java中的转发,用法</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<jsp:forward page="/day3/forward/test.jsp">
    <jsp:param value="张三" name="name"/>
</jsp:forward>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">## 5.cookie   --不是九大内置对象</span><br><span class="line"></span><br><span class="line">一次会话：用户打开浏览器，访问了网站中的一些信息，关闭浏览器，这一过程叫一次会话</span><br><span class="line"></span><br><span class="line">cookie含义:是一种客户端的会话技术,让网站服务器把少量数据存储在客户端的硬盘上，当浏览器在访问网站时，会把这些cookie发送到服务器上</span><br><span class="line"></span><br><span class="line">特点：</span><br><span class="line"></span><br><span class="line">1.数据量小</span><br><span class="line"></span><br><span class="line">2.大概4k,编码是iso-8859-1</span><br><span class="line"></span><br><span class="line">3.只能保存字符串类型</span><br><span class="line"></span><br><span class="line">4.具有不确定性(安全性)</span><br><span class="line"></span><br><span class="line">常用方法：</span><br><span class="line"></span><br><span class="line">Cookie  c = new Cookie(String name,String value)</span><br><span class="line"></span><br><span class="line">req.getCookies():返回当前servlet所在目录内的所有cookie</span><br><span class="line"></span><br><span class="line">resp.addCookie(cookie):写回到客户端</span><br><span class="line"></span><br><span class="line">Cookie对象本身的方法</span><br><span class="line"></span><br><span class="line">​	getName():获取该对象的name</span><br><span class="line"></span><br><span class="line">​	getValue():获取其值</span><br><span class="line"></span><br><span class="line">​	setMaxAge(int n):单位是秒，可使cookie存活时间更长</span><br><span class="line"></span><br><span class="line">​	setPath(String path):设置cookie存储的路径</span><br><span class="line"></span><br><span class="line">## 6.session</span><br><span class="line"></span><br><span class="line">9大内置对象之一，是个域对象,也是第二个会话对象</span><br><span class="line"></span><br><span class="line">作用：在服务器端维护用户状态的一种技术</span><br><span class="line"></span><br><span class="line">常用方法：</span><br><span class="line"></span><br><span class="line">​	req.getSession():如果有就返回，没有就创建</span><br><span class="line"></span><br><span class="line">​	session.setAttribute(name,value),session.getAttribut(name)添加获取</span><br><span class="line"></span><br><span class="line">​	session.getLastAccessedTime():</span><br><span class="line"></span><br><span class="line">跟request区别：</span><br><span class="line"></span><br><span class="line">​	作用域不同，req是一次请求有效，而session是一次会话有效</span><br><span class="line"></span><br><span class="line">session的生命周期：</span><br><span class="line"></span><br><span class="line">​	1.创建</span><br><span class="line"></span><br><span class="line">​	请求中没有sessionId并使用到该session时服务器创建该对象，或者请求中的id在服务器中不存在</span><br><span class="line"></span><br><span class="line">​	2.销毁</span><br><span class="line"></span><br><span class="line">​	session有默认超时时间，默认30分钟</span><br><span class="line"></span><br><span class="line">​	浏览器关闭不会销毁session</span><br><span class="line"></span><br><span class="line">## 7.url重写</span><br><span class="line"></span><br><span class="line">​	如果浏览器禁用了cookie,可在重定向时，把sessionid作为url的一部分带回到浏览器，如：</span><br><span class="line"></span><br></pre></td></tr></table></figure>
resp.sendRedirect("/servlet/day4/2.jsp"+";jsessionid="+id);
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">cookie与session区别：</span><br><span class="line"></span><br><span class="line">1. cookie</span><br><span class="line">   + 数据保存在客户端，分担了服务器的负担</span><br><span class="line">   + 只能存放字符串</span><br><span class="line">   + 数据量一般在4k左右</span><br><span class="line">2. session</span><br><span class="line">   + 数据存放在服务器端，增加了服务器负担</span><br><span class="line">   + 可保存任意对象</span><br><span class="line">   + 数据量大小没限制</span><br><span class="line"></span><br><span class="line">## 8.application</span><br><span class="line"></span><br><span class="line">​	是jsp九大内置对象之一，也一个全局域对象，作用域在整个应用,可跨会话传递数据</span><br><span class="line"></span><br><span class="line">类型为ServletContext</span><br><span class="line"></span><br><span class="line">生命：服务器服务器启动时创建该对象，关闭时销毁</span><br><span class="line"></span><br><span class="line">作用：用于设置或获取整个应用的相关信息时使用</span><br><span class="line"></span><br><span class="line">## 9.jsp九大内置对象</span><br><span class="line"></span><br><span class="line">1. request  请求对象  域对象</span><br><span class="line"></span><br><span class="line">   HttpServletRequest,域对象，范围是当前请求</span><br><span class="line"></span><br><span class="line">2. response  响应对象</span><br><span class="line"></span><br><span class="line">   HttpServletResponse,响应对象</span><br><span class="line"></span><br><span class="line">   常用方法</span><br><span class="line"></span><br><span class="line">   addCookie(),getWriter()，sendRedirect()</span><br><span class="line"></span><br><span class="line">3. out:</span><br><span class="line"></span><br><span class="line">   JspWriter类型， 不同于response.getWriter()，是PrintWriter类型</span><br><span class="line"></span><br><span class="line">   out所写内容都写入缓冲区，最后才把内容写入浏览器</span><br><span class="line"></span><br></pre></td></tr></table></figure>
   <%="hello" %>
   <%out.print("aaa"); %>
   <%response.getWriter().print("bbbb"); %>
   <%out.print("ccc"); %>

<p>   最后结果：bbbb hello aaa ccc<br>   <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">4. config</span><br><span class="line"></span><br><span class="line">​	ServletConfig类型，本质上就是之前init(config)中的config对象，jsp中很少使用</span><br><span class="line"></span><br><span class="line">​	要在jsp中使用，必须中web.xml中添加配置信息：</span><br><span class="line"></span><br></pre></td></tr></table></figure><br><servlet><br>      <servlet-name>cfg</servlet-name><br>      <jsp-file>&#x2F;day4&#x2F;out.jsp</jsp-file><br>      <init-param><br>          <param-name>wyp</param-name><br>          <param-value>爱吃鸡</param-value><br>      </init-param> </p>
  </servlet>
  
  <servlet-mapping>
      <servlet-name>cfg</servlet-name>
      <url-pattern>/hello</url-pattern>
  </servlet-mapping> 
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">5. pageContext:  域对象</span><br><span class="line"></span><br><span class="line"> PageContext类型,是域对象,是页面上下文对象，作为域对象来说，只在当前页面中能使用</span><br><span class="line"></span><br><span class="line">作用：用来获取其他8个内置对象,</span><br><span class="line"></span><br><span class="line">​	$&#123;pageContext.request.contextPath&#125; &lt;br&gt;</span><br><span class="line"></span><br><span class="line">​	作为域对象，在当前页面中存取数据</span><br><span class="line"></span><br><span class="line">​	setAttribute(key,value),getAttribute(key)</span><br><span class="line"></span><br><span class="line">6. page</span><br><span class="line"></span><br><span class="line">​     就是jsp本身转换成java类后的对象，很少使用</span><br><span class="line"></span><br><span class="line">7. session:  域对象</span><br><span class="line"></span><br><span class="line">​       域对象，类型HttpSession,用来保存每个用户的会话信息，以便跟踪每个用户的操作状态</span><br><span class="line"></span><br><span class="line">8. application: 域对象</span><br><span class="line"></span><br><span class="line">​      ServletContext类型，域对象，范围是整个应用</span><br><span class="line"></span><br><span class="line">9. exception</span><br><span class="line"></span><br><span class="line">  错误处理对象，Throwable类型,用来反映服务器运行的异常，只有当jsp页面指定的page指定为isErrorPage  为true  时，才能使用exception对象</span><br><span class="line"></span><br><span class="line">#### jsp中的4个域对象</span><br><span class="line"></span><br><span class="line">+ pageContext:当前页面有效</span><br><span class="line"></span><br><span class="line">+ request:一次请求有效</span><br><span class="line"></span><br><span class="line">+ session:g 一次会话有效</span><br><span class="line"></span><br><span class="line">+ application:整个应用都有效</span><br><span class="line"></span><br><span class="line">####   servlet中也有三个域对象</span><br><span class="line"></span><br><span class="line">+ request</span><br><span class="line">+ session</span><br><span class="line">+ application</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 10.过滤器</span><br><span class="line"></span><br><span class="line">是web规范中的一种类型,用于在servlet执行前或后添加一些附加功能,比如：</span><br><span class="line"></span><br><span class="line">​	字符集设置：不用在每个servlet中设置字符编码</span><br><span class="line"></span><br><span class="line">​	权限控制：没有权限就不能执行某种操作</span><br><span class="line"></span><br><span class="line">​	登录校验：有些功能如果没登录就不能执行</span><br><span class="line"></span><br><span class="line">实现步骤：</span><br><span class="line"></span><br><span class="line">1. 编写过滤器</span><br><span class="line"></span><br><span class="line">   定义一个类并实现Filter接口，重写方法doFilter</span><br><span class="line"></span><br><span class="line">2. 在web.xml中配置过滤器</span><br><span class="line"></span><br><span class="line">方法说明</span><br><span class="line"></span><br><span class="line">1. init(FilterConfig):</span><br><span class="line"></span><br><span class="line">    在启动服务器时会实例 化过滤器，在实例 化过滤中会执行init方法，只会执行一次</span><br><span class="line"></span><br><span class="line">    FilterConfig:</span><br><span class="line"></span><br><span class="line">    a. 获取初始化参数</span><br><span class="line"></span><br><span class="line">    b. 获取Filter名称</span><br><span class="line"></span><br><span class="line">    c. 获取application</span><br><span class="line"></span><br><span class="line">2. doFilter()</span><br><span class="line"></span><br><span class="line">    真正执行过滤的方法，通过chain.doFilter继续调用下一个过滤器的doFIlter方法，直到执行资源被执行</span><br><span class="line"></span><br><span class="line">3. destrory():跟servlet的destroy方法一样，过滤器实例被销毁时调用</span><br><span class="line"></span><br><span class="line">## 11 监听器</span><br><span class="line"></span><br><span class="line">作用：监听某种对象的创建与销毁或属性值的变化</span><br><span class="line"></span><br><span class="line">只掌握三个鉴听器接口，这三个监听器用来监听三个域对象</span><br><span class="line"></span><br><span class="line">+ ServletContextListener--&gt;application</span><br><span class="line">+ HttpSessionListener--&gt;session</span><br><span class="line">+ ServletRequestListener--&gt;request</span><br><span class="line">+ HttpSessionAttributeListener--&gt;当session中添加或删除(deleteAttribute)属性时触发方法</span><br><span class="line"></span><br><span class="line">三种域对象的创建与销毁时机</span><br><span class="line"></span><br><span class="line">1. application</span><br><span class="line"></span><br><span class="line">   + 创建：服务器启动时</span><br><span class="line">   + 销毁：服务器关闭时</span><br><span class="line"></span><br><span class="line">2. session</span><br><span class="line"></span><br><span class="line">   + 创建：</span><br><span class="line"></span><br><span class="line">     如果请求中没有携带sessionid,则jsp一定会自动创建，servlet中如果获取session就会创建</span><br><span class="line"></span><br><span class="line">     请求中如果有id,但服务器中已经没有session的id跟其相同，也创建</span><br><span class="line"></span><br><span class="line">   + 销毁：</span><br><span class="line"></span><br><span class="line">     + session.invalidate()会手动销毁</span><br><span class="line">     + session超时也会销毁,可通过session.setMaxInactiveInterval(n秒)来设置超时时间</span><br><span class="line">     + 服务器关闭时</span><br><span class="line"></span><br><span class="line">3. request</span><br><span class="line"></span><br><span class="line">   + 创建：每次请求都创建</span><br><span class="line">   + 销毁：在请求开始处理活跃状态直到开始响应就销毁</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">如何使用监听器</span><br><span class="line"></span><br><span class="line">+ 1.建一类 实现接口Listener</span><br><span class="line"></span><br><span class="line">+ 配置web.xml</span><br><span class="line"></span><br></pre></td></tr></table></figure>
  <listener>
       <listener-class>day5.listener.MyListener</listener-class>
   </listener>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 12.servlet3.0的新特性</span><br><span class="line"></span><br><span class="line">1. Servlet的新特性</span><br><span class="line"></span><br></pre></td></tr></table></figure>
/*value:是url路径
 * initParams:是servlet的初始化参数
 * */
@WebServlet(value="/demo1/Test1",initParams={@WebInitParam(name="driver",value="mysql"),@WebInitParam(name="url",value="localhost")})

<p>在web.xml的<web-app>标签中存在属性metadata-complete&#x3D;”false”，如果其值为true则注解无效</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">1. 过滤器的新特性</span><br><span class="line"></span><br><span class="line">   @WebFilter(&quot;/*&quot;)，实现接口Filter</span><br><span class="line"></span><br><span class="line">2. 监听器</span><br><span class="line"></span><br><span class="line">   @WebListener,实现接口</span><br><span class="line"></span><br><span class="line">## 13.El表达式</span><br><span class="line"></span><br><span class="line">作用：让jsp页面不出现java代码，用于获取和显示数据</span><br><span class="line"></span><br><span class="line">使用场合：在整个jsp文件中都可出现，jquery只能在js脚本中出现</span><br><span class="line"></span><br><span class="line">el表达式语法：$&#123;xxx&#125;</span><br><span class="line"></span><br><span class="line">jquery语法：$()</span><br><span class="line"></span><br><span class="line">如何使用：</span><br><span class="line"></span><br><span class="line">1. 用来访问域对象中的值</span><br><span class="line"></span><br><span class="line">   pageContext</span><br><span class="line"></span><br><span class="line">   request</span><br><span class="line"></span><br><span class="line">   session</span><br><span class="line"></span><br><span class="line">   application</span><br><span class="line"></span><br><span class="line">2. el中11个隐式对象</span><br><span class="line"></span><br><span class="line">   pageScope</span><br><span class="line"></span><br><span class="line">   requestScope</span><br><span class="line"></span><br><span class="line">   sessionScope</span><br><span class="line"></span><br><span class="line">   applicationScope</span><br><span class="line"></span><br><span class="line">   pageContext,用于获取其它8个内置对象</span><br><span class="line"></span><br><span class="line">   param:表示一个保存了所有请求参数的map对象&lt;String,String&gt;</span><br><span class="line"></span><br><span class="line">   paramValues:表示一个保存了所有请求参数的map对象,它的键值对为&lt;String,String[]&gt;</span><br><span class="line"></span><br><span class="line">   header:表示一个保存了所有请求头字段的map对象</span><br><span class="line"></span><br><span class="line">   headerValues:表示一个保存了所有请求字段的map对象，每个key对应的value是数组</span><br><span class="line"></span><br><span class="line">   cookie:表示一个保存了所有cookie的map对象&lt;String,cookie&gt;</span><br><span class="line"></span><br><span class="line">   initParam:表示一个保存了所有web应用初始化参数的map对象，是web.xml中全局参数</span><br><span class="line"></span><br><span class="line">3. 访问对象中的数据</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">+ 自定义对象$&#123;对象.属性&#125;</span><br><span class="line"></span><br><span class="line">+ 集合或数组</span><br><span class="line"></span><br><span class="line">        使用下标获取[index]</span><br><span class="line">        </span><br><span class="line">        如果是map则用[&quot;key&quot;]或.key</span><br><span class="line"></span><br><span class="line">      示例：</span><br><span class="line"></span><br><span class="line">      ​```</span><br><span class="line">      //数组</span><br><span class="line">          	String[]arr = &#123;&quot;你&quot;,&quot;我&quot;&#125;;</span><br><span class="line">          	request.setAttribute(&quot;arr&quot;,arr);</span><br><span class="line">          	</span><br><span class="line">          	//集合</span><br><span class="line">          	List&lt;String&gt;li = new ArrayList&lt;String&gt;();</span><br><span class="line">          	li.add(&quot;你们&quot;);</span><br><span class="line">          	li.add(&quot;我们&quot;);</span><br><span class="line">          	request.setAttribute(&quot;list&quot;,li);</span><br><span class="line">          	</span><br><span class="line">          	//Map</span><br><span class="line">          	Map&lt;String,String&gt;m = new HashMap&lt;String,String&gt;();</span><br><span class="line">          	m.put(&quot;a1&quot;, &quot;hello&quot;);</span><br><span class="line">          	m.put(&quot;a2&quot;,&quot;welcome&quot;);</span><br><span class="line">          	m.put(&quot;a3.b&quot;,&quot;sun&quot;);</span><br><span class="line">          	request.setAttribute(&quot;map&quot;,m);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">          $&#123;user.name &#125;</span><br><span class="line">           $&#123;arr[1]&#125;</span><br><span class="line">           $&#123;list[1] &#125;</span><br><span class="line">           &lt;%--$&#123;map.a3.b &#125;取不出  --%&gt;</span><br><span class="line">           $&#123;map.a1&#125; </span><br><span class="line">           $&#123;map[&quot;a3.b&quot;] &#125;</span><br><span class="line">      ​```</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 14.jstl标签库的使用</span><br><span class="line"></span><br><span class="line">在使用前要导入标签库</span><br><span class="line"></span><br><span class="line">&lt;%@ taglib uri=&quot;http://java.sun.com/jsp/jstl/core&quot; prefix=&quot;c&quot;%&gt;</span><br><span class="line"></span><br><span class="line">+  赋值语句：</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>&lt;c:set var &#x3D;”age” value&#x3D;”50”&gt;</c:set><br>      ${age }</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">+ 条件语句：重点</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>&lt;c:if test&#x3D;”${age &gt; 18 }” &gt;<br>    已成年，可以看xxx电影<br></c:if></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">+ choose</span><br><span class="line"></span><br><span class="line">要使用when 和otherwise两个子标签 ,作用相当于if...else if...else if...else</span><br><span class="line"></span><br><span class="line">+ foreach:重点</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>  数组示例：<br>  &lt;%<br>      String[]arrs &#x3D; {“赵雅芝”,”小苍”,”小泽”};<br>      request.setAttribute(“arrs”, arrs);<br>  %&gt;<br>  &lt;c:forEach var&#x3D;”s” items&#x3D;”${arrs }”&gt;<br>      ${s }<br>  </c:forEach></p>
<p>  集合示例：<br>  &lt;%<br>  ArrayList<User>arr &#x3D; new ArrayList<User>();<br>  User u1 &#x3D; new User(1,”a1”);<br>  User u2 &#x3D; new User(2,”a2”);<br>  arr.add(u1);<br>  arr.add(u2);<br>  pageContext.setAttribute(“arr”, arr);<br>  %&gt;<br>  &lt;c:forEach  items&#x3D;”${arr }” var &#x3D;”tmp”&gt;<br>  id:${tmp.id }<br><br>  name:${tmp.name }<br><br>  </c:forEach></p>
<p>  Map示例<br>  &lt;%<br>  Map&lt;Integer,User&gt; m &#x3D; new HashMap&lt;Integer,User&gt;();<br>  m.put(u1.getId(), u1);<br>  m.put(u2.getId(), u2);<br>  pageContext.setAttribute(“m”, m);<br>  %&gt;<br>  &lt;c:forEach items&#x3D;”${m }” var&#x3D;”e”&gt;<br>  ${e.key }–${e.value.name }<br>  </c:forEach><br>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  var:是类型为string,指定将当前迭代到的元素保存到pageContext域中</span><br><span class="line"></span><br><span class="line">  items：类型任意，要迭代的集合对象或数组</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">+ 时间格式标签</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>&lt;%request.setAttribute(“now”, new Date()); %&gt;<br>    &lt;fmt:formatDate value&#x3D;”${now }” type&#x3D;”date”&#x2F;&gt;<br><br>    &lt;fmt:formatDate value&#x3D;”${now }” type&#x3D;”both”&#x2F;&gt;<br><br>    &lt;fmt:formatDate value&#x3D;”${now }” type&#x3D;”time”&#x2F;&gt;<br><br>    &lt;fmt:formatDate value&#x3D;”${now }” pattern&#x3D;”yyyy&#x2F;MM&#x2F;dd HH:mm:ss”&#x2F;&gt;<br></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">+ 自定义EL函数</span><br><span class="line"></span><br><span class="line">  1. 新建类,并实现静态方法</span><br><span class="line"></span><br><span class="line">  2. 在web-inf下创建tld文件，并从其他库文件中copy模板</span><br><span class="line"></span><br><span class="line">     如：</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<pre><code> &lt;%@ taglib uri=&quot;/mystr&quot; prefix=&quot;abc&quot;%&gt;
 $&#123;abc:show(&quot;hello everyone&quot;) &#125;
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
 &lt;function&gt;    
     &lt;name&gt;show&lt;/name&gt;
     &lt;function-class&gt;day7.el.Myfn&lt;/function-class&gt;
     &lt;function-signature&gt;java.lang.String showMsg(java.lang.String)&lt;/function-signature&gt;
   &lt;/function&gt;
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">+ 自定义EL标签</span><br><span class="line">  1. 定义类继承自SimpleTagSupport，重写方法doTag，可提供属性并封装</span><br><span class="line">  2. 在web-inf添加配置文件tld</span><br><span class="line">  3. jsp中导入就可使用</span><br><span class="line"></span><br><span class="line">+ 文件上传</span><br><span class="line"></span><br><span class="line">  将客户端资源上传到服务器，其本质上是通过io流实现字节的传递</span><br><span class="line"></span><br><span class="line">  如何实现？</span><br><span class="line"></span><br><span class="line">  1. form表单的提交方式必须是post,因为只有post才可以采用流的方式携带大量数据</span><br><span class="line"></span><br><span class="line">  2. 表单中必须添加属性encType=&quot;multipart/form-data&quot;</span><br><span class="line"></span><br><span class="line">     encType:用来指定包含文件时表单数据的封装格式,该属性默认值是application/x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">  3. 在Servlet中添加注解@MultipartConfig</span><br><span class="line"></span><br><span class="line">+ 验证码</span><br><span class="line"></span><br><span class="line">## 14 员工管理系统</span><br><span class="line"></span><br><span class="line">### 1. 在WEB-inf下的lib中添加jar包</span><br><span class="line"></span><br><span class="line">mysql驱动，tmp模板，jstl.jar,standard.jar,commons-dbcp.jar,commons-pool.jar</span><br><span class="line"></span><br><span class="line">### 2.建表</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</code></pre>
<p>create table t_emp{<br>  id int primary key auto_increment,<br>  name varchar(30),<br>  salary double,<br>  gender varchar(10),<br>  edu varchar(30),<br>  hobbies varchar(50)<br>}</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### 3. 实体类</span><br><span class="line"></span><br><span class="line">Emp</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>Integer id<br>String name<br>double salary,<br>String gender,<br>String edu;<br>String hobbies; </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### 4. EmpMapper类</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>return new Emp(rs.getInt(“id”),rs.getString(“name”)….);</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### 5. EmpServlet.java类</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>url为*.emp<br>if(path.contains(“add”)){<br>    Dao.insert(e)<br>}else if(delete){<br>    dao.deleteById(id)<br>}(showModify){<br>  从数据库中查出该员工对象，并放入域对象中，转发到update.jsp页面上显示<br>}(update){<br>  从request中获取员工的全新信息，并写入数据库<br>}<br>最后转发到empList.jsp页面</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### 6.jsp页面</span><br><span class="line"></span><br><span class="line">addEmp.jsp</span><br><span class="line"></span><br><span class="line">empList.jsp</span><br><span class="line"></span><br><span class="line">showModifyEmp.jsp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 第三章 xml与Json</span><br><span class="line"></span><br><span class="line">## 1.XML </span><br><span class="line"></span><br><span class="line">是可扩展标记语言，跟html相似，但可自定义标签，没有预先定义的标签</span><br><span class="line"></span><br><span class="line">作用：可当作简单的数据库来使用,可用来作配置文件使用</span><br><span class="line"></span><br><span class="line">跟html区别：html是预定义标签，可被浏览器识别我解析，但xml不可被浏览器识别和解析</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<?xml version="1.0" encoding="UTF-8"?><!-- 声明此文件为xml 版本号 字符编码 -->
<!-- 自定义根标签 -->
<class>
    <stu name="张三">
       <name>张三</name>
       <gender>男</gender>
       <age>20</age>
    </stu>
    <stu name="李四">
       <name>李四</name>
       <gender>男</gender>
       <age>21</age>
    </stu>
    <teacher name="Tom">
       <name>Tom</name>
    </teacher>
</class>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">掌握什么?</span><br><span class="line"></span><br><span class="line">1.  文档声明</span><br><span class="line"></span><br><span class="line">2.  每个xml必须有一个根标签，用于包含其他所有元素</span><br><span class="line"></span><br><span class="line">3.  标签的命名规范</span><br><span class="line"></span><br><span class="line">    - 区分大小写，不能以_或数字开头，不能有空格和:号</span><br><span class="line"></span><br><span class="line">4.  属性的值用双引号或单引号</span><br><span class="line"></span><br><span class="line">5.  用第三方jar包dom4j解析</span><br><span class="line">    1. SAXReader来读取文件</span><br><span class="line">    2. Document：把文件读取到一个doc中</span><br><span class="line"></span><br><span class="line">## 2. JSON</span><br><span class="line"></span><br><span class="line">javascript object notation,是一个轻量级的数据交换格式,用于在客户端与服务器之间的数据传递</span><br><span class="line"></span><br><span class="line">### 2.1优点如下：</span><br><span class="line"></span><br><span class="line">- 方便解析</span><br><span class="line">- 读写灵活</span><br><span class="line">- 结构简单</span><br><span class="line">- 与编程语言无关</span><br><span class="line"></span><br><span class="line">### 2.2 语法</span><br><span class="line"></span><br><span class="line">- &#123;k1:v1,k2:v2,....&#125;</span><br><span class="line">- [v1,v2,...]</span><br><span class="line"></span><br><span class="line">### 2.3 使用</span><br><span class="line"></span><br></pre></td></tr></table></figure>
示例1：javascript中的json使用

<p>function f1(){<br>    var user &#x3D; {“name”:”admin”,”age”:”25”,”gender”:”男”};<br>    console.log(user[“name”]);<br>    console.log(user[‘age’]);<br>    console.log(user.gender);<br>}</p>
<p>function f2(){<br>var user &#x3D; {“name”:{“firstName”:”张”,”lastName”:”三	  丰”},”age”:”25”,”gender”:”男”};<br>console.log(user.name[“lastName”]);<br>console.log(user.name.firstName);<br>console.log(user[“name”].firstName);<br>}<br>function f3(){<br>var user &#x3D; {“name”:”admin”,”age”:”25”,”gender”:”男”};<br>var p&#x3D;{“id”:”123”,”user”:user};<br>console.log(p.id);<br>console.log(p.user.name);<br>console.log(p[“user”][“name”]);<br>}</p>
<p>function f4(){<br>var user &#x3D;[{“name”:”admin”,”age”:24},{“n”:”a1”,”age”:25}];<br>console.log(user[0].name);<br>console.log(user[1][“n”]);<br>}</p>
<p>&#x2F;&#x2F;字符串转json<br>function f5(){<br>var user&#x3D;”{&quot;name&quot;:&quot;admin&quot;,&quot;age&quot;:24}”;<br>console.log(typeof user);<br>user &#x3D; “alert(‘abc’)”;<br>&#x2F;&#x2F;user &#x3D; eval(“(“+user+”)”);<br>user &#x3D; JSON.parse(user);<br>console.log(typeof user);<br>}    	</p>
<p>示例2：java对象转为json格式的字符串<br>String rs &#x3D; JSON.toJSONString(new User(“nj”));<br>rs &#x3D; JSON.toJSONString(arr);&#x2F;&#x2F;把java对象转为json格式字符串</p>
<p>示例3：把JSON格式字符串转为JAVA对象<br>  User o &#x3D; JSON.parseObject(rs,new TypeReference<User>(){});<br>  System.out.println(o.address);</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">## 3. MVC</span><br><span class="line"></span><br><span class="line">### 1.web程序的开发历史</span><br><span class="line"></span><br><span class="line">1. Servlet，业务，数据处理，页面显示</span><br><span class="line"></span><br><span class="line">2. jsp实现全部</span><br><span class="line"></span><br><span class="line">   不用配置，直接用html页面标签,但缺点是代码臃肿，难维护</span><br><span class="line"></span><br><span class="line">3. jsp+java</span><br><span class="line"></span><br><span class="line">   jsp负责显示页面数据和页面跳转</span><br><span class="line"></span><br><span class="line">   java负责业务逻辑和数据处理</span><br><span class="line"></span><br><span class="line">   优点：显示与业务数据分开，缺点只能开发小程序，大型应用难维护</span><br><span class="line"></span><br><span class="line">4. MVC设计模式</span><br><span class="line"></span><br><span class="line">   M:model模型，包括业务service和dao</span><br><span class="line"></span><br><span class="line">   V:view,就是jsp</span><br><span class="line"></span><br><span class="line">   C:controller,</span><br><span class="line"></span><br><span class="line">### 2.MVC示意图</span><br><span class="line"></span><br><span class="line">### 3. mvc使用说明</span><br><span class="line"></span><br><span class="line">+ 要在web-inf包下建文件夹pages,用来放所有jsp文件</span><br><span class="line">+ 在项目中添加一个类，并添加注解@Configuration,用来进行页面跳转</span><br><span class="line">+ 添加若干类，工在其类和方法上添加注解@RequestMapping,用于对用户的请求进行相应的java处理</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">+  java处理方法的返回值：</span><br><span class="line">  + String</span><br><span class="line">    + /xxx.do:直接进行该字符串的转发</span><br><span class="line">    + xxx:则会进行/WEB-INF/pages/xxx.jsp的转发</span><br><span class="line">    + redirect:/xxx.do:则直接进行/xxx.do的重定向</span><br><span class="line">+  java方法中如果有注解@ResponseBody:用来处理ajax请求</span><br><span class="line"></span><br><span class="line"># 第五章 ajax</span><br><span class="line"></span><br><span class="line">##1.ajax请求</span><br><span class="line"></span><br><span class="line">asynchrous(异步) javascript and xml</span><br><span class="line"></span><br><span class="line">+ 传统请求方式：</span><br><span class="line"></span><br><span class="line">  请求--&gt;等待--&gt;响应这种模式</span><br><span class="line"></span><br><span class="line">在服务器返回响应之前，用户不能对页面作任何操作，导致用户体验差</span><br><span class="line"></span><br><span class="line">+ ajax工作原理：</span><br><span class="line"></span><br><span class="line">   1. 利用浏览器提供的一个特殊对象XMLHttpRequest,叫ajax对象，向服务器发送异步请求</span><br><span class="line">   2. 服务器返回小量数据给浏览器，浏览器利用这些数据对当前页面作局部更新</span><br><span class="line">   3. 整个过程页面无刷新，不打断用户操作，体验好</span><br><span class="line"></span><br><span class="line">+ XMLHttpRequest对象常用方法:</span><br><span class="line"></span><br><span class="line">1. open(method,url,async):用于设置与服务器的连接</span><br><span class="line"></span><br><span class="line">   参数1：请求方式，post和get</span><br><span class="line"></span><br><span class="line">   参数2：url请求地址</span><br><span class="line"></span><br><span class="line">   async:boolean值，true为异步，false为同步,默认是true,可不写</span><br><span class="line"></span><br><span class="line">2. send(content):发送请求，参数为请求的参数,如果写，格式为：&quot;username=tom&amp;pass=123&quot;</span><br><span class="line"></span><br><span class="line">+ 常用属性：</span><br><span class="line"></span><br><span class="line">1. onreadystatechange:事件属性，用来处理响应的函数</span><br><span class="line"></span><br><span class="line">2. status:服务器的响应码</span><br><span class="line"></span><br><span class="line">3. responseText:响应的内容</span><br><span class="line"></span><br><span class="line">4. readyState:值从0~4一共五个状态</span><br><span class="line"></span><br><span class="line">   0：对象被创建时就是0</span><br><span class="line"></span><br><span class="line">   1：请求提出，就是open方法的执行</span><br><span class="line"></span><br><span class="line">   2:请求已发出，就是send方法的执行</span><br><span class="line"></span><br><span class="line">   3:请求正在处理，接收到了响应头，但没响应正文</span><br><span class="line"></span><br><span class="line">   4:请求处理完毕，js中接收到所有响应数据</span><br><span class="line"></span><br><span class="line">+ 使用步骤</span><br><span class="line">  1. 得到xmlhttprequest对象</span><br><span class="line">  2. 注册回调函数</span><br><span class="line">  3. open:打包数据</span><br><span class="line">  4. send:发送请求</span><br><span class="line">  5. 调用回调函数</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 2.jquery方式发送ajax请求</span><br><span class="line"></span><br><span class="line">一共5种：</span><br><span class="line"></span><br><span class="line">### 2.1$.get()</span><br><span class="line"></span><br><span class="line">语法：</span><br><span class="line"></span><br><span class="line">​	</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>$.get(url[,data][,callback])<br>参数说明：<br>1。url:string类型，请求地址<br>2.data:可选，object类型，参数可用?name&#x3D;abc&amp;pass&#x3D;123<br>3.callback:可选，function类型</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### 2.2 $.post()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>语法<br>$.post(url[,data][,callback][,type])<br>参数说明：<br>前三个参数同上<br>参数4：指定服务器响应的文本格式,具体值为html,xml,json,text<br>    注意：如果是json,则在js中就不用JSON.parse(data),但要求服务器端传来的字符串必须满足JSON格式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### 2.3$.getJSON()</span><br><span class="line"></span><br><span class="line">用法同$.get()一样，只能发送get请求，但支持跨域调用，返回类型也只能为JSON格式</span><br><span class="line"></span><br><span class="line">### 2.4 $.ajax(option),重点</span><br><span class="line"></span><br><span class="line">可对ajax请求作精确控制，语法如下：	</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>$.ajax({<br> url:’&#x2F;ajax.do’,<br> data:{“key”,”abc”}<br> datatype:’json’,<br> type:’post’,<br> success:function(e){e表示服务器传来的json对象},<br> error:function(e){服务器响应失败后执行},<br> beforeSend:function(){响应前的任务，比如：正在加载中…}<br>});</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### 2.5 load</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>$(“#标签id”).load(“url地址”);</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">## 3.跨域</span><br><span class="line"></span><br><span class="line">同源策略：</span><br><span class="line"></span><br><span class="line">​	同源是指协议、域名、端口号全相同</span><br><span class="line"></span><br><span class="line">​	同源策略：指不同源的js在没有明确授权的情况下，不能读写对方的资源</span><br><span class="line"></span><br><span class="line">什么是跨域？</span><br><span class="line"></span><br><span class="line">​	协议、域名、端口中任意一个不同，就为跨域,可使用jsonp(json with padding)实现跨域</span><br><span class="line"></span><br><span class="line">如何实现跨域？</span><br><span class="line"></span><br><span class="line">```jsp</span><br><span class="line">1.jsp端</span><br><span class="line">$.ajax(&#123;</span><br><span class="line">//url:&quot;http://127.0.0.1/ajax/p.do?callback=aa&quot;,</span><br><span class="line">url:&quot;http://127.0.0.1/ajax/p.do&quot;,</span><br><span class="line">type:&quot;get&quot;,</span><br><span class="line">dataType:&quot;jsonp&quot;,</span><br><span class="line">success:function(data)&#123;</span><br><span class="line">$(&quot;#text&quot;).val(data.msg);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">2.另一台服务器上</span><br><span class="line">rs=callback+&quot;(&quot;+rs+&quot;)&quot;;</span><br><span class="line">PrintWriter out = resp.getWriter();</span><br><span class="line">out.print(rs);</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>计算机</category>
        <category>JSP</category>
      </categories>
      <tags>
        <tag>JSP</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaWeb</title>
    <url>/2023/06/09/%E8%AE%A1%E7%AE%97%E6%9C%BA/%E7%8B%82%E7%A5%9E%E8%AF%B4/JavaWeb/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="JavaWeb"><a href="#JavaWeb" class="headerlink" title="JavaWeb"></a>JavaWeb</h1><p>Java    Web</p>
<h2 id="1、基本概念"><a href="#1、基本概念" class="headerlink" title="1、基本概念"></a>1、基本概念</h2><h3 id="1-1、前言"><a href="#1-1、前言" class="headerlink" title="1.1、前言"></a>1.1、前言</h3><p>web开发：</p>
<ul>
<li>web，网页的意思  ， <a href="http://www.baidu.com/">www.baidu.com</a></li>
<li>静态web<ul>
<li>html，css</li>
<li>提供给所有人看的数据始终不会发生变化！</li>
</ul>
</li>
<li>动态web<ul>
<li>淘宝，几乎是所有的网站；</li>
<li>提供给所有人看的数据始终会发生变化，每个人在不同的时间，不同的地点看到的信息各不相同！</li>
<li>技术栈：Servlet&#x2F;JSP，ASP，PHP</li>
</ul>
</li>
</ul>
<p>在Java中，动态web资源开发的技术统称为JavaWeb；</p>
<span id="more"></span>

<h3 id="1-2、web应用程序"><a href="#1-2、web应用程序" class="headerlink" title="1.2、web应用程序"></a>1.2、web应用程序</h3><p>web应用程序：可以提供浏览器访问的程序；</p>
<ul>
<li>a.html、b.html……多个web资源，这些web资源可以被外界访问，对外界提供服务；</li>
<li>你们能访问到的任何一个页面或者资源，都存在于这个世界的某一个角落的计算机上。</li>
<li>URL </li>
<li>这个统一的web资源会被放在同一个文件夹下，web应用程序–&gt;Tomcat：服务器</li>
<li>一个web应用由多部分组成 （静态web，动态web）<ul>
<li>html，css，js</li>
<li>jsp，servlet</li>
<li>Java程序</li>
<li>jar包</li>
<li>配置文件 （Properties）</li>
</ul>
</li>
</ul>
<p>web应用程序编写完毕后，若想提供给外界访问：需要一个服务器来统一管理；</p>
<h3 id="1-3、静态web"><a href="#1-3、静态web" class="headerlink" title="1.3、静态web"></a>1.3、静态web</h3><ul>
<li>*.htm, *.html,这些都是网页的后缀，如果服务器上一直存在这些东西，我们就可以直接进行读取。通络；</li>
</ul>
<p><img src="/JavaWeb.assets/1567822802516.png" alt="1567822802516"></p>
<ul>
<li>静态web存在的缺点<ul>
<li>Web页面无法动态更新，所有用户看到都是同一个页面<ul>
<li>轮播图，点击特效：伪动态</li>
<li>JavaScript [实际开发中，它用的最多]</li>
<li>VBScript</li>
</ul>
</li>
<li>它无法和数据库交互（数据无法持久化，用户无法交互）</li>
</ul>
</li>
</ul>
<h3 id="1-4、动态web"><a href="#1-4、动态web" class="headerlink" title="1.4、动态web"></a>1.4、动态web</h3><p>页面会动态展示： “Web的页面展示的效果因人而异”；</p>
<p><img src="/JavaWeb/1567823191289.png" alt="1567823191289"></p>
<p>缺点：</p>
<ul>
<li>加入服务器的动态web资源出现了错误，我们需要重新编写我们的<strong>后台程序</strong>,重新发布；<ul>
<li>停机维护</li>
</ul>
</li>
</ul>
<p>优点：</p>
<ul>
<li>Web页面可以动态更新，所有用户看到都不是同一个页面</li>
<li>它可以与数据库交互 （数据持久化：注册，商品信息，用户信息……..）</li>
</ul>
<p><img src="/JavaWeb.assets/1567823350584.png" alt="1567823350584"></p>
<p>新手村：–魔鬼训练（分析原理，看源码）–&gt; PK场</p>
<h2 id="2、web服务器"><a href="#2、web服务器" class="headerlink" title="2、web服务器"></a>2、web服务器</h2><h3 id="2-1、技术讲解"><a href="#2-1、技术讲解" class="headerlink" title="2.1、技术讲解"></a>2.1、技术讲解</h3><p><strong>ASP:</strong></p>
<ul>
<li><p>微软：国内最早流行的就是ASP；</p>
</li>
<li><p>在HTML中嵌入了VB的脚本，  ASP + COM；</p>
</li>
<li><p>在ASP开发中，基本一个页面都有几千行的业务代码，页面极其换乱</p>
</li>
<li><p>维护成本高！</p>
</li>
<li><p>C# </p>
</li>
<li><p>IIS</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">            &lt;%</span><br><span class="line">            System.out.println(&quot;hello&quot;)</span><br><span class="line">            %&gt;</span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>php：</strong></p>
<ul>
<li>PHP开发速度很快，功能很强大，跨平台，代码很简单 （70% , WP）</li>
<li>无法承载大访问量的情况（局限性）</li>
</ul>
<p>**JSP&#x2F;Servlet : ** </p>
<p>B&#x2F;S：浏览和服务器</p>
<p>C&#x2F;S:  客户端和服务器</p>
<ul>
<li>sun公司主推的B&#x2F;S架构</li>
<li>基于Java语言的 (所有的大公司，或者一些开源的组件，都是用Java写的)</li>
<li>可以承载三高问题带来的影响；</li>
<li>语法像ASP ， ASP–&gt;JSP , 加强市场强度；</li>
</ul>
<p>…..</p>
<h3 id="2-2、web服务器"><a href="#2-2、web服务器" class="headerlink" title="2.2、web服务器"></a>2.2、web服务器</h3><p>服务器是一种被动的操作，用来处理用户的一些请求和给用户一些响应信息；</p>
<p><strong>IIS</strong></p>
<p>微软的； ASP…,Windows中自带的</p>
<p><strong>Tomcat</strong></p>
<p><img src="/JavaWeb.assets/1567824446428.png" alt="1567824446428"></p>
<p>面向百度编程；</p>
<p>Tomcat是Apache 软件基金会（Apache Software Foundation）的Jakarta 项目中的一个核心项目，最新的Servlet 和JSP 规范总是能在Tomcat 中得到体现，因为Tomcat 技术先进、性能稳定，而且<strong>免费</strong>，因而深受Java 爱好者的喜爱并得到了部分软件开发商的认可，成为目前比较流行的Web 应用服务器。</p>
<p>Tomcat 服务器是一个免费的开放源代码的Web 应用服务器，属于轻量级应用<a href="https://baike.baidu.com/item/%E6%9C%8D%E5%8A%A1%E5%99%A8">服务器</a>，在中小型系统和并发访问用户不是很多的场合下被普遍使用，是开发和调试JSP 程序的首选。对于一个Java初学web的人来说，它是最佳的选择</p>
<p>Tomcat 实际上运行JSP 页面和Servlet。Tomcat最新版本为<strong>9.0。</strong></p>
<p>….</p>
<p><strong>工作3-5年之后，可以尝试手写Tomcat服务器；</strong></p>
<p>下载tomcat：</p>
<ol>
<li>安装 or  解压</li>
<li>了解配置文件及目录结构</li>
<li>这个东西的作用</li>
</ol>
<h2 id="3、Tomcat"><a href="#3、Tomcat" class="headerlink" title="3、Tomcat"></a>3、Tomcat</h2><h3 id="3-1、-安装tomcat"><a href="#3-1、-安装tomcat" class="headerlink" title="3.1、 安装tomcat"></a>3.1、 安装tomcat</h3><p>tomcat官网：<a href="http://tomcat.apache.org/">http://tomcat.apache.org/</a></p>
<p><img src="/JavaWeb.assets/1567825600842.png" alt="1567825600842"></p>
<p><img src="/JavaWeb.assets/1567825627138.png" alt="1567825627138"></p>
<h3 id="3-2、Tomcat启动和配置"><a href="#3-2、Tomcat启动和配置" class="headerlink" title="3.2、Tomcat启动和配置"></a>3.2、Tomcat启动和配置</h3><p>文件夹作用：</p>
<p><img src="/JavaWeb.assets/1567825763180.png" alt="1567825763180"></p>
<p><strong>启动。关闭Tomcat</strong></p>
<p><img src="/JavaWeb.assets/1567825840657.png" alt="1567825840657"></p>
<p>访问测试：<a href="http://localhost:8080/">http://localhost:8080/</a></p>
<p>可能遇到的问题：</p>
<ol>
<li>Java环境变量没有配置</li>
<li>闪退问题：需要配置兼容性</li>
<li>乱码问题：配置文件中设置</li>
</ol>
<h3 id="3-3、配置"><a href="#3-3、配置" class="headerlink" title="3.3、配置"></a>3.3、配置</h3><p><img src="/JavaWeb.assets/1567825967256.png" alt="1567825967256"></p>
<p>可以配置启动的端口号</p>
<ul>
<li>tomcat的默认端口号为：8080</li>
<li>mysql：3306</li>
<li>http：80</li>
<li>https：443</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">&quot;8081&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;HTTP/1.1&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">connectionTimeout</span>=<span class="string">&quot;20000&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">redirectPort</span>=<span class="string">&quot;8443&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p>可以配置主机的名称</p>
<ul>
<li>默认的主机名为：localhost-&gt;127.0.0.1</li>
<li>默认网站应用存放的位置为：webapps</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Host</span> <span class="attr">name</span>=<span class="string">&quot;www.qinjiang.com&quot;</span>  <span class="attr">appBase</span>=<span class="string">&quot;webapps&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">unpackWARs</span>=<span class="string">&quot;true&quot;</span> <span class="attr">autoDeploy</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="高难度面试题："><a href="#高难度面试题：" class="headerlink" title="高难度面试题："></a>高难度面试题：</h4><p>请你谈谈网站是如何进行访问的！</p>
<ol>
<li><p>输入一个域名；回车</p>
</li>
<li><p>检查本机的 C:\Windows\System32\drivers\etc\hosts配置文件下有没有这个域名映射；</p>
<ol>
<li><p>有：直接返回对应的ip地址，这个地址中，有我们需要访问的web程序，可以直接访问</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>       www.qinjiang.com</span><br></pre></td></tr></table></figure>
</li>
<li><p>没有：去DNS服务器找，找到的话就返回，找不到就返回找不到；</p>
</li>
</ol>
<p><img src="/JavaWeb.assets/1567827057913.png" alt="1567827057913"></p>
</li>
<li><p>可以配置一下环境变量（可选性）</p>
</li>
</ol>
<h3 id="3-4、发布一个web网站"><a href="#3-4、发布一个web网站" class="headerlink" title="3.4、发布一个web网站"></a>3.4、发布一个web网站</h3><p>不会就先模仿</p>
<ul>
<li>将自己写的网站，放到服务器(Tomcat)中指定的web应用的文件夹（webapps）下，就可以访问了</li>
</ul>
<p>网站应该有的结构</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">--webapps ：Tomcat服务器的web目录</span><br><span class="line">	-ROOT</span><br><span class="line">	-kuangstudy ：网站的目录名</span><br><span class="line">		- WEB-INF</span><br><span class="line">			-classes : java程序</span><br><span class="line">			-lib：web应用所依赖的jar包</span><br><span class="line">			-web.xml ：网站配置文件</span><br><span class="line">		- index.html 默认的首页</span><br><span class="line">		- <span class="keyword">static</span> </span><br><span class="line">            -css</span><br><span class="line">            	-style.css</span><br><span class="line">            -js</span><br><span class="line">            -img</span><br><span class="line">         -.....</span><br></pre></td></tr></table></figure>



<p>HTTP协议 ： 面试</p>
<p>Maven：构建工具</p>
<ul>
<li>Maven安装包</li>
</ul>
<p>Servlet 入门</p>
<ul>
<li>HelloWorld！</li>
<li>Servlet配置</li>
<li>原理</li>
</ul>
<h2 id="4、Http"><a href="#4、Http" class="headerlink" title="4、Http"></a>4、Http</h2><h3 id="4-1、什么是HTTP"><a href="#4-1、什么是HTTP" class="headerlink" title="4.1、什么是HTTP"></a>4.1、什么是HTTP</h3><p>HTTP（超文本传输协议）是一个简单的请求-响应协议，它通常运行在TCP之上。</p>
<ul>
<li>文本：html，字符串，~ ….</li>
<li>超文本：图片，音乐，视频，定位，地图…….</li>
<li>80</li>
</ul>
<p>Https：安全的</p>
<ul>
<li>443</li>
</ul>
<h3 id="4-2、两个时代"><a href="#4-2、两个时代" class="headerlink" title="4.2、两个时代"></a>4.2、两个时代</h3><ul>
<li><p>http1.0</p>
<ul>
<li>HTTP&#x2F;1.0：客户端可以与web服务器连接后，只能获得一个web资源，断开连接</li>
</ul>
</li>
<li><p>http2.0</p>
<ul>
<li>HTTP&#x2F;1.1：客户端可以与web服务器连接后，可以获得多个web资源。‘</li>
</ul>
</li>
</ul>
<h3 id="4-3、Http请求"><a href="#4-3、Http请求" class="headerlink" title="4.3、Http请求"></a>4.3、Http请求</h3><ul>
<li>客户端—发请求（Request）—服务器</li>
</ul>
<p>百度：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Request URL:https:<span class="comment">//www.baidu.com/   请求地址</span></span><br><span class="line">Request Method:GET    get方法/post方法</span><br><span class="line">Status Code:<span class="number">200</span> OK    状态码：<span class="number">200</span></span><br><span class="line">Remote（远程） Address:<span class="number">14.215</span><span class="number">.177</span><span class="number">.39</span>:<span class="number">443</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Accept:text/html  </span><br><span class="line">Accept-Encoding:gzip, deflate, br</span><br><span class="line">Accept-Language:zh-CN,zh;q=<span class="number">0.9</span>    语言</span><br><span class="line">Cache-Control:max-age=<span class="number">0</span></span><br><span class="line">Connection:keep-alive</span><br></pre></td></tr></table></figure>

<h4 id="1、请求行"><a href="#1、请求行" class="headerlink" title="1、请求行"></a>1、请求行</h4><ul>
<li>请求行中的请求方式：GET</li>
<li>请求方式：<strong>Get，Post</strong>，HEAD,DELETE,PUT,TRACT…<ul>
<li>get：请求能够携带的参数比较少，大小有限制，会在浏览器的URL地址栏显示数据内容，不安全，但高效</li>
<li>post：请求能够携带的参数没有限制，大小没有限制，不会在浏览器的URL地址栏显示数据内容，安全，但不高效。</li>
</ul>
</li>
</ul>
<h4 id="2、消息头"><a href="#2、消息头" class="headerlink" title="2、消息头"></a>2、消息头</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Accept：告诉浏览器，它所支持的数据类型</span><br><span class="line">Accept-Encoding：支持哪种编码格式  GBK   UTF-<span class="number">8</span>   GB2312  ISO8859-<span class="number">1</span></span><br><span class="line">Accept-Language：告诉浏览器，它的语言环境</span><br><span class="line">Cache-Control：缓存控制</span><br><span class="line">Connection：告诉浏览器，请求完成是断开还是保持连接</span><br><span class="line">HOST：主机..../.</span><br></pre></td></tr></table></figure>

<h3 id="4-4、Http响应"><a href="#4-4、Http响应" class="headerlink" title="4.4、Http响应"></a>4.4、Http响应</h3><ul>
<li>服务器—响应—–客户端</li>
</ul>
<p>百度：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Cache-Control:<span class="keyword">private</span>    缓存控制</span><br><span class="line">Connection:Keep-Alive    连接</span><br><span class="line">Content-Encoding:gzip    编码</span><br><span class="line">Content-Type:text/html   类型</span><br></pre></td></tr></table></figure>

<h4 id="1-响应体"><a href="#1-响应体" class="headerlink" title="1.响应体"></a>1.响应体</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Accept：告诉浏览器，它所支持的数据类型</span><br><span class="line">Accept-Encoding：支持哪种编码格式  GBK   UTF-<span class="number">8</span>   GB2312  ISO8859-<span class="number">1</span></span><br><span class="line">Accept-Language：告诉浏览器，它的语言环境</span><br><span class="line">Cache-Control：缓存控制</span><br><span class="line">Connection：告诉浏览器，请求完成是断开还是保持连接</span><br><span class="line">HOST：主机..../.</span><br><span class="line">Refresh：告诉客户端，多久刷新一次；</span><br><span class="line">Location：让网页重新定位；</span><br></pre></td></tr></table></figure>

<h4 id="2、响应状态码"><a href="#2、响应状态码" class="headerlink" title="2、响应状态码"></a>2、响应状态码</h4><p>200：请求响应成功  200</p>
<p>3xx：请求重定向 </p>
<ul>
<li>重定向：你重新到我给你新位置去；</li>
</ul>
<p>4xx：找不到资源   404</p>
<ul>
<li>资源不存在；</li>
</ul>
<p>5xx：服务器代码错误   500       502:网关错误</p>
<p><strong>常见面试题：</strong></p>
<p>当你的浏览器中地址栏输入地址并回车的一瞬间到页面能够展示回来，经历了什么？</p>
<h2 id="5、Maven"><a href="#5、Maven" class="headerlink" title="5、Maven"></a>5、Maven</h2><p><strong>我为什么要学习这个技术？</strong></p>
<ol>
<li><p>在Javaweb开发中，需要使用大量的jar包，我们手动去导入；</p>
</li>
<li><p>如何能够让一个东西自动帮我导入和配置这个jar包。</p>
<p>由此，Maven诞生了！</p>
</li>
</ol>
<h3 id="5-1-Maven项目架构管理工具"><a href="#5-1-Maven项目架构管理工具" class="headerlink" title="5.1 Maven项目架构管理工具"></a>5.1 Maven项目架构管理工具</h3><p>我们目前用来就是方便导入jar包的！</p>
<p>Maven的核心思想：<strong>约定大于配置</strong></p>
<ul>
<li>有约束，不要去违反。</li>
</ul>
<p>Maven会规定好你该如何去编写我们的Java代码，必须要按照这个规范来；</p>
<h3 id="5-2-下载安装Maven"><a href="#5-2-下载安装Maven" class="headerlink" title="5.2 下载安装Maven"></a>5.2 下载安装Maven</h3><p>官网;<a href="https://maven.apache.org/">https://maven.apache.org/</a></p>
<p><img src="/JavaWeb.assets/1567842350606.png" alt="1567842350606"></p>
<p>下载完成后，解压即可；</p>
<p>小狂神友情建议：电脑上的所有环境都放在一个文件夹下，方便管理；</p>
<h3 id="5-3-配置环境变量"><a href="#5-3-配置环境变量" class="headerlink" title="5.3 配置环境变量"></a>5.3 配置环境变量</h3><p>在我们的系统环境变量中</p>
<p>配置如下配置：</p>
<ul>
<li>M2_HOME     maven目录下的bin目录</li>
<li>MAVEN_HOME      maven的目录</li>
<li>在系统的path中配置  %MAVEN_HOME%\bin</li>
</ul>
<p><img src="/JavaWeb.assets/1567842882993.png" alt="1567842882993"></p>
<p>测试Maven是否安装成功，保证必须配置完毕！</p>
<h3 id="5-4-阿里云镜像"><a href="#5-4-阿里云镜像" class="headerlink" title="5.4 阿里云镜像"></a>5.4 阿里云镜像</h3><p><img src="/JavaWeb.assets/1567844609399.png" alt="1567844609399"></p>
<ul>
<li>镜像：mirrors<ul>
<li>作用：加速我们的下载</li>
</ul>
</li>
<li>国内建议使用阿里云的镜像</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-aliyun<span class="tag">&lt;/<span class="name">id</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*,!jeecg,!jeecg-snapshots<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus aliyun<span class="tag">&lt;/<span class="name">name</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="5-5-本地仓库"><a href="#5-5-本地仓库" class="headerlink" title="5.5 本地仓库"></a>5.5 本地仓库</h3><p>在本地的仓库，远程仓库；</p>
<p><strong>建立一个本地仓库：</strong>localRepository</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>D:\Environment\apache-maven-3.6.2\maven-repo<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="5-6、在IDEA中使用Maven"><a href="#5-6、在IDEA中使用Maven" class="headerlink" title="5.6、在IDEA中使用Maven"></a>5.6、在IDEA中使用Maven</h3><ol>
<li><p>启动IDEA</p>
</li>
<li><p>创建一个MavenWeb项目</p>
<p><img src="/JavaWeb.assets/1567844785602.png" alt="1567844785602"></p>
<p><img src="/JavaWeb.assets/1567844841172.png" alt="1567844841172"></p>
<p><img src="/JavaWeb.assets/1567844917185.png" alt="1567844917185"></p>
<p><img src="/JavaWeb.assets/1567844956177.png" alt="1567844956177"></p>
<p><img src="/JavaWeb.assets/1567845029864.png" alt="1567845029864"></p>
</li>
<li><p>等待项目初始化完毕</p>
<p><img src="/JavaWeb.assets/1567845105970.png" alt="1567845105970"></p>
<p><img src="/JavaWeb.assets/1567845137978.png" alt="1567845137978"></p>
</li>
<li><p>观察maven仓库中多了什么东西？</p>
</li>
<li><p>IDEA中的Maven设置</p>
<p>注意：IDEA项目创建成功后，看一眼Maven的配置</p>
<p><img src="/JavaWeb.assets/1567845341956.png" alt="1567845341956"></p>
<p><img src="/JavaWeb.assets/1567845413672.png" alt="1567845413672"></p>
</li>
<li><p>到这里，Maven在IDEA中的配置和使用就OK了!</p>
</li>
</ol>
<h3 id="5-7、创建一个普通的Maven项目"><a href="#5-7、创建一个普通的Maven项目" class="headerlink" title="5.7、创建一个普通的Maven项目"></a>5.7、创建一个普通的Maven项目</h3><p><img src="/JavaWeb.assets/1567845557744.png" alt="1567845557744"></p>
<p><img src="/JavaWeb.assets/1567845717377.png" alt="1567845717377"></p>
<p>这个只有在Web应用下才会有！</p>
<p><img src="/JavaWeb.assets/1567845782034.png" alt="1567845782034"></p>
<h3 id="5-8-标记文件夹功能"><a href="#5-8-标记文件夹功能" class="headerlink" title="5.8 标记文件夹功能"></a>5.8 标记文件夹功能</h3><p><img src="/JavaWeb.assets/1567845910728.png" alt="1567845910728"></p>
<p><img src="/JavaWeb.assets/1567845957139.png" alt="1567845957139"></p>
<p><img src="/JavaWeb.assets/1567846034906.png" alt="1567846034906"></p>
<p><img src="/JavaWeb.assets/1567846073511.png" alt="1567846073511"></p>
<h3 id="5-9-在-IDEA中配置Tomcat"><a href="#5-9-在-IDEA中配置Tomcat" class="headerlink" title="5.9 在 IDEA中配置Tomcat"></a>5.9 在 IDEA中配置Tomcat</h3><p><img src="/JavaWeb.assets/1567846140348.png" alt="1567846140348"></p>
<p><img src="/JavaWeb.assets/1567846179573.png" alt="1567846179573"></p>
<p><img src="/JavaWeb.assets/1567846234175.png" alt="1567846234175"></p>
<p><img src="/JavaWeb.assets/1567846369751.png" alt="1567846369751"></p>
<p>解决警告问题</p>
<p>必须要的配置：<strong>为什么会有这个问题：我们访问一个网站，需要指定一个文件夹名字；</strong></p>
<p><img src="/JavaWeb.assets/1567846421963.png" alt="1567846421963"></p>
<p><img src="/JavaWeb.assets/1567846546465.png" alt="1567846546465"></p>
<p><img src="/JavaWeb.assets/1567846559111.png" alt="1567846559111"></p>
<p><img src="/JavaWeb.assets/1567846640372.png" alt="1567846640372"></p>
<h3 id="5-10-pom文件"><a href="#5-10-pom文件" class="headerlink" title="5.10 pom文件"></a>5.10 pom文件</h3><p>pom.xml 是Maven的核心配置文件</p>
<p><img src="/JavaWeb.assets/1567846784849.png" alt="1567846784849"></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--Maven版本和头文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--这里就是我们刚才配置的GAV--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.kuang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javaweb-01-maven<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--Package：项目的打包方式</span></span><br><span class="line"><span class="comment">  jar：java应用</span></span><br><span class="line"><span class="comment">  war：JavaWeb应用</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--配置--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--项目的默认构建编码--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--编码版本--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--项目依赖--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--具体依赖的jar包配置文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--项目构建用的东西--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>javaweb-01-maven<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pluginManagement</span>&gt;</span><span class="comment">&lt;!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-clean-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- see http://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_war_packaging --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-resources-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.22.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-war-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-install-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-deploy-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/JavaWeb.assets/1567847410771.png" alt="1567847410771"></p>
<p>maven由于他的约定大于配置，我们之后可以能遇到我们写的配置文件，无法被导出或者生效的问题，解决方案：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--在build中配置resources，来防止我们资源导出失败的问题--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="5-12-IDEA操作"><a href="#5-12-IDEA操作" class="headerlink" title="5.12 IDEA操作"></a>5.12 IDEA操作</h3><p><img src="/JavaWeb.assets/1567847630808.png" alt="1567847630808"></p>
<p><img src="/JavaWeb.assets/1567847662429.png" alt="1567847662429"></p>
<h3 id="5-13-解决遇到的问题"><a href="#5-13-解决遇到的问题" class="headerlink" title="5.13 解决遇到的问题"></a>5.13 解决遇到的问题</h3><ol>
<li><p>Maven 3.6.2</p>
<p>解决方法：降级为3.6.1</p>
<p><img src="/JavaWeb.assets/1567904721301.png" alt="1567904721301"></p>
</li>
<li><p>Tomcat闪退</p>
</li>
<li><p>IDEA中每次都要重复配置Maven<br>在IDEA中的全局默认配置中去配置</p>
<p><img src="/JavaWeb.assets/1567905247201.png" alt="1567905247201"></p>
<p><img src="/JavaWeb.assets/1567905291002.png" alt="1567905291002"></p>
</li>
<li><p>Maven项目中Tomcat无法配置</p>
</li>
<li><p>maven默认web项目中的web.xml版本问题</p>
<p><img src="/JavaWeb.assets/1567905537026.png" alt="1567905537026"></p>
</li>
<li><p>替换为webapp4.0版本和tomcat一致</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee</span></span></span><br><span class="line"><span class="string"><span class="tag">                      http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">metadata-complete</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>


</li>
<li><p>Maven仓库的使用</p>
<p>地址：<a href="https://mvnrepository.com/">https://mvnrepository.com/</a></p>
<p><img src="/JavaWeb.assets/1567905870750.png" alt="1567905870750"></p>
<p><img src="/JavaWeb.assets/1567905982979.png" alt="1567905982979"></p>
<p><img src="/JavaWeb.assets/1567906017448.png" alt="1567906017448"></p>
<p><img src="/JavaWeb.assets/1567906039469.png" alt="1567906039469"></p>
</li>
</ol>
<h2 id="6、Servlet"><a href="#6、Servlet" class="headerlink" title="6、Servlet"></a>6、Servlet</h2><h3 id="6-1、Servlet简介"><a href="#6-1、Servlet简介" class="headerlink" title="6.1、Servlet简介"></a>6.1、Servlet简介</h3><ul>
<li>Servlet就是sun公司开发动态web的一门技术</li>
<li>Sun在这些API中提供一个接口叫做：Servlet，如果你想开发一个Servlet程序，只需要完成两个小步骤：<ul>
<li>编写一个类，实现Servlet接口</li>
<li>把开发好的Java类部署到web服务器中。</li>
</ul>
</li>
</ul>
<p><strong>把实现了Servlet接口的Java程序叫做，Servlet</strong></p>
<h3 id="6-2、HelloServlet"><a href="#6-2、HelloServlet" class="headerlink" title="6.2、HelloServlet"></a>6.2、HelloServlet</h3><p>Serlvet接口Sun公司有两个默认的实现类：HttpServlet，GenericServlet</p>
<ol>
<li><p>构建一个普通的Maven项目，删掉里面的src目录，以后我们的学习就在这个项目里面建立Moudel；这个空的工程就是Maven主工程；</p>
</li>
<li><p>关于Maven父子工程的理解：</p>
<p>父项目中会有</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>servlet-01<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>子项目会有</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javaweb-02-servlet<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.kuang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>父项目中的java子项目可以直接使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">son <span class="keyword">extends</span> <span class="title class_">father</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Maven环境优化</p>
<ol>
<li>修改web.xml为最新的</li>
<li>将maven的结构搭建完整</li>
</ol>
</li>
<li><p>编写一个Servlet程序</p>
<p><img src="/JavaWeb.assets/1567911804700.png" alt="1567911804700"></p>
<ol>
<li><p>编写一个普通类</p>
</li>
<li><p>实现Servlet接口，这里我们直接继承HttpServlet</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//由于get或者post只是请求实现的不同的方式，可以相互调用，业务逻辑都一样；</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//ServletOutputStream outputStream = resp.getOutputStream();</span></span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> resp.getWriter(); <span class="comment">//响应流</span></span><br><span class="line">        writer.print(<span class="string">&quot;Hello,Serlvet&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>编写Servlet的映射</p>
<p>为什么需要映射：我们写的是JAVA程序，但是要通过浏览器访问，而浏览器需要连接web服务器，所以我们需要再web服务中注册我们写的Servlet，还需给他一个浏览器能够访问的路径；</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">   </span><br><span class="line"><span class="comment">&lt;!--注册Servlet--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.kuang.servlet.HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Servlet的请求路径--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">   </span><br></pre></td></tr></table></figure>


</li>
<li><p>配置Tomcat</p>
<p>注意：配置项目发布的路径就可以了</p>
</li>
<li><p>启动测试，OK！</p>
</li>
</ol>
<h3 id="6-3、Servlet原理"><a href="#6-3、Servlet原理" class="headerlink" title="6.3、Servlet原理"></a>6.3、Servlet原理</h3><p>Servlet是由Web服务器调用，web服务器在收到浏览器请求之后，会：</p>
<p><img src="/JavaWeb.assets/1567913793252.png" alt="1567913793252"></p>
<h3 id="6-4、Mapping问题"><a href="#6-4、Mapping问题" class="headerlink" title="6.4、Mapping问题"></a>6.4、Mapping问题</h3><ol>
<li><p>一个Servlet可以指定一个映射路径</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>一个Servlet可以指定多个映射路径</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello2<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello3<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello4<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello5<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">   </span><br></pre></td></tr></table></figure>
</li>
<li><p>一个Servlet可以指定通用映射路径</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>默认请求路径</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--默认请求路径--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>指定一些后缀或者前缀等等….</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">&lt;!--可以自定义后缀实现请求映射</span></span><br><span class="line"><span class="comment">    注意点，*前面不能加项目映射的路径</span></span><br><span class="line"><span class="comment">    hello/sajdlkajda.qinjiang</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.qinjiang<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>优先级问题<br>指定了固有的映射路径优先级最高，如果找不到就会走默认的处理请求；</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--404--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>error<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.kuang.servlet.ErrorServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>error<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="6-5、ServletContext"><a href="#6-5、ServletContext" class="headerlink" title="6.5、ServletContext"></a>6.5、ServletContext</h3><p>web容器在启动的时候，它会为每个web程序都创建一个对应的ServletContext对象，它代表了当前的web应用；</p>
<h4 id="1、共享数据"><a href="#1、共享数据" class="headerlink" title="1、共享数据"></a>1、共享数据</h4><p>我在这个Servlet中保存的数据，可以在另外一个servlet中拿到；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//this.getInitParameter()   初始化参数</span></span><br><span class="line">        <span class="comment">//this.getServletConfig()   Servlet配置</span></span><br><span class="line">        <span class="comment">//this.getServletContext()  Servlet上下文</span></span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="built_in">this</span>.getServletContext();</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;秦疆&quot;</span>; <span class="comment">//数据</span></span><br><span class="line">        context.setAttribute(<span class="string">&quot;username&quot;</span>,username); <span class="comment">//将一个数据保存在了ServletContext中，名字为：username 。值 username</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GetServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="built_in">this</span>.getServletContext();</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> (String) context.getAttribute(<span class="string">&quot;username&quot;</span>);</span><br><span class="line"></span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/html&quot;</span>);</span><br><span class="line">        resp.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        resp.getWriter().print(<span class="string">&quot;名字&quot;</span>+username);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.kuang.servlet.HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>getc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.kuang.servlet.GetServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>getc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/getc<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>测试访问结果；</p>
<h4 id="2、获取初始化参数"><a href="#2、获取初始化参数" class="headerlink" title="2、获取初始化参数"></a>2、获取初始化参数</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置一些web应用初始化参数--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>url<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>jdbc:mysql://localhost:3306/mybatis<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">    <span class="type">ServletContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="built_in">this</span>.getServletContext();</span><br><span class="line">    <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> context.getInitParameter(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">    resp.getWriter().print(url);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3、请求转发"><a href="#3、请求转发" class="headerlink" title="3、请求转发"></a>3、请求转发</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">    <span class="type">ServletContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="built_in">this</span>.getServletContext();</span><br><span class="line">    System.out.println(<span class="string">&quot;进入了ServletDemo04&quot;</span>);</span><br><span class="line">    <span class="comment">//RequestDispatcher requestDispatcher = context.getRequestDispatcher(&quot;/gp&quot;); //转发的请求路径</span></span><br><span class="line">    <span class="comment">//requestDispatcher.forward(req,resp); //调用forward实现请求转发；</span></span><br><span class="line">    context.getRequestDispatcher(<span class="string">&quot;/gp&quot;</span>).forward(req,resp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/JavaWeb.assets/1567924457532.png" alt="1567924457532"></p>
<h4 id="4、读取资源文件"><a href="#4、读取资源文件" class="headerlink" title="4、读取资源文件"></a>4、读取资源文件</h4><p>Properties</p>
<ul>
<li>在java目录下新建properties</li>
<li>在resources目录下新建properties</li>
</ul>
<p>发现：都被打包到了同一个路径下：classes，我们俗称这个路径为classpath:</p>
<p>思路：需要一个文件流；</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">username</span>=<span class="string">root12312</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">zxczxczxc</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletDemo05</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="built_in">this</span>.getServletContext().getResourceAsStream(<span class="string">&quot;/WEB-INF/classes/com/kuang/servlet/aa.properties&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">prop</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        prop.load(is);</span><br><span class="line">        <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> prop.getProperty(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">pwd</span> <span class="operator">=</span> prop.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line"></span><br><span class="line">        resp.getWriter().print(user+<span class="string">&quot;:&quot;</span>+pwd);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>访问测试即可ok；</p>
<h3 id="6-6、HttpServletResponse"><a href="#6-6、HttpServletResponse" class="headerlink" title="6.6、HttpServletResponse"></a>6.6、HttpServletResponse</h3><p>web服务器接收到客户端的http请求，针对这个请求，分别创建一个代表请求的HttpServletRequest对象，代表响应的一个HttpServletResponse；</p>
<ul>
<li>如果要获取客户端请求过来的参数：找HttpServletRequest</li>
<li>如果要给客户端响应一些信息：找HttpServletResponse</li>
</ul>
<h4 id="1、简单分类"><a href="#1、简单分类" class="headerlink" title="1、简单分类"></a>1、简单分类</h4><p>负责向浏览器发送数据的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ServletOutputStream <span class="title function_">getOutputStream</span><span class="params">()</span> <span class="keyword">throws</span> IOException;</span><br><span class="line">PrintWriter <span class="title function_">getWriter</span><span class="params">()</span> <span class="keyword">throws</span> IOException;</span><br></pre></td></tr></table></figure>

<p>负责向浏览器发送响应头的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">setCharacterEncoding</span><span class="params">(String var1)</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">setContentLength</span><span class="params">(<span class="type">int</span> var1)</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">setContentLengthLong</span><span class="params">(<span class="type">long</span> var1)</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">setContentType</span><span class="params">(String var1)</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">setDateHeader</span><span class="params">(String var1, <span class="type">long</span> var2)</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">addDateHeader</span><span class="params">(String var1, <span class="type">long</span> var2)</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">setHeader</span><span class="params">(String var1, String var2)</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">addHeader</span><span class="params">(String var1, String var2)</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">setIntHeader</span><span class="params">(String var1, <span class="type">int</span> var2)</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">addIntHeader</span><span class="params">(String var1, <span class="type">int</span> var2)</span>;</span><br></pre></td></tr></table></figure>

<p>响应的状态码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">SC_CONTINUE</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">SC_SWITCHING_PROTOCOLS</span> <span class="operator">=</span> <span class="number">101</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">SC_OK</span> <span class="operator">=</span> <span class="number">200</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">SC_CREATED</span> <span class="operator">=</span> <span class="number">201</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">SC_ACCEPTED</span> <span class="operator">=</span> <span class="number">202</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">SC_NON_AUTHORITATIVE_INFORMATION</span> <span class="operator">=</span> <span class="number">203</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">SC_NO_CONTENT</span> <span class="operator">=</span> <span class="number">204</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">SC_RESET_CONTENT</span> <span class="operator">=</span> <span class="number">205</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">SC_PARTIAL_CONTENT</span> <span class="operator">=</span> <span class="number">206</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">SC_MULTIPLE_CHOICES</span> <span class="operator">=</span> <span class="number">300</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">SC_MOVED_PERMANENTLY</span> <span class="operator">=</span> <span class="number">301</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">SC_MOVED_TEMPORARILY</span> <span class="operator">=</span> <span class="number">302</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">SC_FOUND</span> <span class="operator">=</span> <span class="number">302</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">SC_SEE_OTHER</span> <span class="operator">=</span> <span class="number">303</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">SC_NOT_MODIFIED</span> <span class="operator">=</span> <span class="number">304</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">SC_USE_PROXY</span> <span class="operator">=</span> <span class="number">305</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">SC_TEMPORARY_REDIRECT</span> <span class="operator">=</span> <span class="number">307</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">SC_BAD_REQUEST</span> <span class="operator">=</span> <span class="number">400</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">SC_UNAUTHORIZED</span> <span class="operator">=</span> <span class="number">401</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">SC_PAYMENT_REQUIRED</span> <span class="operator">=</span> <span class="number">402</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">SC_FORBIDDEN</span> <span class="operator">=</span> <span class="number">403</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">SC_NOT_FOUND</span> <span class="operator">=</span> <span class="number">404</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">SC_METHOD_NOT_ALLOWED</span> <span class="operator">=</span> <span class="number">405</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">SC_NOT_ACCEPTABLE</span> <span class="operator">=</span> <span class="number">406</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">SC_PROXY_AUTHENTICATION_REQUIRED</span> <span class="operator">=</span> <span class="number">407</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">SC_REQUEST_TIMEOUT</span> <span class="operator">=</span> <span class="number">408</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">SC_CONFLICT</span> <span class="operator">=</span> <span class="number">409</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">SC_GONE</span> <span class="operator">=</span> <span class="number">410</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">SC_LENGTH_REQUIRED</span> <span class="operator">=</span> <span class="number">411</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">SC_PRECONDITION_FAILED</span> <span class="operator">=</span> <span class="number">412</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">SC_REQUEST_ENTITY_TOO_LARGE</span> <span class="operator">=</span> <span class="number">413</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">SC_REQUEST_URI_TOO_LONG</span> <span class="operator">=</span> <span class="number">414</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">SC_UNSUPPORTED_MEDIA_TYPE</span> <span class="operator">=</span> <span class="number">415</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">SC_REQUESTED_RANGE_NOT_SATISFIABLE</span> <span class="operator">=</span> <span class="number">416</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">SC_EXPECTATION_FAILED</span> <span class="operator">=</span> <span class="number">417</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">SC_INTERNAL_SERVER_ERROR</span> <span class="operator">=</span> <span class="number">500</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">SC_NOT_IMPLEMENTED</span> <span class="operator">=</span> <span class="number">501</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">SC_BAD_GATEWAY</span> <span class="operator">=</span> <span class="number">502</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">SC_SERVICE_UNAVAILABLE</span> <span class="operator">=</span> <span class="number">503</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">SC_GATEWAY_TIMEOUT</span> <span class="operator">=</span> <span class="number">504</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">SC_HTTP_VERSION_NOT_SUPPORTED</span> <span class="operator">=</span> <span class="number">505</span>;</span><br></pre></td></tr></table></figure>

<h4 id="2、下载文件"><a href="#2、下载文件" class="headerlink" title="2、下载文件"></a>2、下载文件</h4><ol>
<li>向浏览器输出消息 （一直在讲，就不说了）</li>
<li>下载文件<ol>
<li>要获取下载文件的路径</li>
<li>下载的文件名是啥？</li>
<li>设置想办法让浏览器能够支持下载我们需要的东西</li>
<li>获取下载文件的输入流</li>
<li>创建缓冲区</li>
<li>获取OutputStream对象</li>
<li>将FileOutputStream流写入到buffer缓冲区</li>
<li>使用OutputStream将缓冲区中的数据输出到客户端！</li>
</ol>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">    <span class="comment">// 1. 要获取下载文件的路径</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">realPath</span> <span class="operator">=</span> <span class="string">&quot;F:\\班级管理\\西开【19525】\\2、代码\\JavaWeb\\javaweb-02-servlet\\response\\target\\classes\\秦疆.png&quot;</span>;</span><br><span class="line">    System.out.println(<span class="string">&quot;下载文件的路径：&quot;</span>+realPath);</span><br><span class="line">    <span class="comment">// 2. 下载的文件名是啥？</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> realPath.substring(realPath.lastIndexOf(<span class="string">&quot;\\&quot;</span>) + <span class="number">1</span>);</span><br><span class="line">    <span class="comment">// 3. 设置想办法让浏览器能够支持(Content-Disposition)下载我们需要的东西,中文文件名URLEncoder.encode编码，否则有可能乱码</span></span><br><span class="line">    resp.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>,<span class="string">&quot;attachment;filename=&quot;</span>+URLEncoder.encode(fileName,<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">    <span class="comment">// 4. 获取下载文件的输入流</span></span><br><span class="line">    <span class="type">FileInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(realPath);</span><br><span class="line">    <span class="comment">// 5. 创建缓冲区</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">    <span class="comment">// 6. 获取OutputStream对象</span></span><br><span class="line">    <span class="type">ServletOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> resp.getOutputStream();</span><br><span class="line">    <span class="comment">// 7. 将FileOutputStream流写入到buffer缓冲区,使用OutputStream将缓冲区中的数据输出到客户端！</span></span><br><span class="line">    <span class="keyword">while</span> ((len=in.read(buffer))&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        out.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    in.close();</span><br><span class="line">    out.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3、验证码功能"><a href="#3、验证码功能" class="headerlink" title="3、验证码功能"></a>3、验证码功能</h4><p>验证怎么来的？</p>
<ul>
<li>前端实现</li>
<li>后端实现，需要用到 Java 的图片类，生产一个图片</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuang.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.imageio.ImageIO;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.image.BufferedImage;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ImageServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如何让浏览器3秒自动刷新一次;</span></span><br><span class="line">        resp.setHeader(<span class="string">&quot;refresh&quot;</span>,<span class="string">&quot;3&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//在内存中创建一个图片</span></span><br><span class="line">        <span class="type">BufferedImage</span> <span class="variable">image</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedImage</span>(<span class="number">80</span>,<span class="number">20</span>,BufferedImage.TYPE_INT_RGB);</span><br><span class="line">        <span class="comment">//得到图片</span></span><br><span class="line">        <span class="type">Graphics2D</span> <span class="variable">g</span> <span class="operator">=</span> (Graphics2D) image.getGraphics(); <span class="comment">//笔</span></span><br><span class="line">        <span class="comment">//设置图片的背景颜色</span></span><br><span class="line">        g.setColor(Color.white);</span><br><span class="line">        g.fillRect(<span class="number">0</span>,<span class="number">0</span>,<span class="number">80</span>,<span class="number">20</span>);</span><br><span class="line">        <span class="comment">//给图片写数据</span></span><br><span class="line">        g.setColor(Color.BLUE);</span><br><span class="line">        g.setFont(<span class="keyword">new</span> <span class="title class_">Font</span>(<span class="literal">null</span>,Font.BOLD,<span class="number">20</span>));</span><br><span class="line">        g.drawString(makeNum(),<span class="number">0</span>,<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//告诉浏览器，这个请求用图片的方式打开</span></span><br><span class="line">        resp.setContentType(<span class="string">&quot;image/jpeg&quot;</span>);</span><br><span class="line">        <span class="comment">//网站存在缓存，不让浏览器缓存</span></span><br><span class="line">        resp.setDateHeader(<span class="string">&quot;expires&quot;</span>,-<span class="number">1</span>);</span><br><span class="line">        resp.setHeader(<span class="string">&quot;Cache-Control&quot;</span>,<span class="string">&quot;no-cache&quot;</span>);</span><br><span class="line">        resp.setHeader(<span class="string">&quot;Pragma&quot;</span>,<span class="string">&quot;no-cache&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把图片写给浏览器</span></span><br><span class="line">        ImageIO.write(image,<span class="string">&quot;jpg&quot;</span>, resp.getOutputStream());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//生成随机数</span></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">makeNum</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">num</span> <span class="operator">=</span> random.nextInt(<span class="number">9999999</span>) + <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">7</span>-num.length() ; i++) &#123;</span><br><span class="line">            sb.append(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        num = sb.toString() + num;</span><br><span class="line">        <span class="keyword">return</span> num;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="4、实现重定向"><a href="#4、实现重定向" class="headerlink" title="4、实现重定向"></a>4、实现重定向</h4><p><img src="/JavaWeb.assets/1567931587955.png" alt="1567931587955"></p>
<p>B一个web资源收到客户端A请求后，B他会通知A客户端去访问另外一个web资源C，这个过程叫重定向</p>
<p>常见场景：</p>
<ul>
<li>用户登录</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">sendRedirect</span><span class="params">(String var1)</span> <span class="keyword">throws</span> IOException;</span><br></pre></td></tr></table></figure>

<p>测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        resp.setHeader(&quot;Location&quot;,&quot;/r/img&quot;);</span></span><br><span class="line"><span class="comment">        resp.setStatus(302);</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    resp.sendRedirect(<span class="string">&quot;/r/img&quot;</span>);<span class="comment">//重定向</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>面试题：请你聊聊重定向和转发的区别？</p>
<p>相同点</p>
<ul>
<li>页面都会实现跳转</li>
</ul>
<p>不同点</p>
<ul>
<li>请求转发的时候，url不会产生变化</li>
<li>重定向时候，url地址栏会发生变化；</li>
</ul>
<p><img src="/JavaWeb.assets/1567932163430.png" alt="1567932163430"></p>
<h4 id="5、简单实现登录重定向"><a href="#5、简单实现登录重定向" class="headerlink" title="5、简单实现登录重定向"></a>5、简单实现登录重定向</h4><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%--这里提交的路径，需要寻找到项目的路径--%&gt;</span><br><span class="line">&lt;%--$&#123;pageContext.request.contextPath&#125;代表当前的项目--%&gt;</span><br><span class="line"></span><br><span class="line">&lt;form action=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/login&quot;</span> method=<span class="string">&quot;get&quot;</span>&gt;</span><br><span class="line">    用户名：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;username&quot;</span>&gt; &lt;br&gt;</span><br><span class="line">    密码：&lt;input type=<span class="string">&quot;password&quot;</span> name=<span class="string">&quot;password&quot;</span>&gt; &lt;br&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">    <span class="comment">//处理请求</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(username+<span class="string">&quot;:&quot;</span>+password);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重定向时候一定要注意，路径问题，否则404；</span></span><br><span class="line">    resp.sendRedirect(<span class="string">&quot;/r/success.jsp&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>requset<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.kuang.servlet.RequestTest<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>requset<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/login<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;Success&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="6-7、HttpServletRequest"><a href="#6-7、HttpServletRequest" class="headerlink" title="6.7、HttpServletRequest"></a>6.7、HttpServletRequest</h3><p>HttpServletRequest代表客户端的请求，用户通过Http协议访问服务器，HTTP请求中的所有信息会被封装到HttpServletRequest，通过这个HttpServletRequest的方法，获得客户端的所有信息；</p>
<p><img src="/JavaWeb.assets/1567933996830.png" alt="1567933996830"></p>
<p><img src="/JavaWeb.assets/1567934023106.png" alt="1567934023106"></p>
<h4 id="获取参数，请求转发"><a href="#获取参数，请求转发" class="headerlink" title="获取参数，请求转发"></a>获取参数，请求转发</h4><p><img src="/JavaWeb.assets/1567934110794.png" alt="1567934110794"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">    req.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">    resp.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">    String[] hobbys = req.getParameterValues(<span class="string">&quot;hobbys&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;=============================&quot;</span>);</span><br><span class="line">    <span class="comment">//后台接收中文乱码问题</span></span><br><span class="line">    System.out.println(username);</span><br><span class="line">    System.out.println(password);</span><br><span class="line">    System.out.println(Arrays.toString(hobbys));</span><br><span class="line">    System.out.println(<span class="string">&quot;=============================&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    System.out.println(req.getContextPath());</span><br><span class="line">    <span class="comment">//通过请求转发</span></span><br><span class="line">    <span class="comment">//这里的 / 代表当前的web应用</span></span><br><span class="line">    req.getRequestDispatcher(<span class="string">&quot;/success.jsp&quot;</span>).forward(req,resp);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>面试题：请你聊聊重定向和转发的区别？</strong></p>
<p>相同点</p>
<ul>
<li>页面都会实现跳转</li>
</ul>
<p>不同点</p>
<ul>
<li>请求转发的时候，url不会产生变化   307</li>
<li>重定向时候，url地址栏会发生变化； 302</li>
</ul>
<h2 id="7、Cookie、Session"><a href="#7、Cookie、Session" class="headerlink" title="7、Cookie、Session"></a>7、Cookie、Session</h2><h3 id="7-1、会话"><a href="#7-1、会话" class="headerlink" title="7.1、会话"></a>7.1、会话</h3><p><strong>会话</strong>：用户打开一个浏览器，点击了很多超链接，访问多个web资源，关闭浏览器，这个过程可以称之为会话；</p>
<p><strong>有状态会话</strong>：一个同学来过教室，下次再来教室，我们会知道这个同学，曾经来过，称之为有状态会话；</p>
<p><strong>你能怎么证明你是西开的学生？</strong></p>
<p>你              西开</p>
<ol>
<li>发票                西开给你发票</li>
<li>学校登记        西开标记你来过了</li>
</ol>
<p><strong>一个网站，怎么证明你来过？</strong></p>
<p>客户端              服务端</p>
<ol>
<li>服务端给客户端一个 信件，客户端下次访问服务端带上信件就可以了； cookie</li>
<li>服务器登记你来过了，下次你来的时候我来匹配你； seesion</li>
</ol>
<h3 id="7-2、保存会话的两种技术"><a href="#7-2、保存会话的两种技术" class="headerlink" title="7.2、保存会话的两种技术"></a>7.2、保存会话的两种技术</h3><p><strong>cookie</strong></p>
<ul>
<li>客户端技术   （响应，请求）</li>
</ul>
<p><strong>session</strong></p>
<ul>
<li>服务器技术，利用这个技术，可以保存用户的会话信息？ 我们可以把信息或者数据放在Session中！</li>
</ul>
<p>常见常见：网站登录之后，你下次不用再登录了，第二次访问直接就上去了！</p>
<h3 id="7-3、Cookie"><a href="#7-3、Cookie" class="headerlink" title="7.3、Cookie"></a>7.3、Cookie</h3><p><img src="/JavaWeb.assets/1568344447291.png" alt="1568344447291"></p>
<ol>
<li>从请求中拿到cookie信息</li>
<li>服务器响应给客户端cookie</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Cookie[] cookies = req.getCookies(); <span class="comment">//获得Cookie</span></span><br><span class="line">cookie.getName(); <span class="comment">//获得cookie中的key</span></span><br><span class="line">cookie.getValue(); <span class="comment">//获得cookie中的vlaue</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;lastLoginTime&quot;</span>, System.currentTimeMillis()+<span class="string">&quot;&quot;</span>); <span class="comment">//新建一个cookie</span></span><br><span class="line">cookie.setMaxAge(<span class="number">24</span>*<span class="number">60</span>*<span class="number">60</span>); <span class="comment">//设置cookie的有效期</span></span><br><span class="line">resp.addCookie(cookie); <span class="comment">//响应给客户端一个cookie</span></span><br></pre></td></tr></table></figure>

<p><strong>cookie：一般会保存在本地的 用户目录下 appdata；</strong></p>
<p>一个网站cookie是否存在上限！<strong>聊聊细节问题</strong></p>
<ul>
<li>一个Cookie只能保存一个信息；</li>
<li>一个web站点可以给浏览器发送多个cookie，最多存放20个cookie；</li>
<li>Cookie大小有限制4kb；</li>
<li>300个cookie浏览器上限</li>
</ul>
<p><strong>删除Cookie；</strong></p>
<ul>
<li>不设置有效期，关闭浏览器，自动失效；</li>
<li>设置有效期时间为 0 ；</li>
</ul>
<p><strong>编码解码：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">URLEncoder.encode(<span class="string">&quot;秦疆&quot;</span>,<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">URLDecoder.decode(cookie.getValue(),<span class="string">&quot;UTF-8&quot;</span>)</span><br></pre></td></tr></table></figure>



<h3 id="7-4、Session（重点）"><a href="#7-4、Session（重点）" class="headerlink" title="7.4、Session（重点）"></a>7.4、Session（重点）</h3><p><img src="/JavaWeb.assets/1568344560794.png" alt="1568344560794"></p>
<p>什么是Session：</p>
<ul>
<li>服务器会给每一个用户（浏览器）创建一个Seesion对象；</li>
<li>一个Seesion独占一个浏览器，只要浏览器没有关闭，这个Session就存在；</li>
<li>用户登录之后，整个网站它都可以访问！–&gt; 保存用户的信息；保存购物车的信息…..</li>
</ul>
<p><img src="/JavaWeb.assets/1568342773861.png" alt="1568342773861"></p>
<p>Session和cookie的区别：</p>
<ul>
<li>Cookie是把用户的数据写给用户的浏览器，浏览器保存 （可以保存多个）</li>
<li>Session把用户的数据写到用户独占Session中，服务器端保存  （保存重要的信息，减少服务器资源的浪费）</li>
<li>Session对象由服务创建；</li>
</ul>
<p>使用场景：</p>
<ul>
<li>保存一个登录用户的信息；</li>
<li>购物车信息；</li>
<li>在整个网站中经常会使用的数据，我们将它保存在Session中；</li>
</ul>
<p>使用Session：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuang.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.kuang.pojo.Person;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SessionDemo01</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//解决乱码问题</span></span><br><span class="line">        req.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        resp.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//得到Session</span></span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> req.getSession();</span><br><span class="line">        <span class="comment">//给Session中存东西</span></span><br><span class="line">        session.setAttribute(<span class="string">&quot;name&quot;</span>,<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;秦疆&quot;</span>,<span class="number">1</span>));</span><br><span class="line">        <span class="comment">//获取Session的ID</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sessionId</span> <span class="operator">=</span> session.getId();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断Session是不是新创建</span></span><br><span class="line">        <span class="keyword">if</span> (session.isNew())&#123;</span><br><span class="line">            resp.getWriter().write(<span class="string">&quot;session创建成功,ID:&quot;</span>+sessionId);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            resp.getWriter().write(<span class="string">&quot;session以及在服务器中存在了,ID:&quot;</span>+sessionId);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Session创建的时候做了什么事情；</span></span><br><span class="line"><span class="comment">//        Cookie cookie = new Cookie(&quot;JSESSIONID&quot;,sessionId);</span></span><br><span class="line"><span class="comment">//        resp.addCookie(cookie);</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//得到Session</span></span><br><span class="line"><span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> req.getSession();</span><br><span class="line"></span><br><span class="line"><span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> (Person) session.getAttribute(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(person.toString());</span><br><span class="line"></span><br><span class="line"><span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> req.getSession();</span><br><span class="line">session.removeAttribute(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"><span class="comment">//手动注销Session</span></span><br><span class="line">session.invalidate();</span><br></pre></td></tr></table></figure>



<p><strong>会话自动过期：web.xml配置</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--设置Session默认的失效时间--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">session-config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--15分钟后Session自动失效，以分钟为单位--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span>15<span class="tag">&lt;/<span class="name">session-timeout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">session-config</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><img src="/JavaWeb.assets/1568344679763.png" alt="1568344679763"></p>
<h2 id="8、JSP"><a href="#8、JSP" class="headerlink" title="8、JSP"></a>8、JSP</h2><h3 id="8-1、什么是JSP"><a href="#8-1、什么是JSP" class="headerlink" title="8.1、什么是JSP"></a>8.1、什么是JSP</h3><p>Java Server Pages ： Java服务器端页面，也和Servlet一样，用于动态Web技术！</p>
<p>最大的特点：</p>
<ul>
<li>写JSP就像在写HTML</li>
<li>区别：<ul>
<li>HTML只给用户提供静态的数据</li>
<li>JSP页面中可以嵌入JAVA代码，为用户提供动态数据；</li>
</ul>
</li>
</ul>
<h3 id="8-2、JSP原理"><a href="#8-2、JSP原理" class="headerlink" title="8.2、JSP原理"></a>8.2、JSP原理</h3><p>思路：JSP到底怎么执行的！</p>
<ul>
<li><p>代码层面没有任何问题</p>
</li>
<li><p>服务器内部工作</p>
<p>tomcat中有一个work目录；</p>
<p>IDEA中使用Tomcat的会在IDEA的tomcat中生产一个work目录</p>
<p><img src="/JavaWeb.assets/1568345873736.png" alt="1568345873736"></p>
<p>我电脑的地址：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">C:\Users\Administrator\.IntelliJIdea2018<span class="number">.1</span>\system\tomcat\Unnamed_javaweb-session-cookie\work\Catalina\localhost\ROOT\org\apache\jsp</span><br></pre></td></tr></table></figure>

<p>发现页面转变成了Java程序！</p>
<p><img src="/JavaWeb.assets/1568345948307.png" alt="1568345948307"></p>
</li>
</ul>
<p><strong>浏览器向服务器发送请求，不管访问什么资源，其实都是在访问Servlet！</strong></p>
<p>JSP最终也会被转换成为一个Java类！</p>
<p><strong>JSP 本质上就是一个Servlet</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//初始化</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">_jspInit</span><span class="params">()</span> &#123;</span><br><span class="line">      </span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">//销毁</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">_jspDestroy</span><span class="params">()</span> &#123;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">//JSPService</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">_jspService</span><span class="params">(.HttpServletRequest request,HttpServletResponse response)</span></span><br><span class="line">      </span><br></pre></td></tr></table></figure>

<ol>
<li><p>判断请求</p>
</li>
<li><p>内置一些对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> javax.servlet.jsp.PageContext pageContext;  <span class="comment">//页面上下文</span></span><br><span class="line">javax.servlet.http.<span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> <span class="literal">null</span>;    <span class="comment">//session</span></span><br><span class="line"><span class="keyword">final</span> javax.servlet.ServletContext application;   <span class="comment">//applicationContext</span></span><br><span class="line"><span class="keyword">final</span> javax.servlet.ServletConfig config;         <span class="comment">//config</span></span><br><span class="line">javax.servlet.jsp.<span class="type">JspWriter</span> <span class="variable">out</span> <span class="operator">=</span> <span class="literal">null</span>;           <span class="comment">//out</span></span><br><span class="line"><span class="keyword">final</span> java.lang.<span class="type">Object</span> <span class="variable">page</span> <span class="operator">=</span> <span class="built_in">this</span>;               <span class="comment">//page：当前</span></span><br><span class="line">HttpServletRequest request                        <span class="comment">//请求</span></span><br><span class="line">HttpServletResponse response                      <span class="comment">//响应</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>输出页面前增加的代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">response.setContentType(<span class="string">&quot;text/html&quot;</span>);       <span class="comment">//设置响应的页面类型</span></span><br><span class="line">pageContext = _jspxFactory.getPageContext(<span class="built_in">this</span>, request, response,</span><br><span class="line">                                          <span class="literal">null</span>, <span class="literal">true</span>, <span class="number">8192</span>, <span class="literal">true</span>);</span><br><span class="line">_jspx_page_context = pageContext;</span><br><span class="line">application = pageContext.getServletContext();</span><br><span class="line">config = pageContext.getServletConfig();</span><br><span class="line">session = pageContext.getSession();</span><br><span class="line">out = pageContext.getOut();</span><br><span class="line">_jspx_out = out;</span><br></pre></td></tr></table></figure>
</li>
<li><p>以上的这些个对象我们可以在JSP页面中直接使用！</p>
</li>
</ol>
<p><img src="/JavaWeb.assets/1568347078207.png" alt="1568347078207"></p>
<p>在JSP页面中；</p>
<p>只要是 JAVA代码就会原封不动的输出；</p>
<p>如果是HTML代码，就会被转换为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">out.write(<span class="string">&quot;&lt;html&gt;\r\n&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>这样的格式，输出到前端！</p>
<h3 id="8-3、JSP基础语法"><a href="#8-3、JSP基础语法" class="headerlink" title="8.3、JSP基础语法"></a>8.3、JSP基础语法</h3><p>任何语言都有自己的语法，JAVA中有,。 JSP 作为java技术的一种应用，它拥有一些自己扩充的语法（了解，知道即可！），Java所有语法都支持！</p>
<h4 id="JSP表达式"><a href="#JSP表达式" class="headerlink" title="JSP表达式"></a><strong>JSP表达式</strong></h4><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%--JSP表达式</span><br><span class="line">作用：用来将程序的输出，输出到客户端</span><br><span class="line">&lt;%= 变量或者表达式%&gt;</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%= <span class="keyword">new</span> <span class="title class_">java</span>.util.Date()%&gt;</span><br></pre></td></tr></table></figure>



<h4 id="jsp脚本片段"><a href="#jsp脚本片段" class="headerlink" title="jsp脚本片段"></a><strong>jsp脚本片段</strong></h4><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;%--jsp脚本片段--%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">  <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;=<span class="number">100</span> ; i++) &#123;</span><br><span class="line">    sum+=i;</span><br><span class="line">  &#125;</span><br><span class="line">  out.println(<span class="string">&quot;&lt;h1&gt;Sum=&quot;</span>+sum+<span class="string">&quot;&lt;/h1&gt;&quot;</span>);</span><br><span class="line">%&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p><strong>脚本片段的再实现</strong></p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">  <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">  out.println(x);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;p&gt;这是一个JSP文档&lt;/p&gt;</span><br><span class="line">&lt;%</span><br><span class="line">  <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">  out.println(y);</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;hr&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;%--在代码嵌入HTML元素--%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">%&gt;</span><br><span class="line">  &lt;h1&gt;Hello,World  &lt;%=i%&gt; &lt;/h1&gt;</span><br><span class="line">&lt;%</span><br><span class="line">  &#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>



<h4 id="JSP声明"><a href="#JSP声明" class="headerlink" title="JSP声明"></a>JSP声明</h4><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%!</span><br><span class="line">  <span class="keyword">static</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Loading Servlet!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="type">int</span> <span class="variable">globalVar</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">kuang</span><span class="params">()</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;进入了方法Kuang！&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>



<p>JSP声明：会被编译到JSP生成Java的类中！其他的，就会被生成到_jspService方法中！</p>
<p>在JSP，嵌入Java代码即可！</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%%&gt;</span><br><span class="line">&lt;%=%&gt;</span><br><span class="line">&lt;%!%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--注释--%&gt;</span><br></pre></td></tr></table></figure>

<p>JSP的注释，不会在客户端显示，HTML就会！</p>
<h3 id="8-4、JSP指令"><a href="#8-4、JSP指令" class="headerlink" title="8.4、JSP指令"></a>8.4、JSP指令</h3><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%<span class="meta">@page</span> args.... %&gt;</span><br><span class="line">&lt;%<span class="meta">@include</span> file=<span class="string">&quot;&quot;</span>%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--<span class="meta">@include</span>会将两个页面合二为一--%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%<span class="meta">@include</span> file=<span class="string">&quot;common/header.jsp&quot;</span>%&gt;</span><br><span class="line">&lt;h1&gt;网页主体&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">&lt;%<span class="meta">@include</span> file=<span class="string">&quot;common/footer.jsp&quot;</span>%&gt;</span><br><span class="line"></span><br><span class="line">&lt;hr&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;%--jSP标签</span><br><span class="line">    jsp:include：拼接页面，本质还是三个</span><br><span class="line">    --%&gt;</span><br><span class="line">&lt;jsp:include page=<span class="string">&quot;/common/header.jsp&quot;</span>/&gt;</span><br><span class="line">&lt;h1&gt;网页主体&lt;/h1&gt;</span><br><span class="line">&lt;jsp:include page=<span class="string">&quot;/common/footer.jsp&quot;</span>/&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="8-5、9大内置对象"><a href="#8-5、9大内置对象" class="headerlink" title="8.5、9大内置对象"></a>8.5、9大内置对象</h3><ul>
<li>PageContext    存东西</li>
<li>Request     存东西</li>
<li>Response</li>
<li>Session      存东西</li>
<li>Application   【SerlvetContext】   存东西</li>
<li>config    【SerlvetConfig】</li>
<li>out</li>
<li>page ，不用了解</li>
<li>exception</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">pageContext.setAttribute(<span class="string">&quot;name1&quot;</span>,<span class="string">&quot;秦疆1号&quot;</span>); <span class="comment">//保存的数据只在一个页面中有效</span></span><br><span class="line">request.setAttribute(<span class="string">&quot;name2&quot;</span>,<span class="string">&quot;秦疆2号&quot;</span>); <span class="comment">//保存的数据只在一次请求中有效，请求转发会携带这个数据</span></span><br><span class="line">session.setAttribute(<span class="string">&quot;name3&quot;</span>,<span class="string">&quot;秦疆3号&quot;</span>); <span class="comment">//保存的数据只在一次会话中有效，从打开浏览器到关闭浏览器</span></span><br><span class="line">application.setAttribute(<span class="string">&quot;name4&quot;</span>,<span class="string">&quot;秦疆4号&quot;</span>);  <span class="comment">//保存的数据只在服务器中有效，从打开服务器到关闭服务器</span></span><br></pre></td></tr></table></figure>

<p>request：客户端向服务器发送请求，产生的数据，用户看完就没用了，比如：新闻，用户看完没用的！</p>
<p>session：客户端向服务器发送请求，产生的数据，用户用完一会还有用，比如：购物车；</p>
<p>application：客户端向服务器发送请求，产生的数据，一个用户用完了，其他用户还可能使用，比如：聊天数据；</p>
<h3 id="8-6、JSP标签、JSTL标签、EL表达式"><a href="#8-6、JSP标签、JSTL标签、EL表达式" class="headerlink" title="8.6、JSP标签、JSTL标签、EL表达式"></a>8.6、JSP标签、JSTL标签、EL表达式</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- JSTL表达式的依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp.jstl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- standard标签库 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>taglibs<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>standard<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>EL表达式：  ${ }</p>
<ul>
<li><strong>获取数据</strong></li>
<li><strong>执行运算</strong></li>
<li><strong>获取web开发的常用对象</strong></li>
</ul>
<p><strong>JSP标签</strong></p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%--jsp:include--%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--</span><br><span class="line">http:<span class="comment">//localhost:8080/jsptag.jsp?name=kuangshen&amp;age=12</span></span><br><span class="line">--%&gt;</span><br><span class="line"></span><br><span class="line">&lt;jsp:forward page=<span class="string">&quot;/jsptag2.jsp&quot;</span>&gt;</span><br><span class="line">    &lt;jsp:param name=<span class="string">&quot;name&quot;</span> value=<span class="string">&quot;kuangshen&quot;</span>&gt;&lt;/jsp:param&gt;</span><br><span class="line">    &lt;jsp:param name=<span class="string">&quot;age&quot;</span> value=<span class="string">&quot;12&quot;</span>&gt;&lt;/jsp:param&gt;</span><br><span class="line">&lt;/jsp:forward&gt;</span><br></pre></td></tr></table></figure>



<p><strong>JSTL表达式</strong></p>
<p>JSTL标签库的使用就是为了弥补HTML标签的不足；它自定义许多标签，可以供我们使用，标签的功能和Java代码一样！</p>
<p><strong>格式化标签</strong></p>
<p><strong>SQL标签</strong></p>
<p><strong>XML 标签</strong></p>
<p><strong>核心标签</strong> （掌握部分）</p>
<p><img src="/JavaWeb.assets/1568362473764.png" alt="1568362473764"></p>
<p><strong>JSTL标签库使用步骤</strong></p>
<ul>
<li>引入对应的 taglib</li>
<li>使用其中的方法</li>
<li><strong>在Tomcat 也需要引入 jstl的包，否则会报错：JSTL解析错误</strong></li>
</ul>
<p>c：if</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;h4&gt;<span class="keyword">if</span>测试&lt;/h4&gt;</span><br><span class="line"></span><br><span class="line">&lt;hr&gt;</span><br><span class="line"></span><br><span class="line">&lt;form action=<span class="string">&quot;coreif.jsp&quot;</span> method=<span class="string">&quot;get&quot;</span>&gt;</span><br><span class="line">    &lt;%--</span><br><span class="line">    EL表达式获取表单中的数据</span><br><span class="line">    $&#123;param.参数名&#125;</span><br><span class="line">    --%&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;username&quot;</span> value=<span class="string">&quot;$&#123;param.username&#125;&quot;</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;登录&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--判断如果提交的用户名是管理员，则登录成功--%&gt;</span><br><span class="line">&lt;c:<span class="keyword">if</span> test=<span class="string">&quot;$&#123;param.username==&#x27;admin&#x27;&#125;&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;isAdmin&quot;</span>&gt;</span><br><span class="line">    &lt;c:out value=<span class="string">&quot;管理员欢迎您！&quot;</span>/&gt;</span><br><span class="line">&lt;/c:<span class="keyword">if</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--自闭合标签--%&gt;</span><br><span class="line">&lt;c:out value=<span class="string">&quot;$&#123;isAdmin&#125;&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>

<p>c:choose   c:when</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--定义一个变量score，值为<span class="number">85</span>--%&gt;</span><br><span class="line">&lt;c:set <span class="keyword">var</span>=<span class="string">&quot;score&quot;</span> value=<span class="string">&quot;55&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line">&lt;c:choose&gt;</span><br><span class="line">    &lt;c:when test=<span class="string">&quot;$&#123;score&gt;=90&#125;&quot;</span>&gt;</span><br><span class="line">        你的成绩为优秀</span><br><span class="line">    &lt;/c:when&gt;</span><br><span class="line">    &lt;c:when test=<span class="string">&quot;$&#123;score&gt;=80&#125;&quot;</span>&gt;</span><br><span class="line">        你的成绩为一般</span><br><span class="line">    &lt;/c:when&gt;</span><br><span class="line">    &lt;c:when test=<span class="string">&quot;$&#123;score&gt;=70&#125;&quot;</span>&gt;</span><br><span class="line">        你的成绩为良好</span><br><span class="line">    &lt;/c:when&gt;</span><br><span class="line">    &lt;c:when test=<span class="string">&quot;$&#123;score&lt;=60&#125;&quot;</span>&gt;</span><br><span class="line">        你的成绩为不及格</span><br><span class="line">    &lt;/c:when&gt;</span><br><span class="line">&lt;/c:choose&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>

<p>c:forEach</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%</span><br><span class="line"></span><br><span class="line">    ArrayList&lt;String&gt; people = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    people.add(<span class="number">0</span>,<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    people.add(<span class="number">1</span>,<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">    people.add(<span class="number">2</span>,<span class="string">&quot;王五&quot;</span>);</span><br><span class="line">    people.add(<span class="number">3</span>,<span class="string">&quot;赵六&quot;</span>);</span><br><span class="line">    people.add(<span class="number">4</span>,<span class="string">&quot;田六&quot;</span>);</span><br><span class="line">    request.setAttribute(<span class="string">&quot;list&quot;</span>,people);</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;%--</span><br><span class="line"><span class="keyword">var</span> , 每一次遍历出来的变量</span><br><span class="line">items, 要遍历的对象</span><br><span class="line">begin,   哪里开始</span><br><span class="line">end,     到哪里</span><br><span class="line">step,   步长</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;c:forEach <span class="keyword">var</span>=<span class="string">&quot;people&quot;</span> items=<span class="string">&quot;$&#123;list&#125;&quot;</span>&gt;</span><br><span class="line">    &lt;c:out value=<span class="string">&quot;$&#123;people&#125;&quot;</span>/&gt; &lt;br&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br><span class="line"></span><br><span class="line">&lt;hr&gt;</span><br><span class="line"></span><br><span class="line">&lt;c:forEach <span class="keyword">var</span>=<span class="string">&quot;people&quot;</span> items=<span class="string">&quot;$&#123;list&#125;&quot;</span> begin=<span class="string">&quot;1&quot;</span> end=<span class="string">&quot;3&quot;</span> step=<span class="string">&quot;1&quot;</span> &gt;</span><br><span class="line">    &lt;c:out value=<span class="string">&quot;$&#123;people&#125;&quot;</span>/&gt; &lt;br&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="9、JavaBean"><a href="#9、JavaBean" class="headerlink" title="9、JavaBean"></a>9、JavaBean</h2><p>实体类</p>
<p>JavaBean有特定的写法：</p>
<ul>
<li>必须要有一个无参构造</li>
<li>属性必须私有化</li>
<li>必须有对应的get&#x2F;set方法；</li>
</ul>
<p>一般用来和数据库的字段做映射  ORM；</p>
<p>ORM ：对象关系映射</p>
<ul>
<li>表—&gt;类</li>
<li>字段–&gt;属性</li>
<li>行记录—-&gt;对象</li>
</ul>
<p><strong>people表</strong></p>
<table>
<thead>
<tr>
<th>id</th>
<th>name</th>
<th>age</th>
<th>address</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>秦疆1号</td>
<td>3</td>
<td>西安</td>
</tr>
<tr>
<td>2</td>
<td>秦疆2号</td>
<td>18</td>
<td>西安</td>
</tr>
<tr>
<td>3</td>
<td>秦疆3号</td>
<td>100</td>
<td>西安</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">People</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">People</span>(<span class="number">1</span>,<span class="string">&quot;秦疆1号&quot;</span>,<span class="number">3</span>，<span class="string">&quot;西安&quot;</span>);</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">People</span>(<span class="number">2</span>,<span class="string">&quot;秦疆2号&quot;</span>,<span class="number">3</span>，<span class="string">&quot;西安&quot;</span>);</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">People</span>(<span class="number">3</span>,<span class="string">&quot;秦疆3号&quot;</span>,<span class="number">3</span>，<span class="string">&quot;西安&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<ul>
<li>过滤器</li>
<li>文件上传</li>
<li>邮件发送</li>
<li>JDBC 复习 ： 如何使用JDBC ,  JDBC crud， jdbc 事务</li>
</ul>
<h2 id="10、MVC三层架构"><a href="#10、MVC三层架构" class="headerlink" title="10、MVC三层架构"></a>10、MVC三层架构</h2><p>什么是MVC：  Model     view     Controller  模型、视图、控制器</p>
<h3 id="10-1、早些年"><a href="#10-1、早些年" class="headerlink" title="10.1、早些年"></a>10.1、早些年</h3><p><img src="/JavaWeb.assets/1568423664332.png" alt="1568423664332"></p>
<p>用户直接访问控制层，控制层就可以直接操作数据库；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">servlet--CRUD--&gt;数据库</span><br><span class="line">弊端：程序十分臃肿，不利于维护  </span><br><span class="line">servlet的代码中：处理请求、响应、视图跳转、处理JDBC、处理业务代码、处理逻辑代码</span><br><span class="line"></span><br><span class="line">架构：没有什么是加一层解决不了的！</span><br><span class="line">程序猿调用</span><br><span class="line">|</span><br><span class="line">JDBC</span><br><span class="line">|</span><br><span class="line">Mysql Oracle SqlServer ....</span><br></pre></td></tr></table></figure>

<h3 id="10-2、MVC三层架构"><a href="#10-2、MVC三层架构" class="headerlink" title="10.2、MVC三层架构"></a>10.2、MVC三层架构</h3><p><img src="/JavaWeb.assets/1568424227281.png" alt="1568424227281"></p>
<p>Model</p>
<ul>
<li>业务处理 ：业务逻辑（Service）</li>
<li>数据持久层：CRUD   （Dao）</li>
</ul>
<p>View</p>
<ul>
<li>展示数据</li>
<li>提供链接发起Servlet请求 （a，form，img…）</li>
</ul>
<p>Controller  （Servlet）</p>
<ul>
<li><p>接收用户的请求 ：（req：请求参数、Session信息….）</p>
</li>
<li><p>交给业务层处理对应的代码 </p>
</li>
<li><p>控制视图的跳转  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">登录---&gt;接收用户的登录请求---&gt;处理用户的请求（获取用户登录的参数，username，password）----&gt;交给业务层处理登录业务（判断用户名密码是否正确：事务）---&gt;Dao层查询用户名和密码是否正确--&gt;数据库</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="11、Filter-（重点）"><a href="#11、Filter-（重点）" class="headerlink" title="11、Filter （重点）"></a>11、Filter （重点）</h2><p>Filter：过滤器 ，用来过滤网站的数据；</p>
<ul>
<li>处理中文乱码</li>
<li>登录验证….</li>
</ul>
<p><img src="/JavaWeb.assets/1568424858708.png" alt="1568424858708"></p>
<p>Filter开发步骤：</p>
<ol>
<li><p>导包</p>
</li>
<li><p>编写过滤器</p>
<ol>
<li><p>导包不要错</p>
<p><img src="/JavaWeb.assets/1568425162525.png" alt="1568425162525"></p>
<p>实现Filter接口，重写对应的方法即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CharacterEncodingFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化：web服务器启动，就以及初始化了，随时等待过滤对象出现！</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;CharacterEncodingFilter初始化&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Chain : 链</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    1. 过滤中的所有代码，在过滤特定请求的时候都会执行</span></span><br><span class="line"><span class="comment">    2. 必须要让过滤器继续同行</span></span><br><span class="line"><span class="comment">        chain.doFilter(request,response);</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        request.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;CharacterEncodingFilter执行前....&quot;</span>);</span><br><span class="line">        chain.doFilter(request,response); <span class="comment">//让我们的请求继续走，如果不写，程序到这里就被拦截停止！</span></span><br><span class="line">        System.out.println(<span class="string">&quot;CharacterEncodingFilter执行后....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//销毁：web服务器关闭的时候，过滤会销毁</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;CharacterEncodingFilter销毁&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>在web.xml中配置 Filter</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.kuang.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--只要是 /servlet的任何请求，会经过这个过滤器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/servlet/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;url-pattern&gt;/*&lt;/url-pattern&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="12、监听器"><a href="#12、监听器" class="headerlink" title="12、监听器"></a>12、监听器</h2><p>实现一个监听器的接口；（有N种）</p>
<ol>
<li><p>编写一个监听器</p>
<p>实现监听器的接口…</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//统计网站在线人数 ： 统计session</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OnlineCountListener</span> <span class="keyword">implements</span> <span class="title class_">HttpSessionListener</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建session监听： 看你的一举一动</span></span><br><span class="line">    <span class="comment">//一旦创建Session就会触发一次这个事件！</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sessionCreated</span><span class="params">(HttpSessionEvent se)</span> &#123;</span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">ctx</span> <span class="operator">=</span> se.getSession().getServletContext();</span><br><span class="line"></span><br><span class="line">        System.out.println(se.getSession().getId());</span><br><span class="line"></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">onlineCount</span> <span class="operator">=</span> (Integer) ctx.getAttribute(<span class="string">&quot;OnlineCount&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (onlineCount==<span class="literal">null</span>)&#123;</span><br><span class="line">            onlineCount = <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> onlineCount.intValue();</span><br><span class="line">            onlineCount = <span class="keyword">new</span> <span class="title class_">Integer</span>(count+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ctx.setAttribute(<span class="string">&quot;OnlineCount&quot;</span>,onlineCount);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//销毁session监听</span></span><br><span class="line">    <span class="comment">//一旦销毁Session就会触发一次这个事件！</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sessionDestroyed</span><span class="params">(HttpSessionEvent se)</span> &#123;</span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">ctx</span> <span class="operator">=</span> se.getSession().getServletContext();</span><br><span class="line"></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">onlineCount</span> <span class="operator">=</span> (Integer) ctx.getAttribute(<span class="string">&quot;OnlineCount&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (onlineCount==<span class="literal">null</span>)&#123;</span><br><span class="line">            onlineCount = <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> onlineCount.intValue();</span><br><span class="line">            onlineCount = <span class="keyword">new</span> <span class="title class_">Integer</span>(count-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ctx.setAttribute(<span class="string">&quot;OnlineCount&quot;</span>,onlineCount);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    Session销毁：</span></span><br><span class="line"><span class="comment">    1. 手动销毁  getSession().invalidate();</span></span><br><span class="line"><span class="comment">    2. 自动销毁</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>web.xml中注册监听器</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--注册监听器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>com.kuang.listener.OnlineCountListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>看情况是否使用！</p>
</li>
</ol>
<h2 id="13、过滤器、监听器常见应用"><a href="#13、过滤器、监听器常见应用" class="headerlink" title="13、过滤器、监听器常见应用"></a>13、过滤器、监听器常见应用</h2><p><strong>监听器：GUI编程中经常使用；</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestPanel</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Frame</span> <span class="variable">frame</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Frame</span>(<span class="string">&quot;中秋节快乐&quot;</span>);  <span class="comment">//新建一个窗体</span></span><br><span class="line">        <span class="type">Panel</span> <span class="variable">panel</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Panel</span>(<span class="literal">null</span>); <span class="comment">//面板</span></span><br><span class="line">        frame.setLayout(<span class="literal">null</span>); <span class="comment">//设置窗体的布局</span></span><br><span class="line"></span><br><span class="line">        frame.setBounds(<span class="number">300</span>,<span class="number">300</span>,<span class="number">500</span>,<span class="number">500</span>);</span><br><span class="line">        frame.setBackground(<span class="keyword">new</span> <span class="title class_">Color</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">255</span>)); <span class="comment">//设置背景颜色</span></span><br><span class="line"></span><br><span class="line">        panel.setBounds(<span class="number">50</span>,<span class="number">50</span>,<span class="number">300</span>,<span class="number">300</span>);</span><br><span class="line">        panel.setBackground(<span class="keyword">new</span> <span class="title class_">Color</span>(<span class="number">0</span>,<span class="number">255</span>,<span class="number">0</span>)); <span class="comment">//设置背景颜色</span></span><br><span class="line"></span><br><span class="line">        frame.add(panel);</span><br><span class="line"></span><br><span class="line">        frame.setVisible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//监听事件，监听关闭事件</span></span><br><span class="line">        frame.addWindowListener(<span class="keyword">new</span> <span class="title class_">WindowAdapter</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">windowClosing</span><span class="params">(WindowEvent e)</span> &#123;</span><br><span class="line">                <span class="built_in">super</span>.windowClosing(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>用户登录之后才能进入主页！用户注销后就不能进入主页了！</p>
<ol>
<li><p>用户登录之后，向Sesison中放入用户的数据</p>
</li>
<li><p>进入主页的时候要判断用户是否已经登录；要求：在过滤器中实现！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> (HttpServletRequest) req;</span><br><span class="line"><span class="type">HttpServletResponse</span> <span class="variable">response</span> <span class="operator">=</span> (HttpServletResponse) resp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (request.getSession().getAttribute(Constant.USER_SESSION)==<span class="literal">null</span>)&#123;</span><br><span class="line">    response.sendRedirect(<span class="string">&quot;/error.jsp&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">chain.doFilter(request,response);</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="14、JDBC"><a href="#14、JDBC" class="headerlink" title="14、JDBC"></a>14、JDBC</h2><p>什么是JDBC ： Java连接数据库！</p>
<p><img src="/JavaWeb.assets/1568439601825.png" alt="1568439601825"></p>
<p>需要jar包的支持：</p>
<ul>
<li>java.sql</li>
<li>javax.sql</li>
<li>mysql-conneter-java…  连接驱动（必须要导入）</li>
</ul>
<p><strong>实验环境搭建</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> users(</span><br><span class="line">    id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    `name` <span class="type">VARCHAR</span>(<span class="number">40</span>),</span><br><span class="line">    `password` <span class="type">VARCHAR</span>(<span class="number">40</span>),</span><br><span class="line">    email <span class="type">VARCHAR</span>(<span class="number">60</span>),</span><br><span class="line">    birthday <span class="type">DATE</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> users(id,`name`,`password`,email,birthday)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="string">&#x27;张三&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>,<span class="string">&#x27;zs@qq.com&#x27;</span>,<span class="string">&#x27;2000-01-01&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> users(id,`name`,`password`,email,birthday)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">2</span>,<span class="string">&#x27;李四&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>,<span class="string">&#x27;ls@qq.com&#x27;</span>,<span class="string">&#x27;2000-01-01&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> users(id,`name`,`password`,email,birthday)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">3</span>,<span class="string">&#x27;王五&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>,<span class="string">&#x27;ww@qq.com&#x27;</span>,<span class="string">&#x27;2000-01-01&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span>	<span class="operator">*</span> <span class="keyword">FROM</span> users;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>导入数据库依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--mysql的驱动--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>IDEA中连接数据库：</p>
<p><img src="/JavaWeb.assets/1568440926845.png" alt="1568440926845"></p>
<p><strong>JDBC 固定步骤：</strong></p>
<ol>
<li>加载驱动</li>
<li>连接数据库,代表数据库</li>
<li>向数据库发送SQL的对象Statement : CRUD</li>
<li>编写SQL （根据业务，不同的SQL）</li>
<li>执行SQL</li>
<li>关闭连接</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestJdbc</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, SQLException &#123;</span><br><span class="line">        <span class="comment">//配置信息</span></span><br><span class="line">        <span class="comment">//useUnicode=true&amp;characterEncoding=utf-8 解决中文乱码</span></span><br><span class="line">        String url=<span class="string">&quot;jdbc:mysql://localhost:3306/jdbc?useUnicode=true&amp;characterEncoding=utf-8&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;123456&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.加载驱动</span></span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        <span class="comment">//2.连接数据库,代表数据库</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(url, username, password);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.向数据库发送SQL的对象Statement,PreparedStatement : CRUD</span></span><br><span class="line">        <span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> connection.createStatement();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.编写SQL</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from users&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.执行查询SQL，返回一个 ResultSet  ： 结果集</span></span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> statement.executeQuery(sql);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (rs.next())&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;id=&quot;</span>+rs.getObject(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;name=&quot;</span>+rs.getObject(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;password=&quot;</span>+rs.getObject(<span class="string">&quot;password&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;email=&quot;</span>+rs.getObject(<span class="string">&quot;email&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;birthday=&quot;</span>+rs.getObject(<span class="string">&quot;birthday&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//6.关闭连接，释放资源（一定要做） 先开后关</span></span><br><span class="line">        rs.close();</span><br><span class="line">        statement.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p><strong>预编译SQL</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestJDBC2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//配置信息</span></span><br><span class="line">        <span class="comment">//useUnicode=true&amp;characterEncoding=utf-8 解决中文乱码</span></span><br><span class="line">        String url=<span class="string">&quot;jdbc:mysql://localhost:3306/jdbc?useUnicode=true&amp;characterEncoding=utf-8&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;123456&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.加载驱动</span></span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        <span class="comment">//2.连接数据库,代表数据库</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(url, username, password);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.编写SQL</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into  users(id, name, password, email, birthday) values (?,?,?,?,?);&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.预编译</span></span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">preparedStatement</span> <span class="operator">=</span> connection.prepareStatement(sql);</span><br><span class="line"></span><br><span class="line">        preparedStatement.setInt(<span class="number">1</span>,<span class="number">2</span>);<span class="comment">//给第一个占位符？ 的值赋值为1；</span></span><br><span class="line">        preparedStatement.setString(<span class="number">2</span>,<span class="string">&quot;狂神说Java&quot;</span>);<span class="comment">//给第二个占位符？ 的值赋值为狂神说Java；</span></span><br><span class="line">        preparedStatement.setString(<span class="number">3</span>,<span class="string">&quot;123456&quot;</span>);<span class="comment">//给第三个占位符？ 的值赋值为123456；</span></span><br><span class="line">        preparedStatement.setString(<span class="number">4</span>,<span class="string">&quot;24736743@qq.com&quot;</span>);<span class="comment">//给第四个占位符？ 的值赋值为1；</span></span><br><span class="line">        preparedStatement.setDate(<span class="number">5</span>,<span class="keyword">new</span> <span class="title class_">Date</span>(<span class="keyword">new</span> <span class="title class_">java</span>.util.Date().getTime()));<span class="comment">//给第五个占位符？ 的值赋值为new Date(new java.util.Date().getTime())；</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.执行SQL</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> preparedStatement.executeUpdate();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (i&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;插入成功@&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//6.关闭连接，释放资源（一定要做） 先开后关</span></span><br><span class="line">        preparedStatement.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p><strong>事务</strong></p>
<p>要么都成功，要么都失败！</p>
<p>ACID原则：保证数据的安全。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">开启事务</span><br><span class="line">事务提交  commit()</span><br><span class="line">事务回滚  rollback()</span><br><span class="line">关闭事务</span><br><span class="line"></span><br><span class="line">转账：</span><br><span class="line">A:<span class="number">1000</span></span><br><span class="line">B:<span class="number">1000</span></span><br><span class="line">    </span><br><span class="line">A(<span class="number">900</span>)   --<span class="number">100</span>--&gt;   B(<span class="number">1100</span>) </span><br></pre></td></tr></table></figure>



<p><strong>Junit单元测试</strong></p>
<p>依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--单元测试--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>简单使用</p>
<p>@Test注解只有在方法上有效，只要加了这个注解的方法，就可以直接运行！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/JavaWeb.assets/1568442261610.png" alt="1568442261610"></p>
<p>失败的时候是红色：</p>
<p><img src="/JavaWeb.assets/1568442289597.png" alt="1568442289597"></p>
<p><strong>搭建一个环境</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> account(</span><br><span class="line">   id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,</span><br><span class="line">   `name` <span class="type">VARCHAR</span>(<span class="number">40</span>),</span><br><span class="line">   money <span class="type">FLOAT</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> account(`name`,money) <span class="keyword">VALUES</span>(<span class="string">&#x27;A&#x27;</span>,<span class="number">1000</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> account(`name`,money) <span class="keyword">VALUES</span>(<span class="string">&#x27;B&#x27;</span>,<span class="number">1000</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> account(`name`,money) <span class="keyword">VALUES</span>(<span class="string">&#x27;C&#x27;</span>,<span class="number">1000</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//配置信息</span></span><br><span class="line">    <span class="comment">//useUnicode=true&amp;characterEncoding=utf-8 解决中文乱码</span></span><br><span class="line">    String url=<span class="string">&quot;jdbc:mysql://localhost:3306/jdbc?useUnicode=true&amp;characterEncoding=utf-8&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;123456&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.加载驱动</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        <span class="comment">//2.连接数据库,代表数据库</span></span><br><span class="line">         connection = DriverManager.getConnection(url, username, password);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.通知数据库开启事务,false 开启</span></span><br><span class="line">        connection.setAutoCommit(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update account set money = money-100 where name = &#x27;A&#x27;&quot;</span>;</span><br><span class="line">        connection.prepareStatement(sql).executeUpdate();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//制造错误</span></span><br><span class="line">        <span class="comment">//int i = 1/0;</span></span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql2</span> <span class="operator">=</span> <span class="string">&quot;update account set money = money+100 where name = &#x27;B&#x27;&quot;</span>;</span><br><span class="line">        connection.prepareStatement(sql2).executeUpdate();</span><br><span class="line"></span><br><span class="line">        connection.commit();<span class="comment">//以上两条SQL都执行成功了，就提交事务！</span></span><br><span class="line">        System.out.println(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//如果出现异常，就通知数据库回滚事务</span></span><br><span class="line">            connection.rollback();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e1) &#123;</span><br><span class="line">            e1.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>计算机</category>
        <category>狂神说</category>
        <category>JavaWeb</category>
      </categories>
      <tags>
        <tag>JavaWeb</tag>
      </tags>
  </entry>
  <entry>
    <title>国考税务面试</title>
    <url>/2023/06/09/%E5%9B%BD%E8%80%83%E7%A8%8E%E5%8A%A1%E9%9D%A2%E8%AF%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>答题时间：2分钟答题，1分钟点评，10分钟答题3分钟</p>
]]></content>
      <categories>
        <category>公务员</category>
        <category>面试</category>
        <category>国税面试</category>
      </categories>
      <tags>
        <tag>面试</tag>
        <tag>公务员</tag>
      </tags>
  </entry>
  <entry>
    <title>3月26号计算机二级纠错</title>
    <url>/2021/03/26/%E8%AE%A1%E7%AE%97%E6%9C%BA/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BA%8C%E7%BA%A7/3%E6%9C%8826%E5%8F%B7%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BA%8C%E7%BA%A7%E7%BA%A0%E9%94%99/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>1.对象的输出流将制定的对象写入到文件的过程，就是将对象序列化的过程对象的输入流将指定序列化好的文件读出来的过程，就是对象反序列化的过程，此时对象所对应的class必须要实现Serializable接口，一般io流涉及到的接口只有Serializable,对象输出的时候还要重写toString方法</p>
<p>2.cc&#x3D;new JColorChooser();<br>    myColor&#x3D;cc.showDialog(c,”Choose window background color” ,Color.white);</p>
<p>注意，showDialog（）方法的第二个参数反映的是框体左上角的标题</p>
<p>3.fc&#x3D;new JFileChooser();<br>    int selected&#x3D;fc.showOpenDialog(c); &#x2F;&#x2F;记住JFileChooser（）方法中的showOpenDialog（）方法，c是container</p>
<p>4.子类继承父类，记得要用super（）方法</p>
<ol start="5">
<li></li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">MouseMotion</span> <span class="keyword">extends</span> <span class="title class_">MouseAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mouseMoved</span><span class="params">(MouseEvent e)</span> &#123;</span><br><span class="line">           <span class="comment">//*********Found**********</span></span><br><span class="line">           b.setText(<span class="string">&quot; 鼠标当前位置: &quot;</span>+ e.getX()+ <span class="string">&quot; , &quot;</span> + e.getY());</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>解析：这是鼠标的监听事件，直接背下来吧</p>
<p>6.import java.awt.event.*;&#x2F;&#x2F;看到ActionListener接口的时候要导入这个包，直接背</p>
<p>7.if ((i+j)&#x3D;&#x3D;4) &#x2F;&#x2F;记住，这里要加括号</p>
<p>8.table.addMouseListener(new MouseAdapter() {<br>            public void mouseClicked(MouseEvent e) {}}</p>
<p>9.setEditable(false)&#x2F;&#x2F;使调用这个函数的控件不能被编辑</p>
]]></content>
      <categories>
        <category>计算机</category>
        <category>计算机二级</category>
      </categories>
      <tags>
        <tag>计算机二级</tag>
      </tags>
  </entry>
  <entry>
    <title>3月25号计算机二级纠错</title>
    <url>/2021/03/25/%E8%AE%A1%E7%AE%97%E6%9C%BA/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BA%8C%E7%BA%A7/3%E6%9C%8825%E5%8F%B7%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BA%8C%E7%BA%A7%E7%BA%A0%E9%94%99/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>1.FileWriter和FileReader类实现文件流的输入和输出</p>
<p>2.bu1.addActionListener(new ActionListener() {</p>
<p>​	public void actionPerformed(ActionEvent e) {}}&#x2F;&#x2F;直接背吧</p>
<p>3.定义抽象方法时abstract，不是static。</p>
<p>4.素数：曾称<em>质数</em>。一个大于1的正整数，如果除了1和它本身以外，不能被其他正整数整除，就叫<em>素数</em>。</p>
<p>5.Math.round((float)Math.sqrt(m));&#x2F;&#x2F;round（）方法是四舍五入，sqrt（）方法是开平方。</p>
<p>6.out.writeChar(aa[i]);&#x2F;&#x2F;通过字符串的方式输出数组。</p>
<p>7.JOptionPane.showMessageDialog( null, output,<br>         “字符串缓存长度和容量的实例”,JOptionPane.INFORMATION_MESSAGE );&#x2F;&#x2F;直接背吧</p>
<p>8.io流，最后一定要记得关闭</p>
<p>9.String xVal;<br>      xVal &#x3D; JOptionPane.showInputDialog(<br>                “输入1个整数:” );&#x2F;&#x2F;在JOptionPane显示文字</p>
<p>10.getChars() 方法：public void getChars(int srcBegin, int srcEnd, char[] dst,  int dstBegin)</p>
<p>参数：<strong>srcBegin</strong> – 字符串中要复制的第一个字符的索引。<strong>srcEnd</strong> – 字符串中要复制的最后一个字符之后的索引。<strong>dst</strong> – 目标数组。<strong>dstBegin</strong> – 目标数组中的起始偏移量。</p>
<p>11</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Java_1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//*********Found**********</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i&lt;<span class="number">6</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">1</span>;k&lt;=<span class="number">5</span>-i;k++)</span><br><span class="line">                <span class="comment">//*********Found**********</span></span><br><span class="line">                System.out.print(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            <span class="comment">//*********Found**********</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">2</span>*i-<span class="number">1</span>;j++)</span><br><span class="line">                System.out.print(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">            <span class="comment">//*********Found**********</span></span><br><span class="line">            System.out.print(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">解析：一共有三个循环结构，第一个循环输出行，第二个循环输出空格，第三个循环输出*</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>计算机</category>
        <category>计算机二级</category>
      </categories>
      <tags>
        <tag>计算机二级</tag>
      </tags>
  </entry>
  <entry>
    <title>3月24号计算机二级纠错</title>
    <url>/2021/03/24/%E8%AE%A1%E7%AE%97%E6%9C%BA/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BA%8C%E7%BA%A7/3%E6%9C%8824%E5%8F%B7%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BA%8C%E7%BA%A7%E7%BA%A0%E9%94%99/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>1.只要看到JOptionPane,就要写import javax.swing.*  ps:全是小写。</p>
<p>2Container c &#x3D; getContentPane();</p>
<p>3.int n &#x3D; Math.round(21*x);  &#x2F;&#x2F;构造20以内的一个整数</p>
<p>4.JTextArea outputArea; 	 outputArea.setText( output );&#x2F;&#x2F;输出数据，直接背</p>
<p>5.public void paint(Graphics g) {} 重写paint函数实现绘图，直接背</p>
<p>6.t.join(); &#x2F;&#x2F;等待线程t运行结束,由于线程具有不确定性，让一个线程持续执行完成，需要调用join()函数保证该线程执行完毕再跳到下一个线程</p>
]]></content>
      <categories>
        <category>计算机</category>
        <category>计算机二级</category>
      </categories>
      <tags>
        <tag>计算机二级</tag>
      </tags>
  </entry>
  <entry>
    <title>About Me</title>
    <url>/2021/03/23/%E6%9D%82%E9%A1%B9/about/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>A Student, live in Nanjing, China.</p>
<p>姓名：吴海岳 </p>
<p>现居：南京 </p>
<p>GitHub: <a href="https://github.com/Haiyue66">Haiyue66</a>  </p>
<p>QQ: 1623870390 </p>
<p>微信: haiyue_vip</p>
<p><img src="https://img.imgdb.cn/item/6059c8df8322e6675c4c9e97.jpg"></p>
]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>3月15号计算机二级纠错</title>
    <url>/2021/03/23/%E8%AE%A1%E7%AE%97%E6%9C%BA/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BA%8C%E7%BA%A7/3%E6%9C%8815%E5%8F%B7%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BA%8C%E7%BA%A7%E7%BA%A0%E9%94%99/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="JOptionPane-showMessageDialog（Component-parentComponent-Object-message）"><a href="#JOptionPane-showMessageDialog（Component-parentComponent-Object-message）" class="headerlink" title="JOptionPane.showMessageDialog（Component parentComponent, Object message）"></a>JOptionPane.showMessageDialog（Component parentComponent, Object message）</h2><p>讲解连接： <a href="https://blog.csdn.net/weixin_43876121/article/details/100982551">https://blog.csdn.net/weixin_43876121/article/details/100982551</a></p>
<h2 id="System-exit-0-用法与作用"><a href="#System-exit-0-用法与作用" class="headerlink" title="System.exit(0)用法与作用"></a>System.exit(0)用法与作用</h2><p>讲解链接： <a href="https://blog.csdn.net/qq_37894053/article/details/82802606">https://blog.csdn.net/qq_37894053/article/details/82802606</a></p>
<h3 id="compareTo-方法"><a href="#compareTo-方法" class="headerlink" title="compareTo()方法"></a>compareTo()方法</h3><p>讲解链接: <a href="https://www.cnblogs.com/wxbblogs/p/6815927.html">https://www.cnblogs.com/wxbblogs/p/6815927.html</a></p>
<p>​				<a href="https://www.cnblogs.com/codeggs/p/11302541.html">https://www.cnblogs.com/codeggs/p/11302541.html</a></p>
<span id="more"></span>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> 第三章;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Java_1</span> <span class="keyword">extends</span> <span class="title class_">TT</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="comment">//*********Found**********</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="type">Java_1</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Java_1</span>(<span class="string">&quot;小龙&quot;</span>);<span class="comment">//程序的入口，因为是带参数的，所以只会执行带参构造，不会执行无参构造</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">Java_1</span><span class="params">(String s)</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="built_in">super</span>(s);<span class="comment">//先执行父类带参数的构造</span></span><br><span class="line">      System.out.println(<span class="string">&quot;您好吗？&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">Java_1</span><span class="params">()</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="built_in">this</span>(<span class="string">&quot;我是文朋&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TT</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">TT</span><span class="params">()</span></span><br><span class="line">   &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;多高兴啊!&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">TT</span><span class="params">(String s)</span></span><br><span class="line">   &#123;</span><br><span class="line">   <span class="comment">//*********Found**********</span></span><br><span class="line">      <span class="built_in">this</span>();<span class="comment">//执行本类中不带参数的构造</span></span><br><span class="line">      System.out.println(<span class="string">&quot;我是&quot;</span>+s);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">//*********Found**********</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Java_3</span> <span class="keyword">extends</span> <span class="title class_">JApplet</span><span class="comment">//*</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="comment">//*********Found**********</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span>  <span class="title function_">init</span><span class="params">()</span><span class="comment">//*</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="type">Container</span> <span class="variable">contentPane</span> <span class="operator">=</span> getContentPane();<span class="comment">//初始化一个容器，并命名该容器为contentPane，注意，getContentPane()这个方法有返回值，返回的是Container对象</span></span><br><span class="line">      <span class="type">JLabel</span> <span class="variable">label</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JLabel</span>(<span class="string">&quot;One World  One Dream&quot;</span>,SwingConstants.CENTER);<span class="comment">//实例化标签对象，SwingConstants.CENTER=JLabel.CENTER，这两种写法可以互换，都是一样的</span></span><br><span class="line">      label.setFont(<span class="keyword">new</span> <span class="title class_">Font</span>(<span class="string">&quot;Arial&quot;</span>, Font.BOLD, DEFAULT_SIZE));</span><br><span class="line">      <span class="comment">//*********Found**********</span></span><br><span class="line">      contentPane.add(label);<span class="comment">//将label添加到容器中</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">DEFAULT_SIZE</span> <span class="operator">=</span> <span class="number">24</span>;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>计算机</category>
        <category>计算机二级</category>
      </categories>
      <tags>
        <tag>计算机二级</tag>
      </tags>
  </entry>
  <entry>
    <title>3月23号计算机二级纠错</title>
    <url>/2021/03/23/%E8%AE%A1%E7%AE%97%E6%9C%BA/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BA%8C%E7%BA%A7/3%E6%9C%8823%E5%8F%B7%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BA%8C%E7%BA%A7%E7%BA%A0%E9%94%99/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ol>
<li></li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.applet.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.Graphics;</span><br><span class="line"></span><br><span class="line"><span class="comment">//*********Found********</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Java_1</span> <span class="keyword">extends</span> <span class="title class_">Applet</span> &#123;  </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">paint</span><span class="params">( Graphics g )</span></span><br><span class="line">   &#123;</span><br><span class="line"><span class="comment">//*********Found********</span></span><br><span class="line">      g.drawString( <span class="string">&quot;欢迎你来参加Java 语言考试!&quot;</span>, <span class="number">25</span>, <span class="number">25</span> );</span><br><span class="line">       <span class="comment">//drawString()是将需要显示的内容在窗口给定坐标显示出来</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>2.继承类有JFrame,JPanel,Applet,实在不行的话，每个都试一遍吧</p>
<span id="more"></span>

<p>3.将数字转换成字符串，使用String.valueOf()方法</p>
<p>4.DecimalFormat precisionTwo &#x3D; new DecimalFormat( “0.00” ); 作用是格式化十进制数字，只保留一位整数和两位小数，同时提供了format（）方法将数据进行格式化，比如precisionTwo.format( amount ) + “\n” );</p>
<ol start="5">
<li>public void actionPerformed(ActionEvent evt){<br> label.setFont(new Font(“黑体”, Font.PLAIN, size));<br>   }&#x2F;&#x2F;这个直接背下来 ActionListener接口在实现时重写actionPerformed（）方法时需要传入监听器类</li>
</ol>
<p>6.frame.setVisible(true);设置窗体可见，一般用于main函数中</p>
<ol start="7">
<li></li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">//*********Found**********</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Java_3</span> <span class="keyword">extends</span> <span class="title class_">JApplet</span>&#123;<span class="comment">//继承JApplet类不用main方法就可以运行程序</span></span><br><span class="line"><span class="comment">//*********Found**********</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>&#123;<span class="comment">//初始化</span></span><br><span class="line">    <span class="type">Container</span> <span class="variable">contentPane</span> <span class="operator">=</span> getContentPane();</span><br><span class="line">    <span class="type">JLabel</span> <span class="variable">label</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JLabel</span>(<span class="string">&quot;Java的诞生是对传统计算模式的挑战！&quot;</span>,</span><br><span class="line">         SwingConstants.CENTER);</span><br><span class="line"><span class="comment">//*********Found**********</span></span><br><span class="line">    contentPane.add(label);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="8">
<li>frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE );&#x2F;&#x2F;直接背下来</li>
</ol>
<p>9.System.exit( 0 );&#x2F;&#x2F;直接背</p>
<p>10.看到没有main方法，就要想到继承JApplet</p>
]]></content>
      <categories>
        <category>计算机</category>
        <category>计算机二级</category>
      </categories>
      <tags>
        <tag>计算机二级</tag>
      </tags>
  </entry>
  <entry>
    <title>3月22号计算机二级纠错</title>
    <url>/2021/03/22/%E8%AE%A1%E7%AE%97%E6%9C%BA/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BA%8C%E7%BA%A7/3%E6%9C%8822%E5%8F%B7%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BA%8C%E7%BA%A7%E7%BA%A0%E9%94%99/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>1.JFrame窗口隐藏或者消除的方法是dispose</p>
<p>2.用getContentPane()方法获得JFrame的内容面板，再对其加入组件，加入组件的方法是add()</p>
<p>3.继承ActionListener接口就要重写actionPerformed（）方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Java_2</span> &#123;</span><br><span class="line"><span class="comment">//矩阵代码，最好多看几遍</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;</span><br><span class="line">        <span class="type">int</span> [][]a = &#123;&#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;, &#123;<span class="number">4</span>, <span class="number">6</span>, <span class="number">5</span>&#125;&#125;;</span><br><span class="line">        <span class="type">int</span> [][]b = &#123;&#123;<span class="number">1</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">8</span>&#125;, &#123;<span class="number">5</span>, <span class="number">9</span>, <span class="number">10</span>, -<span class="number">3</span>&#125;, &#123;<span class="number">2</span>, <span class="number">7</span>, -<span class="number">5</span>, -<span class="number">18</span>&#125;&#125;;</span><br><span class="line">        <span class="comment">//*********Found**********</span></span><br><span class="line">        <span class="type">int</span> [][]c = <span class="keyword">new</span> <span class="title class_">int</span>[a[<span class="number">0</span>].length][b[<span class="number">0</span>].length];<span class="comment">//设置数组c的大小，最好背下来</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">            <span class="comment">//*********Found**********</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line">                <span class="comment">//*********Found**********</span></span><br><span class="line">                c[i][j]=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt; <span class="number">3</span>; k++) </span><br><span class="line">                    <span class="comment">//*********Found**********</span></span><br><span class="line">                    c[i][j] += a[i][k]*b[k][j];</span><br><span class="line">                System.out.print(c[i][j] + <span class="string">&quot;  &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>4.看到ActionEvent监听方法，必须要实现ActionListener接口</p>
<p>5.getContentPane()：获取内容面板，因为JFrame不能直接添加组件，需要用getContentPane()函数获取内容面板，再在内容面板上进行添加组件，所以只有JFrame能使用这个方法</p>
]]></content>
      <categories>
        <category>计算机</category>
        <category>计算机二级</category>
      </categories>
      <tags>
        <tag>计算机二级</tag>
      </tags>
  </entry>
  <entry>
    <title>写hexo博客时报错Template render error (unknown path)出现的原因及解决方法</title>
    <url>/2021/03/20/%E8%AE%A1%E7%AE%97%E6%9C%BA/bug/%E5%86%99hexo%E5%8D%9A%E5%AE%A2%E6%97%B6%E6%8A%A5%E9%94%99Template%20render%20error%20(unknown%20path)%E5%87%BA%E7%8E%B0%E7%9A%84%E5%8E%9F%E5%9B%A0%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>​	今天写博客的时候遇到这么个问题<img src="https://img.imgdb.cn/item/604d8be85aedab222cc866be.png" alt="1"></p>
<p>​	我去网上查了下，原因是出现了类似<code>&#123;&#123;&#125;&#125;，&#123;% %&#125;</code>这样的无法转义的字符，只要将这些字符注释掉就行了，但是我检查了我的文档，并没有出现类似的字符，于是我就用最笨的方法，一段一段的去排查，最终发现，我的文档中出现了&#96;</p>
]]></content>
      <categories>
        <category>计算机</category>
        <category>bug</category>
      </categories>
      <tags>
        <tag>markdown</tag>
        <tag>bug</tag>
      </tags>
  </entry>
  <entry>
    <title>3月19号计算机二级纠错</title>
    <url>/2021/03/19/%E8%AE%A1%E7%AE%97%E6%9C%BA/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BA%8C%E7%BA%A7/3%E6%9C%8819%E5%8F%B7%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BA%8C%E7%BA%A7%E7%BA%A0%E9%94%99/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>1.b ^ c这是异或运算，运算规则是把b和c转换成2进制，按着最低位对齐，从上往下，相同就是0，不同就是1。</p>
<p>2.重写run（）方法要实现Runnable接口、</p>
<p>3.将字符串中的每个字符全部找出来，java中String类提供了charAt()方法遍历每个字符</p>
<p>4.setLayout是java图形界面编程的常用方法，用来设置用户界面上屏幕组件的格式和布局，默认为流式布局  setLayout(new  BorderLayout());</p>
<p>5.JLabel对象可以显示文本，图像或者同时显示二者，创建对象时，在构造函数中输入要显示的对象</p>
<p>6.readLine()是读取流数据的时候用的，返回值类型是字符串，当读取完所有数据时会返回null</p>
<p>7.System.out.print(“\n”);输出换行符，注意\n的写法</p>
<p>8.JFrame类提供设置标题的方法，setTitle()设置标题</p>
<p>9.public void getChars(int start,int end,char c[],int offset)</p>
<p>​     该方法的作用是将当前字符串从start到end-1位置上的字符复制到字符数组c中，并从c的offset处开始存放，这个方法时String提供的，比如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.print(<span class="string">&quot;从字节数组的第7到12获取字符是：&quot;</span>);</span><br><span class="line">     string.getChars(<span class="number">6</span>,<span class="number">12</span>,sub,<span class="number">0</span>);</span><br><span class="line">     System.out.println(sub);</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>计算机</category>
        <category>计算机二级</category>
      </categories>
      <tags>
        <tag>计算机二级</tag>
      </tags>
  </entry>
  <entry>
    <title>3月18号计算机二级纠错</title>
    <url>/2021/03/18/%E8%AE%A1%E7%AE%97%E6%9C%BA/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BA%8C%E7%BA%A7/3%E6%9C%8818%E5%8F%B7%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BA%8C%E7%BA%A7%E7%BA%A0%E9%94%99/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>1：JTextArea,JOptionPane都是属于swing包中的类，所以需要导入swing包（import javax.swing.*)</p>
<p>2：System.exit(0);程序正常退出</p>
<p>3:程序是通过鼠标点击产生事件的，这个属于监听事件，要通过ActionListener接口来监听</p>
<p>4:JFrame,JMenu等等都属于swing窗口的构建,所以到在开头导包import javax.swing.*;	</p>
<p>5.addActionListener(this)，this可用 new 本类() 替换 前提是 本类中要继承ActionListener接口并实现方法actionPerformed()</p>
<p>6.继承Applet父类需要导包import java.applet.*;</p>
<p>7.在指定位置并且用指定的Brush和Font对象绘制指定的文本字符串。绘制字符串用drawString（）；	</p>
<p>8.String curDir &#x3D; System.getProperty(“user.dir”);&#x2F;&#x2F;获取当前路径，并用字符串作为接受</p>
<p>9.String[] files&#x3D;ff.list();&#x2F;&#x2F;list()方法是返回某个目录下的所有文件和目录的文件名，返回的是String数组</p>
]]></content>
      <categories>
        <category>计算机</category>
        <category>计算机二级</category>
      </categories>
      <tags>
        <tag>计算机二级</tag>
      </tags>
  </entry>
  <entry>
    <title>3月17号计算机二级纠错</title>
    <url>/2021/03/17/%E8%AE%A1%E7%AE%97%E6%9C%BA/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BA%8C%E7%BA%A7/3%E6%9C%8817%E5%8F%B7%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BA%8C%E7%BA%A7/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>1.ActionListener是一个接口，所有继承ActionListener的类都要重写actionperformed方法，因为actionperformed是一个抽象方法，只要使用ActionListener接口就要重写，一般情况下，这是在编写GUI程序时，组件发生“有意义”的事件时会调用这个方法，比如按钮被按下，文本框内输入回车时都会触发这个事件，然后调用你编写的事件处理程序。实现过程大体如下：编写一个ActionListener类的侦听器，组件注册该侦听器，侦听器内部要编写这个actionPerformed方法。</p>
<hr>
<p>2.两个字符串相比较，要使用equals方法，比如s1.equals(s2)，如果使用&#x3D;&#x3D;进行比较，比较的是地址值，结果肯定是false</p>
]]></content>
      <categories>
        <category>计算机</category>
        <category>计算机二级</category>
      </categories>
      <tags>
        <tag>计算机二级</tag>
      </tags>
  </entry>
  <entry>
    <title>3月16号计算机二级纠错</title>
    <url>/2021/03/16/%E8%AE%A1%E7%AE%97%E6%9C%BA/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BA%8C%E7%BA%A7/3%E6%9C%8816%E5%8F%B7%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BA%8C%E7%BA%A7%E7%BA%A0%E9%94%99/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>getName（）方法用来获取线程的名字</p>
<p>Java Applet： <a href="https://www.runoob.com/java/java-applet-basics.html">https://www.runoob.com/java/java-applet-basics.html</a></p>
]]></content>
      <categories>
        <category>计算机</category>
        <category>计算机二级</category>
      </categories>
      <tags>
        <tag>计算机二级</tag>
      </tags>
  </entry>
  <entry>
    <title>我的第一个博客</title>
    <url>/2021/03/13/%E6%9D%82%E9%A1%B9/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>​	时隔一年，我终于再次把博客搭建起来了，上一次玩博客还是在2019年年底2020年初的时候，那个时候看到别人漂亮的博客，心里顿时痒痒的，也忍不住自己去搭建一个漂亮的博客，但是还没等我把要学习的技术学完，我就不得不放弃博客，转去考研了，现在是2021年3月13号，考研结束了，公务员相关的考试也都考的七七八八了，学校里面教的东西又恰好是搭建博客所要学习的内容，我不禁又重新燃起了写博客的欲望，在我的舍友余乐韬的帮助下，我花了将近5个小时，终于将这个博客搭建成功了.虽然我以前已经搭建过一次，但是无奈时间过得太久了，许多当时遇到的坑，我现在也会遇到，但是我已经不记得我当时是怎么解决的了，如今不得不重新再踩一遍。</p>
]]></content>
      <categories>
        <category>日记</category>
      </categories>
      <tags>
        <tag>日记</tag>
        <tag>大学生活</tag>
      </tags>
  </entry>
</search>
